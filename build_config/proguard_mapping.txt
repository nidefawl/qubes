nidefawl.qubes.BootClient -> nidefawl.qubes.BootClient:
    13:29:java.lang.String getValue(java.lang.String[],int,java.lang.String) -> getValue
    32:77:void main(java.lang.String[]) -> main
nidefawl.qubes.Game -> Ij1LIjL1jIL1iJIj:
    nidefawl.qubes.Game instance -> do
    java.lang.String buildIdentifier -> do
    nidefawl.qubes.PlayerProfile profile -> do
    nidefawl.qubes.config.ClientSettings settings -> do
    nidefawl.qubes.gui.GuiOverlayStats statsOverlay -> do
    nidefawl.qubes.gui.GuiCached statsCached -> do
    nidefawl.qubes.gui.GuiOverlayChat chatOverlay -> do
    nidefawl.qubes.network.client.ThreadConnect connect -> do
    nidefawl.qubes.network.client.NetworkClient client -> do
    nidefawl.qubes.world.WorldClient world -> do
    nidefawl.qubes.entity.PlayerSelf player -> do
    nidefawl.qubes.input.DigController dig -> do
    nidefawl.qubes.input.Selection selection -> do
    boolean follow -> do
    nidefawl.qubes.item.BlockStack selBlock -> do
    long lastShaderLoadTime -> do
    nidefawl.qubes.vec.Vector3f vCam -> do
    nidefawl.qubes.vec.Vector3f vPlayer -> if
    nidefawl.qubes.vec.Vector3f vLastCam -> for
    nidefawl.qubes.vec.Vector3f vLastPlayer -> int
    boolean updateRenderers -> if
    boolean showGrid -> for
    boolean thirdPerson -> int
    boolean testMode -> new
    java.lang.String serverAddr -> if
    int skipChars -> do
    nidefawl.qubes.item.BaseStack testStack -> do
    nidefawl.qubes.item.BaseStack testStack2 -> if
    nidefawl.qubes.input.GameMode mode -> do
    float[] loadProgress -> do
    int throttleClick -> if
    109:109:nidefawl.qubes.input.GameMode getMode() -> do
    114:126:void connectTo(java.lang.String) -> do
    134:165:void initGame() -> do
    168:168:java.lang.String getAppTitle() -> do
    172:172:boolean loadRender(int,float) -> do
    175:252:boolean loadRender(int,float,java.lang.String) -> do
    255:309:void lateInitGame() -> if
    312:322:void toggleGameMode() -> for
    345:346:void reposModel() -> int
    349:359:void setWorld(nidefawl.qubes.world.WorldClient) -> do
    363:366:void shutdown() -> new
    373:387:void onTextInput(long,int) -> do
    391:430:void onKeyPress(long,int,int,int,int) -> do
    434:473:void onWheelScroll(long,double,double) -> do
    476:521:void onMouseClick(long,int,int,int) -> do
    524:531:void setGrabbed(boolean) -> do
    537:977:void render(float) -> do
    981:1000:void onStatsUpdated() -> try
    1004:1005:void postRenderUpdate(float) -> if
    1008:1103:void preRenderUpdate(float) -> for
    1108:1126:void onResize(int,int) -> do
    1129:1151:void tick() -> byte
    1154:1161:void returnToMenu() -> case
    1164:1164:boolean isConnected() -> do
    1168:1171:void addDebugOnScreen(java.lang.String) -> if
    1174:1174:nidefawl.qubes.world.World getWorld() -> do
    1178:1185:void setConnection(nidefawl.qubes.network.client.NetworkClient) -> do
    1188:1188:nidefawl.qubes.entity.PlayerSelf getPlayer() -> do
    1192:1193:void setPlayer(nidefawl.qubes.entity.PlayerSelf) -> do
    1196:1199:void sendPacket(nidefawl.qubes.network.packet.Packet) -> do
    1202:1202:nidefawl.qubes.PlayerProfile getProfile() -> do
    1210:1215:void saveSettings() -> char
    1218:1223:void saveProfile() -> else
    1226:1233:void loadProfile() -> goto
    1236:1243:void loadSettings() -> long
    1250:1267:void blockClicked(nidefawl.qubes.util.RayTrace$RayTraceIntersection,boolean) -> do
    1280:1280:nidefawl.qubes.input.Selection getSelection() -> do
    1284:1285:nidefawl.qubes.network.client.ClientHandler getClientHandler() -> do
nidefawl.qubes.Game$1 -> jI1LJi1LllJi:
    nidefawl.qubes.texture.array.TextureArray val$arr -> do
    nidefawl.qubes.Game this$0 -> do
    274:278:void pre() -> do
    281:282:void post() -> if
    286:290:java.lang.Void call() -> do
    270:270:java.lang.Object call() -> call
nidefawl.qubes.GameBase -> Ij1LL1JiIjIjjI:
    java.lang.String appName -> for
    int displayWidth -> for
    int displayHeight -> int
    boolean GL_ERROR_CHECKS -> try
    long windowId -> if
    int initWidth -> new
    int initHeight -> try
    int TICKS_PER_SEC -> byte
    org.lwjgl.glfw.GLFWErrorCallback errorCallback -> do
    org.lwjgl.glfw.GLFWWindowSizeCallback cbWindowSize -> do
    org.lwjgl.glfw.GLFWKeyCallback cbKeyboard -> do
    org.lwjgl.glfw.GLFWMouseButtonCallback cbMouseButton -> do
    org.lwjgl.glfw.GLFWScrollCallback cbScrollCallback -> do
    org.lwjgl.glfw.GLFWWindowFocusCallback cbWindowFocus -> do
    org.lwjgl.glfw.GLFWCursorPosCallback cbCursorPos -> do
    org.lwjgl.glfw.GLFWCharCallback cbText -> do
    boolean hasTextHook -> byte
    boolean toggleTiming -> case
    boolean DO_TIMING -> char
    float renderTime -> do
    float absTime -> if
    int ticksran -> case
    int lastFPS -> char
    long timeLastFPS -> for
    long timeLastFrame -> int
    nidefawl.qubes.util.Timer timer -> do
    int tick -> else
    boolean startRender -> else
    nidefawl.qubes.util.GameError showError -> do
    nidefawl.qubes.logging.LogBufferStream outStream -> do
    nidefawl.qubes.logging.LogBufferStream errStream -> if
    long frameTime -> do
    boolean vsync -> goto
    boolean running -> long
    boolean wasrunning -> this
    boolean sysExit -> void
    boolean minimized -> break
    java.lang.Thread thread -> do
    int newWidth -> do
    int newHeight -> if
    nidefawl.qubes.gl.GPUVendor vendor -> do
    nidefawl.qubes.GameBase baseInstance -> do
    nidefawl.qubes.input.InputController movement -> do
    nidefawl.qubes.gui.Gui gui -> do
    boolean reinittexthook -> catch
    boolean wasGrabbed -> class
    java.util.ArrayList glProfileResults -> do
    int throttleClick -> goto
    87:90:void startGame() -> this
    106:106:boolean isRunning() -> if
    110:110:nidefawl.qubes.gl.GPUVendor getVendor() -> do
    116:168:void run() -> run
    171:244:void initCallbacks() -> void
    249:321:void initDisplay(boolean) -> if
    324:324:java.lang.String getAppTitle() -> do
    328:338:void destroyContext() -> break
    341:344:void onDestroy() -> catch
    347:350:void shutdown() -> new
    353:381:void checkResize() -> class
    void onStatsUpdated() -> try
    386:388:void setVSync(boolean) -> for
    391:391:boolean getVSync() -> for
    395:395:java.lang.Thread getMainThread() -> do
    399:404:boolean _checkGLError(java.lang.String) -> do
    408:428:java.lang.String getGlErrorString(int) -> do
    433:434:void updateDisplay() -> const
    437:437:boolean isCloseRequested() -> int
    441:451:void setVSync_impl(boolean) -> int
    456:466:void updateInput() -> final
    489:597:void runFrame() -> float
    602:602:boolean loadRender(int,float) -> do
    606:660:void mainLoop() -> short
    663:720:void initGLContext() -> super
    723:731:void updateTime() -> throw
    735:851:void showErrorScreen(java.lang.String,java.util.List,java.lang.Throwable,boolean) -> do
    854:855:void setException(nidefawl.qubes.util.GameError) -> do
    862:862:boolean hasTextHook() -> new
    865:871:void setTextHook(boolean) -> new
    void onTextInput(long,int) -> do
    void onKeyPress(long,int,int,int,int) -> do
    void onWheelScroll(long,double,double) -> do
    void render(float) -> do
    void preRenderUpdate(float) -> for
    void postRenderUpdate(float) -> if
    void onResize(int,int) -> do
    void tick() -> byte
    void initGame() -> do
    void lateInitGame() -> if
    897:923:void showGUI(nidefawl.qubes.gui.Gui) -> do
    927:969:void onMouseClick(long,int,int,int) -> do
    971:976:void setGrabbed(boolean) -> do
    979:979:boolean isGrabbed() -> try
    983:990:void input(float) -> int
    993:993:nidefawl.qubes.gui.Gui getGui() -> do
    35:35:int access$002(nidefawl.qubes.GameBase,int) -> do
    35:35:int access$102(nidefawl.qubes.GameBase,int) -> if
nidefawl.qubes.GameBase$1 -> ll1LL1JiiJL1iJL1:
    nidefawl.qubes.GameBase this$0 -> do
    176:178:void invoke(long,int,int) -> invoke
nidefawl.qubes.GameBase$2 -> jI1LJi1L1LJiiJll:
    nidefawl.qubes.GameBase this$0 -> do
    184:188:void invoke(long,int,int,int,int) -> invoke
nidefawl.qubes.GameBase$3 -> IjllL1JiJiiJJiJi:
    nidefawl.qubes.GameBase this$0 -> do
    195:199:void invoke(long,int,int,int) -> invoke
nidefawl.qubes.GameBase$4 -> JiL1lljI1Lll1LL1:
    nidefawl.qubes.GameBase this$0 -> do
    205:211:void invoke(long,double,double) -> invoke
nidefawl.qubes.GameBase$5 -> Ij1LIjiJllL11LJi:
    nidefawl.qubes.GameBase this$0 -> do
    218:222:void invoke(long,int) -> invoke
nidefawl.qubes.GameBase$6 -> iJlljI1LiJiJiJJi:
    nidefawl.qubes.GameBase this$0 -> do
    228:232:void invoke(long,double,double) -> invoke
nidefawl.qubes.GameBase$7 -> iJll1LjIL1IjJiIj:
    nidefawl.qubes.GameBase this$0 -> do
    238:242:void invoke(long,int) -> invoke
nidefawl.qubes.NativeClassLoader -> nidefawl.qubes.NativeClassLoader:
    nidefawl.qubes.NativeClassLoader instance -> instance
    byte[] cppLoadClass(java.lang.String) -> cppLoadClass
    byte[] cppLoadResource(java.lang.String) -> cppLoadResource
    19:19:java.lang.Class loadClassRedirect(java.lang.String) -> loadClassRedirect
    24:31:java.lang.Class findClass(java.lang.String) -> findClass
    34:36:byte[] loadGameResource(java.lang.String) -> loadGameResource
    40:46:void setLoader() -> setLoader
    52:52:nidefawl.qubes.NativeClassLoader getInstance() -> getInstance
nidefawl.qubes.NativeInterface -> nidefawl.qubes.NativeInterface:
    nidefawl.qubes.NativeInterface instance -> instance
    boolean isPresent -> isPresent
    15:15:nidefawl.qubes.NativeInterface getInstance() -> getInstance
    19:28:void start() -> start
    30:30:boolean isPresent() -> isPresent
    void gameCrashed(nidefawl.qubes.util.CrashInfo) -> gameCrashed
    void gameAlive() -> gameAlive
nidefawl.qubes.PlayerProfile -> IjJillL1ll1LJiL1:
    java.util.UUID uuid -> do
    java.lang.String name -> do
    22:25:void setDefaults() -> do
    36:37:void setName(java.lang.String) -> do
    43:43:java.lang.String getName() -> do
    48:50:void load() -> if
    54:56:void save() -> for
nidefawl.qubes.assets.Asset -> L1JiJiiJ1L1LJiJi:
    nidefawl.qubes.assets.AssetPack pack -> do
    6:7:void setPack(nidefawl.qubes.assets.AssetPack) -> do
    12:12:nidefawl.qubes.assets.AssetPack getPack() -> do
nidefawl.qubes.assets.AssetBinary -> JiL1JiiJIjiJiJ1L:
    byte[] data -> do
    java.lang.String name -> do
    21:34:void load(nidefawl.qubes.assets.AssetInputStream) -> do
    36:36:byte[] getData() -> do
    43:43:java.lang.String getName() -> do
nidefawl.qubes.assets.AssetInputStream -> ll1LIjjIIjL1IjIj:
    nidefawl.qubes.assets.AssetPack source -> do
    java.io.InputStream inputStream -> do
    30:32:void close() -> do
nidefawl.qubes.assets.AssetManager -> jIL1Ij1LIjiJIj:
    nidefawl.qubes.assets.AssetManager instance -> do
    java.util.ArrayList assetPacks -> do
    java.io.File folder -> do
    14:14:nidefawl.qubes.assets.AssetManager getInstance() -> do
    23:29:void init() -> do
    void _init() -> if
    void toggleExternalResources() -> for
    boolean isExternalResources() -> do
    nidefawl.qubes.shader.Shader loadShader(nidefawl.qubes.util.IResourceManager,java.lang.String) -> do
    nidefawl.qubes.shader.Shader loadShader(nidefawl.qubes.util.IResourceManager,java.lang.String,nidefawl.qubes.shader.IShaderDef) -> do
    nidefawl.qubes.shader.Shader loadShader(nidefawl.qubes.util.IResourceManager,java.lang.String,java.lang.String,java.lang.String,java.lang.String,nidefawl.qubes.shader.IShaderDef) -> do
    48:49:java.io.InputStream getInputStream(java.lang.String) -> do
    53:72:nidefawl.qubes.assets.AssetBinary loadBin(java.lang.String) -> do
    84:106:nidefawl.qubes.assets.AssetInputStream findResource(java.lang.String,boolean) -> do
    136:136:nidefawl.qubes.assets.AssetTexture loadPNGAsset(java.lang.String) -> do
    139:163:nidefawl.qubes.assets.AssetTexture loadPNGAsset(java.lang.String,boolean) -> do
nidefawl.qubes.assets.AssetManagerClient -> jI1LiJlliJ1LiJjI:
    nidefawl.qubes.shader.ShaderSource lastFailedShader -> do
    boolean externalResources -> do
    18:20:void toggleExternalResources() -> for
    23:23:boolean isExternalResources() -> do
    51:51:nidefawl.qubes.shader.Shader loadShader(nidefawl.qubes.util.IResourceManager,java.lang.String) -> do
    55:55:nidefawl.qubes.shader.Shader loadShader(nidefawl.qubes.util.IResourceManager,java.lang.String,nidefawl.qubes.shader.IShaderDef) -> do
    61:69:java.lang.String[] splitPath(java.lang.String) -> do
    73:106:nidefawl.qubes.shader.Shader loadShader(nidefawl.qubes.util.IResourceManager,java.lang.String,java.lang.String,java.lang.String,java.lang.String,nidefawl.qubes.shader.IShaderDef) -> do
    116:148:void _init() -> if
nidefawl.qubes.assets.AssetManagerServer -> JiIjjIiJL1jIiJiJ:
    16:16:void toggleExternalResources() -> for
    20:20:boolean isExternalResources() -> do
    30:30:nidefawl.qubes.shader.Shader loadShader(nidefawl.qubes.util.IResourceManager,java.lang.String) -> do
    35:35:nidefawl.qubes.shader.Shader loadShader(nidefawl.qubes.util.IResourceManager,java.lang.String,nidefawl.qubes.shader.IShaderDef) -> do
    45:51:void _init() -> if
    55:55:nidefawl.qubes.shader.Shader loadShader(nidefawl.qubes.util.IResourceManager,java.lang.String,java.lang.String,java.lang.String,java.lang.String,nidefawl.qubes.shader.IShaderDef) -> do
nidefawl.qubes.assets.AssetPack -> IjIjJiJiiJjIjIJi:
    nidefawl.qubes.assets.AssetInputStream getInputStream(java.lang.String) -> do
nidefawl.qubes.assets.AssetPackClassPath -> IjIjjIJiL1iJ1LJi:
    22:25:nidefawl.qubes.assets.AssetInputStream getInputStream(java.lang.String) -> do
    33:33:java.lang.String toString() -> toString
nidefawl.qubes.assets.AssetPackFolder -> iJiJ1LllL1L1jI1L:
    java.io.File directory -> do
    27:33:nidefawl.qubes.assets.AssetInputStream getInputStream(java.lang.String) -> do
    38:38:java.lang.String toString() -> toString
nidefawl.qubes.assets.AssetTexture -> lliJiJJiJill1L1L:
    int width -> if
    int height -> for
    byte[] data -> do
    int slot -> do
    java.lang.String name -> do
    int bits -> int
    int colorComps -> new
    short[] shortData -> do
    33:61:boolean loadImageIO(nidefawl.qubes.assets.AssetInputStream) -> do
    66:85:boolean loadPNGDecoder(nidefawl.qubes.assets.AssetInputStream) -> if
    94:94:int getWidth() -> do
    97:97:int getHeight() -> if
    100:100:byte[] getData() -> do
    107:129:void rescale(int) -> do
    135:146:void cutH() -> do
    149:150:void setSlot(int) -> if
    153:153:int getSlot() -> for
    160:160:java.lang.String getName() -> do
nidefawl.qubes.async.AsyncTask -> iJIjiJiJlliJ:
    java.util.concurrent.Future future -> do
    16:16:void pre() -> do
    19:19:void post() -> if
    21:22:void setFuture(java.util.concurrent.Future) -> do
    24:24:boolean isDone() -> do
    27:27:boolean isCancelled() -> if
nidefawl.qubes.async.AsyncTaskThread -> L1llJi1LJiL1jIiJ:
    java.util.zip.Inflater inflate -> do
    int i10Meg -> do
    byte[] tmpBuffer -> do
    18:28:byte[] inflate(byte[]) -> do
nidefawl.qubes.async.AsyncTasks -> L1Ij1LIjJijIjI1L:
    java.util.ArrayList tasks -> do
    java.util.concurrent.ExecutorService service -> do
    16:34:void init() -> do
    37:51:void submit(nidefawl.qubes.async.AsyncTask) -> do
    53:73:boolean completeTasks() -> do
    76:80:void shutdown() -> if
nidefawl.qubes.async.AsyncTasks$1 -> iJIjiJllll1LlliJ:
    30:30:java.lang.Thread newThread(java.lang.Runnable) -> newThread
nidefawl.qubes.async.AsyncTasks$2 -> Ij1L1LL1JillIjJi:
    25:26:void uncaughtException(java.lang.Thread,java.lang.Throwable) -> uncaughtException
nidefawl.qubes.biome.Biome -> JiJillL1llIjL1jI:
    nidefawl.qubes.biome.Biome[] biomes -> do
    int maxBiome -> do
    nidefawl.qubes.biome.Biome MEADOW_GREEN -> do
    nidefawl.qubes.biome.Biome MEADOW_BLUE -> if
    nidefawl.qubes.biome.Biome MEADOW_RED -> for
    nidefawl.qubes.biome.Biome DESERT -> int
    nidefawl.qubes.biome.Biome DESERT_RED -> new
    nidefawl.qubes.biome.Biome ICE -> try
    nidefawl.qubes.biome.Biome MEADOW_GREEN2 -> byte
    int color -> if
    int colorFoliage -> for
    int colorFoliage2 -> int
    int colorLeaves -> new
    int colorGrass -> try
    int id -> byte
    83:99:nidefawl.qubes.biome.Biome setColor(nidefawl.qubes.biome.BiomeColor,int) -> do
    107:108:nidefawl.qubes.biome.Biome setDebugColor(int) -> do
    116:118:nidefawl.qubes.biome.Biome get(int) -> if
    126:142:int getFaceColor(nidefawl.qubes.biome.BiomeColor) -> do
nidefawl.qubes.biome.Biome$1 -> iJ1LiJlljIllIj:
    int[] $SwitchMap$nidefawl$qubes$biome$BiomeColor -> do
nidefawl.qubes.biome.BiomeColor -> JiIjL1IjiJJi1L1L:
    nidefawl.qubes.biome.BiomeColor GRASS -> do
    nidefawl.qubes.biome.BiomeColor LEAVES -> if
    nidefawl.qubes.biome.BiomeColor FOLIAGE -> for
    nidefawl.qubes.biome.BiomeColor FOLIAGE2 -> int
    nidefawl.qubes.biome.BiomeColor[] $VALUES -> do
    10:10:nidefawl.qubes.biome.BiomeColor[] values() -> values
    10:10:nidefawl.qubes.biome.BiomeColor valueOf(java.lang.String) -> valueOf
nidefawl.qubes.biome.BiomeDesert -> JiJiJiJiL11LJi1L:
nidefawl.qubes.biome.BiomeDesertRed -> L1IjjIL1jI1LL1L1:
nidefawl.qubes.biome.BiomeIce -> lllljIJiL1iJIjIj:
nidefawl.qubes.biome.BiomeMeadow -> IjjIL1jIJijIJijI:
nidefawl.qubes.block.Block -> Ji1LjIL1JiiJjI1L:
    nidefawl.qubes.block.Block[] registeredblocks -> if
    short[] registeredblockIds -> do
    nidefawl.qubes.block.Block[] block -> do
    java.lang.String[] NO_TEXTURES -> do
    nidefawl.qubes.block.Block air -> do
    nidefawl.qubes.block.Block grass -> if
    nidefawl.qubes.block.Block dirt -> for
    nidefawl.qubes.block.BlockGroupStones stones -> do
    nidefawl.qubes.block.Block water -> int
    nidefawl.qubes.block.Block sand -> new
    nidefawl.qubes.block.Block sand_red -> try
    nidefawl.qubes.block.Block snow -> byte
    nidefawl.qubes.block.Block ice -> case
    nidefawl.qubes.block.Block gravel -> char
    nidefawl.qubes.block.BlockGroupLogs logs -> do
    nidefawl.qubes.block.BlockGroup wood -> do
    nidefawl.qubes.block.BlockGroupLeaves leaves -> do
    nidefawl.qubes.block.Block grassbush -> else
    nidefawl.qubes.block.Block heath -> goto
    nidefawl.qubes.block.Block aloe_vera -> long
    nidefawl.qubes.block.Block nasturtium -> this
    nidefawl.qubes.block.Block thingrass -> void
    nidefawl.qubes.block.Block vines -> break
    nidefawl.qubes.block.Block treemoss -> catch
    nidefawl.qubes.block.Block quarter -> class
    nidefawl.qubes.block.BlockGroupOres ores -> do
    nidefawl.qubes.block.BlockGroup bricks -> if
    nidefawl.qubes.block.BlockGroup stonebricks -> for
    nidefawl.qubes.block.BlockGroup smoothstones -> int
    nidefawl.qubes.block.BlockGroup stonepath -> new
    nidefawl.qubes.block.BlockGroup cobblestones -> try
    nidefawl.qubes.block.BlockGroup slabs -> byte
    nidefawl.qubes.block.BlockGroup stairs -> case
    nidefawl.qubes.block.BlockGroup walls -> char
    nidefawl.qubes.block.BlockGroup fences -> else
    nidefawl.qubes.block.BlockGroup parquets -> goto
    nidefawl.qubes.block.Block flower_fmn_black -> const
    nidefawl.qubes.block.Block flower_fmn_blue -> final
    nidefawl.qubes.block.Block flower_compositae_camille -> float
    nidefawl.qubes.block.Block flower_compositae_milkspice -> short
    nidefawl.qubes.block.Block flower_compositae_pinkpanther -> super
    nidefawl.qubes.block.Block flower_compositae_tigerteeth -> throw
    nidefawl.qubes.block.Block flower_violet -> while
    nidefawl.qubes.block.Block flower_rose -> double
    nidefawl.qubes.block.Block flower_poppy1 -> import
    nidefawl.qubes.block.Block flower_poppy2 -> native
    nidefawl.qubes.block.Block flower_poppy3 -> public
    nidefawl.qubes.block.Block flower_oxmorina_blue -> return
    nidefawl.qubes.block.Block flower_cup_0 -> static
    nidefawl.qubes.block.Block flower_cup_1 -> switch
    nidefawl.qubes.block.Block flower_cup_2 -> throws
    nidefawl.qubes.block.Block flower_cup_3 -> boolean
    nidefawl.qubes.block.Block flower_cup_4 -> default
    nidefawl.qubes.block.Block flower_cup_5 -> extends
    nidefawl.qubes.block.Block flower_cup_6 -> finally
    nidefawl.qubes.block.Block flower_cup_7 -> package
    nidefawl.qubes.block.Block flower_star_frost -> private
    nidefawl.qubes.block.Block flower_star_sundown -> abstract
    nidefawl.qubes.block.Block flower_dandelion -> continue
    nidefawl.qubes.block.Block flower_lotus -> strictfp
    nidefawl.qubes.block.Block flower_lavender -> volatile
    nidefawl.qubes.block.Block flower_tulip1 -> interface
    nidefawl.qubes.block.Block flower_tulip2 -> protected
    nidefawl.qubes.block.Block flower_tulip3 -> transient
    nidefawl.qubes.block.Block flower_tulip4 -> implements
    nidefawl.qubes.block.Block flower_tulip5 -> instanceof
    nidefawl.qubes.block.Block flower_tulip6 -> synchronized
    nidefawl.qubes.block.Block flower_nomades -> ZssZSS2zz2SSZssZ
    nidefawl.qubes.block.Block flower_sheeps_meal -> z22zZsSSSS2zZsSS
    nidefawl.qubes.block.Block rhubarb -> Zsz22z2z2zZsZs
    nidefawl.qubes.block.Block fern1 -> sZz2SSZssZz2z2z2
    nidefawl.qubes.block.Block fern2 -> SSZsZs2zsZsZ2zsZ
    nidefawl.qubes.block.Block fern3 -> z2ZsZs2zZsZs2zsZ
    nidefawl.qubes.block.Block fern4 -> ZssZZsz2sZsZ2zz2
    nidefawl.qubes.block.Block double_heath -> sZSSZsZsz2ZsZssZ
    nidefawl.qubes.block.Block tallgrass1 -> SSZsz2ZssZsZz2
    nidefawl.qubes.block.Block tallgrass2 -> z2z22zSSZs2z2z2z
    nidefawl.qubes.block.Block cattail -> sZZsZsZsSSsZ
    nidefawl.qubes.block.Block waterlily -> sZ2zsZSSZssZsZ2z
    nidefawl.qubes.block.Block pad -> Zs2z2zSSz2Zsz2
    nidefawl.qubes.block.BlockGroup modelled -> long
    int id -> do
    java.lang.String name -> do
    boolean transparent -> do
    java.lang.String[] textures -> if
    java.lang.String[] normalMaps -> for
    nidefawl.qubes.vec.AABBFloat blockBounds -> do
    nidefawl.qubes.block.BlockTextureMode textureMode -> do
    nidefawl.qubes.block.BlockCategory blockCategory -> do
    nidefawl.qubes.models.qmodel.ModelBlock[] loadedModels -> do
    java.lang.String[] models -> int
    nidefawl.qubes.block.BlockGroup blockGroup -> this
    141:141:void preInit() -> do
    143:166:void postInit() -> if
    195:196:nidefawl.qubes.block.Block setBlockGroup(nidefawl.qubes.block.BlockGroup) -> do
    200:201:nidefawl.qubes.block.Block setCategory(nidefawl.qubes.block.BlockCategory) -> do
    208:208:void init() -> for
    218:218:java.lang.String[] getTextures() -> do
    221:221:java.lang.String[] getNormalMaps() -> if
    225:229:nidefawl.qubes.block.Block setTextures(java.lang.String[]) -> do
    232:236:nidefawl.qubes.block.Block setNormalMaps(java.lang.String[]) -> if
    240:241:nidefawl.qubes.block.Block setModels(java.lang.String[]) -> for
    244:244:java.lang.String[] getModels() -> for
    253:253:java.lang.String getName() -> do
    257:257:boolean isTransparent() -> do
    260:260:int getFaceColor(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int) -> do
    263:264:nidefawl.qubes.block.Block setTextureMode(nidefawl.qubes.block.BlockTextureMode) -> do
    267:267:int getTexturePasses() -> do
    285:296:int getTexture(int,int,int) -> do
    299:299:int getLODPass() -> if
    302:302:int getRenderPass() -> for
    305:305:int getRenderType() -> int
    308:308:boolean isValid(int) -> do
    311:311:nidefawl.qubes.block.Block get(int) -> do
    314:314:boolean applyAO() -> if
    317:317:boolean isOccluding() -> for
    321:324:int getBBs(nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.AABBFloat[]) -> do
    327:327:float getAlpha() -> do
    330:330:int getLightValue() -> new
    333:333:boolean isOpaque(int) -> if
    337:338:nidefawl.qubes.vec.AABBFloat getRenderBlockBounds(nidefawl.qubes.world.IBlockWorld,int,int,int,nidefawl.qubes.vec.AABBFloat) -> do
    341:365:boolean isVisibleBounds(nidefawl.qubes.world.IBlockWorld,int,int,nidefawl.qubes.vec.AABBFloat) -> do
    369:372:boolean isFaceVisible(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int,nidefawl.qubes.block.Block,nidefawl.qubes.vec.AABBFloat) -> do
    382:382:boolean isNormalBlock(nidefawl.qubes.world.IBlockWorld,int,int,int) -> do
    388:388:boolean isSlab() -> int
    394:394:boolean isStairs() -> new
    448:448:boolean isReplaceable() -> try
    468:473:boolean raytrace(nidefawl.qubes.util.RayTrace,nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f) -> do
    476:476:boolean isFullBB() -> byte
    479:479:boolean isOccludingBlock(nidefawl.qubes.world.IBlockWorld,int,int,int) -> if
    485:485:short[] getRegisteredIDs() -> do
    492:492:nidefawl.qubes.block.Block[] getRegisteredBlocks() -> do
    496:499:void getQuarters(nidefawl.qubes.world.IBlockWorld,int,int,int,int[]) -> do
    506:506:int getRenderShadow() -> try
    511:513:java.lang.String toString() -> toString
    517:521:int setSelectionBB(nidefawl.qubes.world.World,nidefawl.qubes.util.RayTrace$RayTraceIntersection,nidefawl.qubes.vec.BlockPos,nidefawl.qubes.vec.AABBFloat) -> do
    525:525:boolean canBlockConnect(nidefawl.qubes.world.IBlockWorld,int,int,int,nidefawl.qubes.block.BlockConnect,int,int) -> do
    529:537:int getItems(java.util.List) -> do
    541:541:int getMeshedColor(nidefawl.qubes.meshing.BlockSurface) -> do
    545:545:int getTextureByIdx(int) -> do
    579:579:boolean skipTexturePassSide(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int,int) -> do
    587:587:int getInvRenderData(nidefawl.qubes.item.BlockStack) -> do
    593:593:float getInvRenderRotation() -> if
    601:601:nidefawl.qubes.models.qmodel.ModelBlock getBlockModel(nidefawl.qubes.world.IBlockWorld,int,int,int,int) -> do
    604:607:int getNormalMap(int) -> if
    610:610:float getRoughness(int) -> do
    613:613:nidefawl.qubes.block.Block getBaseBlock() -> do
    616:616:boolean canWalkThru(nidefawl.qubes.world.IBlockWorld,int,int,int,nidefawl.qubes.entity.Entity) -> do
nidefawl.qubes.block.Block$1 -> Ijll1L1LjIL1Jill:
    int[] $SwitchMap$nidefawl$qubes$block$BlockTextureMode -> do
nidefawl.qubes.block.BlockAir -> jIllIjjIJiiJJiIj:
    33:33:nidefawl.qubes.block.Block setTextures(java.lang.String[]) -> do
    41:41:int getTexture(int,int,int) -> do
    45:45:int getRenderPass() -> for
    48:48:int getRenderType() -> int
    52:52:boolean applyAO() -> if
    55:55:boolean isOccluding() -> for
    59:59:int getBBs(nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.AABBFloat[]) -> do
    62:62:float getAlpha() -> do
    65:65:int getLightValue() -> new
    70:70:boolean isVisibleBounds(nidefawl.qubes.world.IBlockWorld,int,int,nidefawl.qubes.vec.AABBFloat) -> do
    74:74:boolean isFaceVisible(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int,nidefawl.qubes.block.Block,nidefawl.qubes.vec.AABBFloat) -> do
    78:78:boolean isNormalBlock(nidefawl.qubes.world.IBlockWorld,int,int,int) -> do
    82:82:boolean isReplaceable() -> try
    87:87:boolean raytrace(nidefawl.qubes.util.RayTrace,nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f) -> do
    90:90:boolean isFullBB() -> byte
    95:95:int setSelectionBB(nidefawl.qubes.world.World,nidefawl.qubes.util.RayTrace$RayTraceIntersection,nidefawl.qubes.vec.BlockPos,nidefawl.qubes.vec.AABBFloat) -> do
    99:99:int getItems(java.util.List) -> do
    104:104:boolean canBlockConnect(nidefawl.qubes.world.IBlockWorld,int,int,int,nidefawl.qubes.block.BlockConnect,int,int) -> do
nidefawl.qubes.block.BlockCategory -> iJL1llIj1LJi1LIj:
    nidefawl.qubes.block.BlockCategory GROUND -> do
    nidefawl.qubes.block.BlockCategory ROCK -> if
    nidefawl.qubes.block.BlockCategory LEAVES -> for
    nidefawl.qubes.block.BlockCategory STONE -> int
    nidefawl.qubes.block.BlockCategory LOG -> new
    nidefawl.qubes.block.BlockCategory FLOWER -> try
    nidefawl.qubes.block.BlockCategory VINE -> byte
    nidefawl.qubes.block.BlockCategory PLANT -> case
    nidefawl.qubes.block.BlockCategory UNASSIGNED -> char
    nidefawl.qubes.block.BlockCategory[] $VALUES -> do
    10:10:nidefawl.qubes.block.BlockCategory[] values() -> values
    10:10:nidefawl.qubes.block.BlockCategory valueOf(java.lang.String) -> valueOf
nidefawl.qubes.block.BlockConnect -> L1ll1L1LJillIjL1:
    nidefawl.qubes.block.BlockConnect FENCE -> do
    nidefawl.qubes.block.BlockConnect WALL -> if
    nidefawl.qubes.block.BlockConnect PANE -> for
    nidefawl.qubes.block.BlockConnect[] $VALUES -> do
    10:10:nidefawl.qubes.block.BlockConnect[] values() -> values
    10:10:nidefawl.qubes.block.BlockConnect valueOf(java.lang.String) -> valueOf
nidefawl.qubes.block.BlockDoubleCatTail -> lliJlliJL1JijIjI:
    13:13:int getTexturePasses() -> do
    17:20:int getTexture(int,int,int) -> do
nidefawl.qubes.block.BlockDoublePlant -> IjIjllIjJiIjJiL1:
    29:29:int getFaceColor(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int) -> do
    39:39:int getRenderType() -> int
    44:44:boolean applyAO() -> if
    49:49:boolean isOccluding() -> for
    57:57:int getBBs(nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.AABBFloat[]) -> do
    61:61:boolean isReplaceable() -> try
    65:65:boolean isFullBB() -> byte
    72:75:nidefawl.qubes.vec.AABBFloat getRenderBlockBounds(nidefawl.qubes.world.IBlockWorld,int,int,int,nidefawl.qubes.vec.AABBFloat) -> do
    80:85:int getTexture(int,int,int) -> do
    90:90:int getRenderShadow() -> try
nidefawl.qubes.block.BlockFence -> llllL1IjJiIjjIll:
    nidefawl.qubes.block.Block baseBlock -> z2SS2zsZSSZs
    19:19:nidefawl.qubes.block.Block getBaseBlock() -> do
    23:32:int setFenceConnections(nidefawl.qubes.world.IBlockWorld,int,int,int,boolean[]) -> do
    36:42:boolean canConnectTo(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int) -> do
    46:46:boolean canBlockConnect(nidefawl.qubes.world.IBlockWorld,int,int,int,nidefawl.qubes.block.BlockConnect,int,int) -> do
    59:59:int getLightValue() -> new
    64:64:int getFaceColor(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int) -> do
    69:69:float getAlpha() -> do
    73:79:int getTexture(int,int,int) -> do
    83:83:int getRenderType() -> int
    88:88:boolean isOccluding() -> for
    93:93:boolean isFullBB() -> byte
    98:98:boolean isFaceVisible(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int,nidefawl.qubes.block.Block,nidefawl.qubes.vec.AABBFloat) -> do
    103:103:int getRenderShadow() -> try
    108:124:nidefawl.qubes.vec.AABBFloat getRenderBlockBounds(nidefawl.qubes.world.IBlockWorld,int,int,int,nidefawl.qubes.vec.AABBFloat) -> do
    129:181:int getBBs(nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.AABBFloat[]) -> do
nidefawl.qubes.block.BlockFlowerFMN -> llJill1LjIiJjIIj:
    29:32:int getFaceColor(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int) -> do
    35:35:int getTexturePasses() -> do
    39:42:int getTexture(int,int,int) -> do
nidefawl.qubes.block.BlockGrass -> iJjIllJiL1L1Ji:
    19:21:int getFaceColor(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int) -> do
    25:34:int getTexture(int,int,int) -> do
    37:37:int getMeshedColor(nidefawl.qubes.meshing.BlockSurface) -> do
    41:41:int getTexturePasses() -> do
    45:45:boolean skipTexturePassSide(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int,int) -> do
    49:54:int getNormalMap(int) -> if
nidefawl.qubes.block.BlockGrassBush -> lliJJiIjL1llL1L1:
    27:27:boolean applyRandomOffset() -> case
    31:31:int getLODPass() -> if
    35:35:int getFaceColor(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int) -> do
nidefawl.qubes.block.BlockGravel -> L1jIL11LjIL1llIj:
nidefawl.qubes.block.BlockGroup -> jIllL1JiJilliJll:
    int NEXT_GROUP_ID -> do
    int id -> if
    java.util.List blocks -> do
    24:26:void addBlock(nidefawl.qubes.block.Block) -> do
    java.util.List getNames() -> do
    31:31:java.util.List getBlocks() -> if
nidefawl.qubes.block.BlockGroupBricks -> L1JiL1jIjIlljIJi:
    java.util.List stoneNames -> do
    27:27:java.util.List getNames() -> do
nidefawl.qubes.block.BlockGroupCobbleStones -> iJL1jIIjjIjIiJ1L:
    java.util.List stoneNames -> do
    29:29:java.util.List getNames() -> do
nidefawl.qubes.block.BlockGroupFences -> Ji1LL11Lll1LJiiJ:
    java.util.List stoneNames -> do
    44:44:java.util.List getNames() -> do
nidefawl.qubes.block.BlockGroupLeaves -> llL1IjiJJiJiiJ:
    java.util.List leaveNames -> do
    nidefawl.qubes.block.Block oak -> do
    23:23:java.util.List getNames() -> do
nidefawl.qubes.block.BlockGroupLogs -> iJL1JilllliJJiiJ:
    java.util.List logNames -> do
    nidefawl.qubes.block.Block oak -> do
    35:35:java.util.List getNames() -> do
nidefawl.qubes.block.BlockGroupModelledStones -> iJ1LiJiJllL1Ji1L:
    java.util.List stoneNames -> do
    53:53:java.util.List getNames() -> do
nidefawl.qubes.block.BlockGroupOres -> jIiJL1JiJiiJL1iJ:
    java.util.List stoneNames -> do
    35:35:java.util.List getNames() -> do
nidefawl.qubes.block.BlockGroupParquets -> ll1L1LIj1LL1jI1L:
    28:28:java.util.List getNames() -> do
nidefawl.qubes.block.BlockGroupSlabs -> iJ1LllL1iJJillL1:
    java.util.List stoneNames -> do
    42:42:java.util.List getNames() -> do
nidefawl.qubes.block.BlockGroupSmoothStones -> lliJL1JiL1L11LIj:
    java.util.List stoneNames -> do
    30:30:java.util.List getNames() -> do
nidefawl.qubes.block.BlockGroupStairs -> jI1LIjjIiJlljIll:
    java.util.List stoneNames -> do
    44:44:java.util.List getNames() -> do
nidefawl.qubes.block.BlockGroupStoneBricks -> L1L1jIJiiJIjiJjI:
    java.util.List stoneNames -> do
    34:34:java.util.List getNames() -> do
nidefawl.qubes.block.BlockGroupStonePath -> llL1IjjIJiiJlljI:
    java.util.List stoneNames -> do
    29:29:java.util.List getNames() -> do
nidefawl.qubes.block.BlockGroupStones -> jIjIJi1LIjlliJL1:
    java.util.List stoneNames -> do
    nidefawl.qubes.block.Block granite -> do
    nidefawl.qubes.block.Block basalt -> if
    nidefawl.qubes.block.Block diorite -> for
    nidefawl.qubes.block.Block marble -> int
    nidefawl.qubes.block.Block obsidian -> new
    nidefawl.qubes.block.Block sandstone -> try
    nidefawl.qubes.block.Block sandstone_red -> byte
    42:42:java.util.List getNames() -> do
nidefawl.qubes.block.BlockGroupWalls -> jIiJJiL11LiJL1:
    java.util.List stoneNames -> do
    43:43:java.util.List getNames() -> do
nidefawl.qubes.block.BlockGroupWood -> IjiJ1LIj1L1LIjIj:
    26:26:java.util.List getNames() -> do
nidefawl.qubes.block.BlockIce -> Ji1LJilliJjI1LJi:
    20:20:int getRenderPass() -> for
    25:25:boolean applyAO() -> if
    30:30:float getAlpha() -> do
    35:35:boolean isOccluding() -> for
    40:40:int getRenderShadow() -> try
    48:52:nidefawl.qubes.vec.AABBFloat getRenderBlockBounds(nidefawl.qubes.world.IBlockWorld,int,int,int,nidefawl.qubes.vec.AABBFloat) -> do
    56:56:int getLODPass() -> if
    59:67:boolean isFaceVisible(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int,nidefawl.qubes.block.Block,nidefawl.qubes.vec.AABBFloat) -> do
    71:76:int getBBs(nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.AABBFloat[]) -> do
    81:81:boolean isFullBB() -> byte
    85:85:int getRenderType() -> int
nidefawl.qubes.block.BlockLeaves -> L11LjIllL11LIjJi:
    int leavesColor -> if
    32:32:int getFaceColor(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int) -> do
    37:37:boolean applyAO() -> if
    42:42:boolean isOccluding() -> for
nidefawl.qubes.block.BlockLog -> jIJi1LiJL11Lll1L:
    int index -> if
    35:35:int getIndex() -> byte
    40:66:int getTexture(int,int,int) -> do
    71:71:int getTexturePasses() -> do
    85:89:boolean skipTexturePassSide(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int,int) -> do
    94:94:int getRenderType() -> int
nidefawl.qubes.block.BlockModelled -> lljIIjL1JiL1llIj:
    18:18:nidefawl.qubes.vec.AABBFloat getRenderBlockBounds(nidefawl.qubes.world.IBlockWorld,int,int,int,nidefawl.qubes.vec.AABBFloat) -> do
    23:23:boolean isFullBB() -> byte
    27:27:boolean isTransparent() -> do
    31:31:int getLODPass() -> if
    35:35:int getRenderPass() -> for
    39:39:int getRenderShadow() -> try
    43:43:boolean isOccluding() -> for
    48:48:int getRenderType() -> int
nidefawl.qubes.block.BlockOre -> IjlljIIjllJillL1:
    nidefawl.qubes.block.Block baseBlock -> z2SS2zsZSSZs
    26:26:int getLightValue() -> new
    31:31:int getFaceColor(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int) -> do
    36:40:int getTexture(int,int,int) -> do
    45:45:int getTexturePasses() -> do
    61:65:boolean skipTexturePassSide(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int,int) -> do
    69:69:int getNormalMap(int) -> if
    73:73:int getRenderType() -> int
nidefawl.qubes.block.BlockPane -> Ijll1LjIJiJiJiL1:
    18:27:int setPaneConnections(nidefawl.qubes.world.IBlockWorld,int,int,int,int[]) -> do
    31:31:boolean canConnectTo(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int) -> do
    35:41:int getConnect(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int) -> if
    45:45:boolean canBlockConnect(nidefawl.qubes.world.IBlockWorld,int,int,int,nidefawl.qubes.block.BlockConnect,int,int) -> do
    53:53:int getRenderType() -> int
    59:59:int getRenderShadow() -> try
    64:64:boolean isOccluding() -> for
    69:69:boolean isFullBB() -> byte
    74:74:boolean isFaceVisible(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int,nidefawl.qubes.block.Block,nidefawl.qubes.vec.AABBFloat) -> do
    80:109:nidefawl.qubes.vec.AABBFloat getRenderBlockBounds(nidefawl.qubes.world.IBlockWorld,int,int,int,nidefawl.qubes.vec.AABBFloat) -> do
    114:166:int getBBs(nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.AABBFloat[]) -> do
nidefawl.qubes.block.BlockPlantCrossedSquares -> jIlliJjIlliJ1Lll:
    boolean multipass -> do
    37:40:int getFaceColor(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int) -> do
    44:44:int getRenderType() -> int
    49:49:boolean isOccluding() -> for
    57:57:int getBBs(nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.AABBFloat[]) -> do
    61:61:boolean isReplaceable() -> try
    65:65:boolean isFullBB() -> byte
    68:68:boolean applyRandomOffset() -> case
    72:75:nidefawl.qubes.vec.AABBFloat getRenderBlockBounds(nidefawl.qubes.world.IBlockWorld,int,int,int,nidefawl.qubes.vec.AABBFloat) -> do
    80:80:int getRenderShadow() -> try
    83:83:int getTexturePasses() -> do
    87:90:int getTexture(int,int,int) -> do
    96:96:int getLODPass() -> if
nidefawl.qubes.block.BlockPlantFlat -> JillIjlljIIjjIjI:
    32:32:int getFaceColor(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int) -> do
    36:36:int getRenderType() -> int
    41:41:boolean isOccluding() -> for
    46:46:int getBBs(nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.AABBFloat[]) -> do
    50:50:boolean isReplaceable() -> try
    54:54:boolean isFullBB() -> byte
    61:68:nidefawl.qubes.vec.AABBFloat getRenderBlockBounds(nidefawl.qubes.world.IBlockWorld,int,int,int,nidefawl.qubes.vec.AABBFloat) -> do
    73:73:int getRenderShadow() -> try
    79:79:int getLODPass() -> if
nidefawl.qubes.block.BlockQuarterBlock -> iJJiJilliJ1LjI:
    short[] readOnly -> do
    36:40:short[] getSafeRead(nidefawl.qubes.world.IBlockWorld,int,int,int) -> do
    45:49:nidefawl.qubes.chunk.blockdata.BlockDataQuarterBlock getSafeCast(nidefawl.qubes.world.IBlockWorld,int,int,int) -> do
    54:60:void getQuarters(nidefawl.qubes.world.IBlockWorld,int,int,int,int[]) -> do
    63:69:boolean isOccludingBlock(nidefawl.qubes.world.IBlockWorld,int,int,int) -> if
    73:98:int getBBs(nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.AABBFloat[]) -> do
    102:106:int setSelectionBB(nidefawl.qubes.world.World,nidefawl.qubes.util.RayTrace$RayTraceIntersection,nidefawl.qubes.vec.BlockPos,nidefawl.qubes.vec.AABBFloat) -> do
    111:128:boolean raytrace(nidefawl.qubes.util.RayTrace,nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f) -> do
    132:138:boolean isNormalBlock(nidefawl.qubes.world.IBlockWorld,int,int,int) -> do
    144:197:int getItems(java.util.List) -> do
nidefawl.qubes.block.BlockSand -> IjL1jI1LL1jIIj:
nidefawl.qubes.block.BlockSlab -> lllliJL1IjiJL1L1:
    nidefawl.qubes.block.Block baseBlock -> z2SS2zsZSSZs
    int overrideTextureIdx -> if
    27:27:nidefawl.qubes.block.Block getBaseBlock() -> do
    42:42:boolean isOccluding() -> for
    48:48:int getLightValue() -> new
    53:53:int getFaceColor(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int) -> do
    58:58:float getAlpha() -> do
    63:63:boolean applyAO() -> if
    68:68:boolean isTransparent() -> do
    73:82:int getBBs(nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.AABBFloat[]) -> do
    87:87:java.lang.String getName() -> do
    92:99:nidefawl.qubes.vec.AABBFloat getRenderBlockBounds(nidefawl.qubes.world.IBlockWorld,int,int,int,nidefawl.qubes.vec.AABBFloat) -> do
    136:171:boolean isFaceVisible(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int,nidefawl.qubes.block.Block,nidefawl.qubes.vec.AABBFloat) -> do
    175:176:boolean isNormalBlock(nidefawl.qubes.world.IBlockWorld,int,int,int) -> do
    183:183:boolean isSlab() -> int
    188:194:int getTexture(int,int,int) -> do
    197:197:boolean isFullBB() -> byte
    200:200:boolean isOccludingBlock(nidefawl.qubes.world.IBlockWorld,int,int,int) -> if
    205:215:void getQuarters(nidefawl.qubes.world.IBlockWorld,int,int,int,int[]) -> do
    219:220:int getItems(java.util.List) -> do
nidefawl.qubes.block.BlockSliced -> L1lliJIjjI1LiJJi:
    13:13:int getRenderType() -> int
nidefawl.qubes.block.BlockStairs -> iJiJ1LL1IjIjiJll:
    nidefawl.qubes.block.Block baseBlock -> z2SS2zsZSSZs
    int overrideTextureIdx -> if
    int[] offsetXZ -> do
    int[] offsetXZ2 -> if
    27:27:nidefawl.qubes.block.Block getBaseBlock() -> do
    31:31:boolean isUpsideDown(int) -> for
    45:45:boolean isOccluding() -> for
    51:51:int getLightValue() -> new
    56:56:boolean applyAO() -> if
    61:61:boolean isTransparent() -> do
    66:85:int getBBs(nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.AABBFloat[]) -> do
    89:108:boolean raytrace(nidefawl.qubes.util.RayTrace,nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f) -> do
    113:113:java.lang.String getName() -> do
    118:118:int getFaceColor(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int) -> do
    123:123:float getAlpha() -> do
    128:135:nidefawl.qubes.vec.AABBFloat getRenderBlockBounds(nidefawl.qubes.world.IBlockWorld,int,int,int,nidefawl.qubes.vec.AABBFloat) -> do
    165:186:boolean isFaceVisible(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int,nidefawl.qubes.block.Block,nidefawl.qubes.vec.AABBFloat) -> do
    192:192:boolean isNormalBlock(nidefawl.qubes.world.IBlockWorld,int,int,int) -> do
    198:198:boolean isStairs() -> new
    203:209:int getTexture(int,int,int) -> do
    212:212:boolean isFullBB() -> byte
    228:261:int stairTypeAt(nidefawl.qubes.world.IBlockWorld,int,int,int) -> do
    265:322:void getQuarters(nidefawl.qubes.world.IBlockWorld,int,int,int,int[]) -> do
    330:389:void setStairBB(nidefawl.qubes.vec.AABBFloat,int,int,int,int) -> do
    391:391:boolean isOccludingBlock(nidefawl.qubes.world.IBlockWorld,int,int,int) -> if
nidefawl.qubes.block.BlockStone -> jIL1IjjIL1llIj:
    15:15:float getRoughness(int) -> do
nidefawl.qubes.block.BlockStoneModelled -> iJ1LL1L1llL1lliJ:
    nidefawl.qubes.block.Block baseBlock -> z2SS2zsZSSZs
    int overrideTextureIdx -> if
    22:28:int getTexture(int,int,int) -> do
nidefawl.qubes.block.BlockTextureMode -> Ij1LL1IjIjL1IjjI:
    nidefawl.qubes.block.BlockTextureMode DEFAULT -> do
    nidefawl.qubes.block.BlockTextureMode TOP -> if
    nidefawl.qubes.block.BlockTextureMode TOP_BOTTOM -> for
    nidefawl.qubes.block.BlockTextureMode SUBTYPED_TEX_PER_TYPE -> int
    nidefawl.qubes.block.BlockTextureMode[] $VALUES -> do
    10:10:nidefawl.qubes.block.BlockTextureMode[] values() -> values
    10:10:nidefawl.qubes.block.BlockTextureMode valueOf(java.lang.String) -> valueOf
nidefawl.qubes.block.BlockVine -> lllljIL1L1iJ1LJi:
    33:33:int getRenderType() -> int
    38:38:int getLODPass() -> if
    93:93:boolean isOccluding() -> for
    98:98:boolean isFullBB() -> byte
    103:103:boolean isFaceVisible(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int,nidefawl.qubes.block.Block,nidefawl.qubes.vec.AABBFloat) -> do
    108:108:int getRenderShadow() -> try
    113:113:boolean isReplaceable() -> try
    118:124:boolean raytrace(nidefawl.qubes.util.RayTrace,nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f) -> do
    129:129:int getBBs(nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.AABBFloat[]) -> do
    134:134:int setSelectionBB(nidefawl.qubes.world.World,nidefawl.qubes.util.RayTrace$RayTraceIntersection,nidefawl.qubes.vec.BlockPos,nidefawl.qubes.vec.AABBFloat) -> do
    138:170:int setSelectionBB(nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.AABBFloat) -> do
    175:175:int getFaceColor(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int) -> do
    179:179:int getInvRenderData(nidefawl.qubes.item.BlockStack) -> do
    185:185:float getInvRenderRotation() -> if
nidefawl.qubes.block.BlockWall -> jIJiL1jIjIiJiJJi:
    nidefawl.qubes.block.Block baseBlock -> z2SS2zsZSSZs
    int overrideTextureIdx -> if
    23:23:nidefawl.qubes.block.Block getBaseBlock() -> do
    27:40:int setWallConnections(nidefawl.qubes.world.IBlockWorld,int,int,int,boolean[]) -> do
    44:50:boolean canConnectTo(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int) -> do
    55:55:boolean canBlockConnect(nidefawl.qubes.world.IBlockWorld,int,int,int,nidefawl.qubes.block.BlockConnect,int,int) -> do
    73:73:int getLightValue() -> new
    78:78:int getFaceColor(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int) -> do
    83:83:float getAlpha() -> do
    87:93:int getTexture(int,int,int) -> do
    97:97:int getRenderType() -> int
    103:103:boolean isOccluding() -> for
    108:108:boolean isFullBB() -> byte
    113:113:boolean isFaceVisible(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int,nidefawl.qubes.block.Block,nidefawl.qubes.vec.AABBFloat) -> do
    118:118:int getRenderShadow() -> try
    123:135:nidefawl.qubes.vec.AABBFloat getRenderBlockBounds(nidefawl.qubes.world.IBlockWorld,int,int,int,nidefawl.qubes.vec.AABBFloat) -> do
    140:192:int getBBs(nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.AABBFloat[]) -> do
    197:198:int getItems(java.util.List) -> do
nidefawl.qubes.block.BlockWater -> jIiJL1Ij1LL1L1Ji:
    13:13:int getRenderPass() -> for
    18:18:boolean applyAO() -> if
    23:23:float getAlpha() -> do
    28:28:boolean isOccluding() -> for
    33:33:boolean isReplaceable() -> try
    38:38:int getBBs(nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.AABBFloat[]) -> do
    43:43:int getRenderShadow() -> try
    50:50:float getRoughness(int) -> do
nidefawl.qubes.block.BlockWaterLily -> L1IjIjlliJiJIjL1:
    21:21:int getRenderType() -> int
nidefawl.qubes.block.BlockWood -> iJlliJJiL1iJJi:
    int index -> if
    12:12:int getIndex() -> byte
nidefawl.qubes.block.IDMappingBlocks -> JiL1lliJ1LL1jIll:
    boolean CHANGED -> do
    boolean LOADED -> if
    int HIGHEST_BLOCK_ID -> do
    com.google.common.collect.ImmutableBiMap map -> do
    java.lang.Object sync -> do
    33:72:void load() -> do
    74:115:void save() -> if
    117:149:int get(java.lang.String) -> do
nidefawl.qubes.chat.client.ChatLine -> jIiJJiL11L1LlliJ:
    java.lang.String rawMessage -> do
    long receiveTime -> do
    25:25:java.lang.String getLine() -> do
    31:31:long getTime() -> do
nidefawl.qubes.chat.client.ChatManager -> iJiJIjllIjll1LL1:
    java.util.ArrayList line -> do
    java.util.ArrayList hist -> if
    boolean saveHistory -> do
    nidefawl.qubes.chat.client.ChatManager instance -> do
    37:37:nidefawl.qubes.chat.client.ChatManager getInstance() -> do
    45:46:void receiveMessage(java.lang.String,java.lang.String) -> do
    52:52:java.util.List getLines() -> do
    59:65:int getNumNewLines() -> do
    69:69:void syncChannels(java.util.ArrayList) -> do
    75:87:void loadInputHistory() -> do
    93:106:void saveInputHistory() -> if
    109:111:void addHistory(java.lang.String) -> do
    115:115:int getHistorySize() -> if
    120:120:java.lang.String getHistory(int) -> do
    125:125:int indexOfHistory(java.lang.String) -> do
    130:132:void removeHistory(int) -> do
    137:139:void addHistory(int,java.lang.String) -> do
nidefawl.qubes.chunk.Chunk -> IjjIiJ1LllIjiJ:
    nidefawl.qubes.world.World world -> do
    int x -> do
    int z -> if
    int worldHeightBits -> for
    int height -> int
    short[] blocks -> do
    nidefawl.qubes.chunk.ChunkDataSliced2 blockMetadata -> do
    nidefawl.qubes.chunk.blockdata.BlockDataSliced blockData -> do
    byte[] blockLight -> do
    int[] heightMap -> do
    byte[] biomes -> if
    byte[] waterMask -> for
    long loadTime -> do
    boolean updateHeightMap -> do
    boolean needsSave -> if
    boolean isEmpty -> for
    boolean isLit -> int
    boolean isValid -> new
    boolean isUnloading -> try
    boolean isPopulated -> byte
    76:76:int getWater(int,int,int) -> do
    80:80:int getTypeId(int,int,int) -> if
    93:93:nidefawl.qubes.chunk.blockdata.BlockData getBlockData(int,int,int) -> do
    96:96:int getData(int,int,int) -> for
    110:110:boolean setFullData(int,int,int,short) -> do
    117:117:boolean setBlockData(int,int,int,nidefawl.qubes.chunk.blockdata.BlockData) -> do
    172:185:boolean setType(int,int,int,int) -> do
    189:191:void flagModified() -> do
    220:220:short[] getBlocks() -> do
    224:224:byte[] getBlockLight() -> do
    244:252:int getLight(int,int,int) -> int
    256:274:boolean setLight(int,int,int,int,int) -> do
    285:314:void updateHeightMap(int,int) -> do
    405:425:boolean setLights(byte[],nidefawl.qubes.vec.BlockBoundingBox) -> do
    433:433:java.lang.String toString() -> toString
nidefawl.qubes.chunk.ChunkData -> llJijI1LIjiJIjiJ:
    boolean setByte(int,int,int,boolean,int) -> do
    21:21:boolean setLower(int,int,int,int) -> do
nidefawl.qubes.chunk.ChunkDataSliced2 -> iJllL1L1JiIjjIjI:
    short[][] array -> do
    28:31:short get(int,int,int) -> do
    35:42:boolean set(int,int,int,short) -> do
    45:58:boolean setByte(int,int,int,boolean,int) -> do
    62:69:short[] getArray(int,boolean) -> do
nidefawl.qubes.chunk.ChunkManager -> ll1LL1jIllIjIjJi:
    nidefawl.qubes.world.World world -> do
    nidefawl.qubes.chunk.ChunkTable table -> do
    nidefawl.qubes.chunk.ChunkTable makeChunkTable() -> do
    27:27:nidefawl.qubes.chunk.Chunk get(int,int) -> do
    31:31:int getChunksLoaded() -> do
nidefawl.qubes.chunk.ChunkTable -> L1jIllJiL1iJ1LiJ:
    nidefawl.qubes.chunk.Chunk[][] values -> do
    int size -> do
    int halfSize -> if
    int approxLoaded -> byte
    int mswLow -> for
    int mswHigh -> int
    int lswLow -> new
    int lswHigh -> try
    36:50:boolean put(int,int,nidefawl.qubes.chunk.Chunk) -> do
    55:59:void updateBounds(int,int) -> do
    66:71:nidefawl.qubes.chunk.Chunk get(int,int) -> do
    76:83:nidefawl.qubes.chunk.Chunk remove(int,int) -> if
    98:111:int size() -> do
    234:234:java.util.Iterator iterator() -> iterator
nidefawl.qubes.chunk.ChunkTable$ChunkRegionTableIterator -> jIjIIjJiiJjIL11L:
    nidefawl.qubes.chunk.Chunk value -> do
    int msw -> do
    int lsw -> if
    nidefawl.qubes.chunk.ChunkTable table -> if
    nidefawl.qubes.chunk.ChunkTable this$0 -> do
    190:204:boolean hasNext() -> hasNext
    209:211:nidefawl.qubes.chunk.Chunk next() -> do
    216:216:void remove() -> remove
    177:177:java.lang.Object next() -> next
nidefawl.qubes.chunk.blockdata.BlockData -> JiL1jIJillll1LjI:
    20:26:boolean isEqual(nidefawl.qubes.chunk.blockdata.BlockData,nidefawl.qubes.chunk.blockdata.BlockData) -> do
    33:33:boolean compareTo(nidefawl.qubes.chunk.blockdata.BlockData) -> do
    boolean compareData(nidefawl.qubes.chunk.blockdata.BlockData) -> if
    int getTypeId() -> do
    int getLength() -> if
    42:46:nidefawl.qubes.chunk.blockdata.BlockData fromType(int) -> do
    int writeData(byte[],int) -> do
    int readData(byte[],int) -> if
    63:66:int writeDataToStream(java.io.DataOutput) -> do
    74:77:void readDataFromStream(java.io.DataInput) -> do
    nidefawl.qubes.chunk.blockdata.BlockData copy() -> do
nidefawl.qubes.chunk.blockdata.BlockDataQuarterBlock -> JiiJL1iJjIllJill:
    short[] blockIDs -> do
    byte[] blockMeta -> do
    21:28:boolean compareData(nidefawl.qubes.chunk.blockdata.BlockData) -> if
    33:33:int getTypeId() -> do
    38:38:int getLength() -> if
    43:48:int writeData(byte[],int) -> do
    53:57:int readData(byte[],int) -> if
    61:64:void fillIntArr(int[]) -> do
    67:72:void setTypeAndData(int,int,int,int,int) -> do
    86:87:int getType(int,int,int) -> do
    90:91:int getData(int,int,int) -> if
    97:100:int idx(int,int,int) -> for
    105:110:nidefawl.qubes.chunk.blockdata.BlockData copy() -> do
nidefawl.qubes.chunk.blockdata.BlockDataSliced -> L1iJIjIjIjJiJiJi:
    nidefawl.qubes.chunk.blockdata.BlockData[][] array -> do
    30:33:nidefawl.qubes.chunk.blockdata.BlockData get(int,int,int) -> do
    37:44:boolean set(int,int,int,nidefawl.qubes.chunk.blockdata.BlockData) -> do
    48:55:nidefawl.qubes.chunk.blockdata.BlockData[] getArray(int,boolean) -> do
nidefawl.qubes.chunk.client.ChunkManagerClient -> L1IjIjll1LJiIjJi:
    15:15:nidefawl.qubes.chunk.ChunkTable makeChunkTable() -> do
    19:25:nidefawl.qubes.chunk.Chunk getOrMake(int,int) -> if
    33:37:void remove(int,int) -> do
nidefawl.qubes.config.AbstractYMLConfig -> iJJiJi1L1LjIiJjI:
    java.util.Map map -> do
    25:42:void write(java.io.File) -> do
    45:71:void save(java.io.OutputStream) -> do
    74:86:void load(java.io.File) -> if
    89:96:void load(java.io.InputStream) -> do
    99:102:java.lang.String getString(java.lang.String,java.lang.String) -> do
    113:116:int getInt(java.lang.String,int) -> do
    127:130:float getFloat(java.lang.String,float) -> do
    141:142:void setString(java.lang.String,java.lang.String) -> do
    152:153:void setInt(java.lang.String,int) -> do
    157:158:void setFloat(java.lang.String,float) -> do
    void setDefaults() -> do
    void load() -> if
    void save() -> for
nidefawl.qubes.config.ClientSettings -> JiL1Ij1LjIllJi1L:
    int chunkLoadDistance -> do
    int shadowDrawMode -> if
    int ssr -> for
    int aa -> int
    int smaaQuality -> new
    float thirdpersonDistance -> do
    boolean dirty -> do
    int saveTicks -> byte
    int ao -> try
    java.lang.String lastserver -> do
    28:35:void setDefaults() -> do
    39:47:void load() -> if
    51:59:void save() -> for
    66:72:boolean lazySave() -> do
nidefawl.qubes.config.InvalidConfigException -> L1JiL1jI1LiJL1Ji:
nidefawl.qubes.config.WorkingEnv -> L1L1lliJiJL1llIj:
    java.io.File workingDir -> do
    java.io.File assetDir -> if
    java.io.File packsDir -> for
    java.io.File worlds -> int
    java.io.File config -> new
    java.io.File playerdata -> try
    19:34:void init(java.lang.String) -> do
    37:37:java.io.File getAssetFolder() -> do
    43:43:java.io.File getConfigFolder() -> if
nidefawl.qubes.crafting.CraftingCategory -> jIJiL1llllIjjIIj:
    nidefawl.qubes.crafting.CraftingCategory[] categories -> do
    nidefawl.qubes.crafting.CraftingCategory tools -> do
    nidefawl.qubes.crafting.CraftingCategory wood -> if
    nidefawl.qubes.crafting.CraftingCategory stone -> for
    nidefawl.qubes.crafting.CraftingCategory blocks -> int
    java.lang.String name -> do
    int id -> do
    java.util.ArrayList recipes -> do
    java.util.HashMap map -> do
    31:31:int getId() -> do
    38:46:void addRecipe(java.lang.String,nidefawl.qubes.crafting.recipes.CraftingRecipe) -> do
nidefawl.qubes.crafting.CraftingManagerBase -> JiJillllJiL1jIiJ:
    int id -> do
    int amount -> if
    long startTime -> do
    long endTime -> if
    boolean finished -> do
    nidefawl.qubes.crafting.recipes.CraftingRecipe recipe -> do
    41:54:int calcMaxAmount(nidefawl.qubes.crafting.recipes.CraftingRecipe,nidefawl.qubes.inventory.slots.SlotsInventoryBase) -> do
    57:57:int getAmount() -> do
    60:60:int getId() -> if
    63:63:long getStartTime() -> do
    66:66:long getEndTime() -> if
    69:69:nidefawl.qubes.crafting.recipes.CraftingRecipe getRecipe() -> do
    72:72:boolean isRunning() -> do
    75:75:boolean isFinished() -> if
nidefawl.qubes.crafting.CraftingManagerClient -> iJ1LJiIjIjiJjIIj:
    nidefawl.qubes.gui.crafting.GuiCraftingProgressEntry guiElement -> do
    nidefawl.qubes.entity.PlayerSelf player -> do
    long recvTime -> for
    int state -> for
    23:23:nidefawl.qubes.gui.crafting.GuiCraftingProgressEntry getGuiElement() -> do
    32:46:void handleRequest(int,nidefawl.qubes.network.packet.PacketSCraftingProgress) -> do
nidefawl.qubes.crafting.recipes.CraftingRecipe -> IjlljIJiIj1Lllll:
    int NEXT_ID -> do
    nidefawl.qubes.item.BaseStack[] in -> do
    nidefawl.qubes.item.BaseStack[] out -> if
    int id -> if
    nidefawl.qubes.item.BaseStack preview -> do
    nidefawl.qubes.crafting.CraftingCategory category -> do
    java.lang.String subCat -> do
    27:27:int getId() -> do
    30:30:nidefawl.qubes.item.BaseStack[] getIn() -> do
    33:33:nidefawl.qubes.item.BaseStack[] getOut() -> if
    36:36:nidefawl.qubes.item.BaseStack getPreview() -> do
    61:61:nidefawl.qubes.crafting.CraftingCategory getCategory() -> do
    64:70:void setInput(nidefawl.qubes.item.BaseStack[]) -> do
    72:81:void setOutput(nidefawl.qubes.item.BaseStack[]) -> if
    83:85:void setCategory(nidefawl.qubes.crafting.CraftingCategory,java.lang.String) -> do
nidefawl.qubes.crafting.recipes.CraftingRecipes -> iJ1LJiL1lliJjIL1:
    java.util.ArrayList all -> do
    nidefawl.qubes.crafting.recipes.CraftingRecipe[] recipesArray -> do
    22:23:void add(nidefawl.qubes.crafting.recipes.CraftingRecipe) -> do
    27:117:void init() -> do
    120:120:nidefawl.qubes.crafting.recipes.CraftingRecipe getRecipeId(int) -> do
nidefawl.qubes.entity.Entity -> L1llJijI1LL1lljI:
    int NEXT_ENT_ID -> do
    int id -> if
    nidefawl.qubes.world.World world -> do
    nidefawl.qubes.vec.Vec3D pos -> do
    nidefawl.qubes.vec.Vec3D lastPos -> if
    nidefawl.qubes.vec.Vec3D mot -> for
    nidefawl.qubes.vec.Vec3D lastMot -> int
    float yaw -> do
    float lastYaw -> if
    float yawBodyOffset -> for
    float lastYawBodyOffset -> int
    float pitch -> new
    float lastPitch -> try
    boolean noclip -> do
    boolean hitGround -> if
    nidefawl.qubes.vec.AABB aabb -> do
    nidefawl.qubes.vec.AABB aabb2 -> if
    nidefawl.qubes.vec.AABB aabb3 -> for
    nidefawl.qubes.vec.AABB aabb4 -> int
    nidefawl.qubes.vec.AABB dbg -> new
    nidefawl.qubes.util.CollisionQuery coll -> do
    nidefawl.qubes.vec.Vector3f renderPos -> do
    nidefawl.qubes.vec.Vector3f renderRot -> if
    nidefawl.qubes.vec.Vec3D remotePos -> new
    nidefawl.qubes.vec.Vector3f remoteRotation -> for
    int rotticks -> for
    int posticks -> int
    double width -> do
    double height -> if
    double length -> for
    float timeJump -> byte
    float timePunch -> case
    boolean flagRemove -> for
    java.util.Random random -> do
    nidefawl.qubes.entity.EntityProperties properties -> do
    nidefawl.qubes.item.BaseStack[] equipment -> do
    65:65:int hashCode() -> hashCode
    70:70:boolean equals(java.lang.Object) -> equals
    74:77:void tickUpdate() -> do
    79:79:boolean doesFall() -> do
    82:82:boolean doesFly() -> if
    85:96:void postStep() -> if
    98:106:void preStep() -> for
    108:218:void step() -> int
    221:221:float getGravity() -> do
    225:226:void move(nidefawl.qubes.vec.Vec3D) -> do
    232:237:void move(double,double,double) -> do
    243:246:void setYawPitch(float,float) -> do
    262:263:void readClientData(nidefawl.qubes.nbt.Tag) -> do
    265:269:void readProperties(nidefawl.qubes.nbt.Tag) -> if
    nidefawl.qubes.entity.EntityType getEntityType() -> do
    295:299:nidefawl.qubes.vec.Vector3f getRenderPos(float) -> do
    308:321:nidefawl.qubes.vec.Vector3f getRenderRot(float) -> if
    328:330:void setRemotePos(nidefawl.qubes.vec.Vec3D) -> if
    338:364:void setRemoteRotation(float,float,float) -> do
    371:371:java.util.Random getRandom() -> do
    375:375:float getPathWeight(int,int,int) -> do
    378:378:nidefawl.qubes.vec.AABB getAabb() -> do
    382:386:void adjustRenderProps(nidefawl.qubes.models.qmodel.QModelProperties,float) -> do
    389:389:nidefawl.qubes.models.EntityModel getEntityModel() -> do
    392:392:nidefawl.qubes.entity.EntityProperties getEntityProperties() -> do
    395:398:nidefawl.qubes.item.BaseStack getActiveItem(int) -> do
    402:404:void setEquipment(nidefawl.qubes.item.BaseStack[]) -> do
nidefawl.qubes.entity.EntityAI -> iJIjllIj1LiJIjiJ:
    nidefawl.qubes.entity.ai.TaskManager taskManager -> do
    nidefawl.qubes.entity.ai.AINav nav -> do
    nidefawl.qubes.entity.ai.AIMove move -> do
    float moveForward -> char
    boolean jump -> int
    float landMovementFactor -> else
    float airMovementFactor -> goto
    22:57:void tickUpdate() -> do
    61:71:void preStep() -> for
    74:86:void setMotion(float,float,float) -> if
    90:90:nidefawl.qubes.entity.ai.AINav getNav() -> do
    95:95:nidefawl.qubes.entity.ai.AIMove getMove() -> do
    101:102:void setMoveForward(float) -> do
nidefawl.qubes.entity.EntityAnimal -> L1L1jI1LlliJiJjI:
nidefawl.qubes.entity.EntityArcher -> JijI1LJiL1Ij1LIj:
    19:19:nidefawl.qubes.entity.EntityType getEntityType() -> do
    24:24:nidefawl.qubes.models.EntityModel getEntityModel() -> do
nidefawl.qubes.entity.EntityCat -> JiIjJiiJ1LiJiJIj:
    14:14:nidefawl.qubes.entity.EntityType getEntityType() -> do
    19:19:nidefawl.qubes.models.EntityModel getEntityModel() -> do
nidefawl.qubes.entity.EntityChicken -> iJ1LIj1LL11Lll:
    15:15:nidefawl.qubes.entity.EntityType getEntityType() -> do
    20:20:nidefawl.qubes.models.EntityModel getEntityModel() -> do
nidefawl.qubes.entity.EntityDemon -> JiIjjIIjjI1LJi1L:
    17:17:nidefawl.qubes.entity.EntityType getEntityType() -> do
    22:22:nidefawl.qubes.models.EntityModel getEntityModel() -> do
nidefawl.qubes.entity.EntityDog -> jIiJjIJiL1jIJi:
    15:15:nidefawl.qubes.entity.EntityType getEntityType() -> do
    20:20:nidefawl.qubes.models.EntityModel getEntityModel() -> do
nidefawl.qubes.entity.EntityDuck -> JiIjllL1JiL1JiiJ:
    15:15:nidefawl.qubes.entity.EntityType getEntityType() -> do
    20:20:nidefawl.qubes.models.EntityModel getEntityModel() -> do
nidefawl.qubes.entity.EntityGoat -> JijIllL1JilliJll:
    15:15:nidefawl.qubes.entity.EntityType getEntityType() -> do
    20:20:nidefawl.qubes.models.EntityModel getEntityModel() -> do
nidefawl.qubes.entity.EntityMob -> IjL1L1JiiJiJL11L:
nidefawl.qubes.entity.EntityPig -> ll1LjIL1JiiJll1L:
    15:15:nidefawl.qubes.entity.EntityType getEntityType() -> do
    20:20:nidefawl.qubes.models.EntityModel getEntityModel() -> do
nidefawl.qubes.entity.EntityPony -> llJilljIiJllJiIj:
    15:15:nidefawl.qubes.entity.EntityType getEntityType() -> do
    20:20:nidefawl.qubes.models.EntityModel getEntityModel() -> do
nidefawl.qubes.entity.EntityProperties -> L1IjL1IjlliJIj1L:
    int[] properties -> do
    11:11:int getOption(int,int) -> do
    26:35:void load(nidefawl.qubes.nbt.Tag$Compound) -> do
    38:42:void setOption(int,int) -> do
nidefawl.qubes.entity.EntityPuppy -> lliJll1LjIL1jIiJ:
    15:15:nidefawl.qubes.entity.EntityType getEntityType() -> do
    20:20:nidefawl.qubes.models.EntityModel getEntityModel() -> do
nidefawl.qubes.entity.EntitySheep -> L1iJL11LJiiJlljI:
    15:15:nidefawl.qubes.entity.EntityType getEntityType() -> do
    20:20:nidefawl.qubes.models.EntityModel getEntityModel() -> do
nidefawl.qubes.entity.EntitySkeleton -> jIjIL1llL1jIll1L:
    18:18:nidefawl.qubes.entity.EntityType getEntityType() -> do
    23:23:nidefawl.qubes.models.EntityModel getEntityModel() -> do
nidefawl.qubes.entity.EntityType -> llllllJill1L1LjI:
    nidefawl.qubes.entity.EntityType[] mapping -> do
    nidefawl.qubes.entity.EntityType PLAYER -> do
    nidefawl.qubes.entity.EntityType CAT -> if
    nidefawl.qubes.entity.EntityType CHICKEN -> for
    nidefawl.qubes.entity.EntityType DOG -> int
    nidefawl.qubes.entity.EntityType DUCK -> new
    nidefawl.qubes.entity.EntityType GOAT -> try
    nidefawl.qubes.entity.EntityType PIG -> byte
    nidefawl.qubes.entity.EntityType PONY -> case
    nidefawl.qubes.entity.EntityType PUPPY -> char
    nidefawl.qubes.entity.EntityType SHEEP -> else
    nidefawl.qubes.entity.EntityType SKELETON -> goto
    nidefawl.qubes.entity.EntityType ZOMBIE -> long
    nidefawl.qubes.entity.EntityType ARCHER -> this
    nidefawl.qubes.entity.EntityType WARRIOR -> void
    nidefawl.qubes.entity.EntityType DEMON -> break
    int id -> do
    java.lang.Class clazz -> do
    double width -> do
    double length -> if
    double height -> for
    32:51:void load() -> do
    72:76:nidefawl.qubes.entity.Entity newById(int) -> do
    81:83:nidefawl.qubes.entity.Entity newInstance() -> do
    88:88:double getWidth() -> do
    91:91:double getHeight() -> if
    94:94:double getLength() -> for
nidefawl.qubes.entity.EntityWarrior -> iJjIJilljIjIJi1L:
    19:19:nidefawl.qubes.entity.EntityType getEntityType() -> do
    24:24:nidefawl.qubes.models.EntityModel getEntityModel() -> do
nidefawl.qubes.entity.EntityZombie -> JiiJiJiJL1IjL1ll:
    18:18:nidefawl.qubes.entity.EntityType getEntityType() -> do
    23:23:nidefawl.qubes.models.EntityModel getEntityModel() -> do
nidefawl.qubes.entity.Player -> L1lljIjIiJIjjIIj:
    java.lang.String name -> do
    int punchTicks -> new
    nidefawl.qubes.inventory.PlayerInventory inventory -> do
    nidefawl.qubes.inventory.slots.SlotsInventory slotsInventory -> do
    nidefawl.qubes.inventory.slots.SlotsCrafting[] slotsCrafting -> do
    nidefawl.qubes.inventory.PlayerInventoryCrafting[] inventoryCraft -> do
    36:36:nidefawl.qubes.entity.EntityType getEntityType() -> do
    40:42:void tickUpdate() -> do
    44:47:void updateTicks() -> new
    51:51:nidefawl.qubes.inventory.PlayerInventory getInventory() -> do
    55:67:nidefawl.qubes.inventory.BaseInventory getInv(int) -> do
    71:83:nidefawl.qubes.inventory.slots.Slots getSlots(int) -> do
    87:94:nidefawl.qubes.models.EntityModel getEntityModel() -> do
nidefawl.qubes.entity.PlayerRemote -> iJIjiJll1LjIllL1:
    27:34:void readClientData(nidefawl.qubes.nbt.Tag) -> do
    37:63:void preStep() -> for
    66:66:void step() -> int
    69:69:void postStep() -> if
    73:74:void tickUpdate() -> do
nidefawl.qubes.entity.PlayerSelf -> iJjIJillJill1LjI:
    float forward -> else
    float strafe -> goto
    float maxSpeed -> long
    boolean fly -> int
    boolean jumped -> new
    float sneak -> this
    float jump -> void
    float eyeHeight -> char
    nidefawl.qubes.PlayerProfile profile -> do
    nidefawl.qubes.network.client.ClientHandler clientHandler -> do
    nidefawl.qubes.crafting.CraftingManagerClient[] crafting -> do
    51:51:nidefawl.qubes.crafting.CraftingManagerClient getCrafting(int) -> do
    55:91:void updateInputDirect(nidefawl.qubes.input.InputController) -> do
    95:191:void tickUpdate() -> do
    193:193:boolean doesFly() -> if
    198:198:float getGravity() -> do
    202:203:void toggleFly() -> try
    206:207:void setFly(boolean) -> do
    211:211:nidefawl.qubes.entity.EntityType getEntityType() -> do
    219:223:void clicked(int,boolean) -> do
    227:229:nidefawl.qubes.item.BaseStack getActiveItem(int) -> do
nidefawl.qubes.entity.ai.AIMove -> jIiJ1LjIJijIjI:
    nidefawl.qubes.entity.EntityAI entity -> do
    double x -> do
    double y -> if
    double z -> for
    float speed -> do
    boolean needsUpdate -> do
    18:23:void moveTowards(double,double,double,float) -> do
    25:44:void update() -> do
    47:49:float clampAngle(float,float,float) -> do
nidefawl.qubes.entity.ai.AINav -> JiJiIj1LL1IjJi:
    nidefawl.qubes.path.PathFinder finder -> do
    nidefawl.qubes.vec.Vec3D goalPos -> do
    nidefawl.qubes.vec.Vec3D tmp -> if
    nidefawl.qubes.path.Path path -> do
    int ticks -> do
    float speed -> do
    nidefawl.qubes.entity.EntityAI entity -> do
    26:32:nidefawl.qubes.path.Path tryMoveTo(int,int,int,float) -> do
    35:52:nidefawl.qubes.path.Path setPath(nidefawl.qubes.path.Path) -> do
    55:82:void update() -> do
    84:84:boolean hasPath() -> do
    87:106:void updatePath() -> if
    108:108:boolean canUpdatePath() -> if
    111:111:nidefawl.qubes.path.Path getPath() -> do
nidefawl.qubes.entity.ai.AITask -> iJ1LIjjIjIIjjIIj:
    nidefawl.qubes.entity.EntityAI entity -> do
    14:14:boolean shouldExecute() -> do
    18:18:boolean keepExecuting() -> if
    22:22:void stop() -> do
    25:25:void start() -> if
    28:28:void update() -> for
nidefawl.qubes.entity.ai.AITaskWander -> jIL1iJjI1LL1jI1L:
    int ticks -> do
    nidefawl.qubes.path.RandomPosGen gen -> do
    nidefawl.qubes.vec.BlockPos pos -> do
    nidefawl.qubes.path.Path p -> do
    19:25:boolean keepExecuting() -> if
    29:34:boolean shouldExecute() -> do
    38:39:void update() -> for
    42:44:void start() -> if
    47:49:void stop() -> do
nidefawl.qubes.entity.ai.TaskEntry -> jI1L1L1LiJjIIjJi:
    nidefawl.qubes.entity.ai.AITask task -> do
    int priority -> do
    int mask -> if
    boolean running -> do
    boolean enabled -> if
    16:17:void setPriority(int) -> do
    23:23:int getMask() -> do
    29:30:void setRunning(boolean) -> do
    32:32:int getPriority() -> if
    35:35:boolean isEnabled() -> do
    38:39:void setEnabled(boolean) -> if
    42:42:boolean isExecuting() -> if
    46:46:boolean shouldExecute() -> for
    50:50:boolean keepExecuting() -> int
    54:56:void stop() -> do
    59:61:void start() -> if
    64:65:void update() -> for
nidefawl.qubes.entity.ai.TaskManager -> iJllL11LL1L1lliJ:
    nidefawl.qubes.entity.EntityAI entity -> do
    java.util.List tasks -> do
    19:22:nidefawl.qubes.entity.ai.TaskEntry add(nidefawl.qubes.entity.ai.AITask) -> do
    26:43:void update() -> do
    46:58:boolean canSchedule(nidefawl.qubes.entity.ai.TaskEntry,java.util.List) -> do
nidefawl.qubes.font.FontRenderer -> JiIjJiJiIjjIL11L:
    java.util.HashMap fonts -> do
    nidefawl.qubes.font.TrueTypeFont trueTypeFont -> do
    float size -> for
    int style -> if
    int font -> for
    int maxWidth -> do
    float drawedHeight -> do
    float shadowOffset -> if
    java.lang.String[] fontNames -> do
    18:22:void destroy() -> do
    25:27:void free() -> for
    38:44:nidefawl.qubes.font.FontRenderer get(int,float,int) -> do
    59:59:void init() -> if
    80:89:void setupFont() -> int
    93:93:float drawString(java.lang.String,float,float,int,boolean,float) -> do
    97:115:float drawString(java.lang.String,float,float,int,boolean,float,int) -> do
    123:123:float getStringWidth(java.lang.String) -> do
    131:131:float getCharHeight() -> do
    140:140:float getLineHeight() -> if
    144:144:boolean isValid(char) -> do
    147:147:int centerY(int) -> do
nidefawl.qubes.font.IStringHistory -> lljIL1llIjJiIjiJ:
    void addHistory(java.lang.String) -> do
    int getHistorySize() -> if
    java.lang.String getHistory(int) -> do
    int indexOfHistory(java.lang.String) -> do
    void removeHistory(int) -> do
    void addHistory(int,java.lang.String) -> do
nidefawl.qubes.font.ITextEdit -> iJJill1L1LjI1Lll:
    void submit(nidefawl.qubes.font.TextInput) -> do
    void onEscape(nidefawl.qubes.font.TextInput) -> if
nidefawl.qubes.font.TextInput -> iJJilljIiJIjlliJ:
    nidefawl.qubes.font.TrueTypeFont trueType -> do
    java.lang.String editText -> do
    java.lang.String searchPattern -> if
    boolean mouseDown -> do
    boolean rightMouseDown -> if
    boolean did -> for
    int selStart -> do
    int selEnd -> if
    float shiftPX -> do
    int mpos -> for
    int tick -> int
    java.lang.String prevText -> for
    nidefawl.qubes.font.IStringHistory history -> do
    int commandScroll -> new
    boolean focused -> int
    boolean multiline -> new
    nidefawl.qubes.font.FontRenderer font -> do
    int xPos -> try
    int yPos -> byte
    int width -> case
    int height -> char
    nidefawl.qubes.font.ITextEdit itextedit -> do
    boolean use17 -> try
    67:68:void clearPreview() -> do
    71:95:void calculatePreview() -> if
    99:115:void onTextInput(int) -> do
    117:126:void saveHistory() -> for
    128:132:void resetInput() -> int
    134:310:boolean onKeyPress(int,int,int,int) -> do
    314:316:void onSubmit() -> try
    319:329:void makeCursorVisible() -> new
    332:332:boolean hasSelection() -> do
    337:342:java.lang.String getSelection() -> do
    347:361:java.lang.String replaceSelection(java.lang.String) -> do
    365:383:void insertTextAtCursor(java.lang.String) -> do
    393:589:void drawStringWithCursor(double,double,boolean) -> do
    592:596:void checkCursor() -> byte
    599:600:void onEscape() -> case
    603:603:int getLeft() -> do
    606:606:int getTop() -> if
    609:609:int getWidth() -> for
    612:612:int getHeight() -> int
    615:615:int getRight() -> new
    618:618:int getBottom() -> try
    625:626:void setHistory(nidefawl.qubes.font.IStringHistory) -> do
nidefawl.qubes.font.TrueTypeFont -> IjJiIjiJll1LiJll:
    int[] colorMap -> do
    int texW -> do
    int correctL -> if
    org.lwjgl.stb.STBTTPackedchar$Buffer chardata -> do
    int font_tex -> new
    org.lwjgl.stb.STBTTAlignedQuad q -> do
    org.lwjgl.stb.STBTTAlignedQuad q2 -> if
    java.nio.FloatBuffer xb -> do
    java.nio.FloatBuffer yb -> if
    java.nio.FloatBuffer xb2 -> for
    java.nio.FloatBuffer yb2 -> int
    int rangeStart -> for
    int numChars -> int
    org.lwjgl.stb.STBTTFontinfo info -> do
    float ascent -> do
    float descent -> if
    float lineGap -> for
    float drawedHeight -> int
    float spaceWidth -> new
    float lineOffset -> try
    float size -> byte
    52:55:int getControlChar(int) -> do
    148:153:float getCharWidth(int) -> do
    158:187:float getWidthAtLine(java.lang.String) -> do
    190:214:float getWidth(java.lang.String) -> if
    217:219:void start(float,float) -> do
    221:221:float getXPos() -> do
    227:229:void readQuad(int) -> do
    231:235:void renderQuad(nidefawl.qubes.gl.Tess,float,float) -> do
    238:263:int getCharPositionFromXCoord(java.lang.String,double,float) -> do
    272:272:boolean isValid() -> do
    277:286:void release() -> do
    290:290:float getLineHeight() -> if
    295:295:int getTexture() -> do
    300:300:float getCharHeight() -> for
    306:425:float drawString(nidefawl.qubes.gl.Tess,float,float,java.lang.String,int,boolean,float,int,int,float) -> do
    429:432:int getIndex(int) -> if
    447:447:float getLastDrawHeight() -> int
    453:453:boolean hasCharacter(char) -> do
nidefawl.qubes.gl.AbstractTesselatorState -> llL1iJjIlliJllL1:
    int vertexcount -> do
    boolean useColorPtr -> do
    boolean useTexturePtr -> if
    boolean useNormalPtr -> for
    boolean useUINTPtr -> int
    19:24:void copyTo(nidefawl.qubes.gl.AbstractTesselatorState) -> do
    nidefawl.qubes.gl.GLVBO getVBO() -> do
    29:29:int getIdx(int) -> do
    33:42:int getVSize() -> do
    80:83:void drawVBO(int) -> do
    86:87:void drawQuads() -> do
    90:94:void bindAndDraw(int) -> if
    96:105:int getSetting() -> if
nidefawl.qubes.gl.BufferedMatrix -> jIiJjIll1LlljIiJ:
    nidefawl.qubes.vec.Matrix4f inv -> do
    boolean needInv -> do
    java.nio.FloatBuffer cur -> do
    java.nio.FloatBuffer curInv -> if
    26:34:void update() -> do
    37:38:java.nio.FloatBuffer get() -> do
    42:46:java.nio.FloatBuffer getInv() -> if
    49:52:nidefawl.qubes.vec.Matrix4f getInvMat4() -> do
    56:61:void createInv() -> int
    67:71:void free() -> if
nidefawl.qubes.gl.Camera -> IjJijIJiiJjIIjjI:
    float pitchAngle -> do
    float bearingAngle -> if
    nidefawl.qubes.vec.Vector3f position -> do
    nidefawl.qubes.vec.Vector3f prevposition -> if
    nidefawl.qubes.vec.Matrix4f viewMatrix -> do
    nidefawl.qubes.vec.Matrix4f thirdPersonMat -> if
    nidefawl.qubes.vec.Vector3f thirdPersonOffset -> for
    boolean changed -> do
    32:33:void setPosition(nidefawl.qubes.vec.Vector3f) -> do
    37:41:void setPosition(float,float,float) -> do
    51:67:void setOrientation(float,float,boolean,float) -> do
    73:73:nidefawl.qubes.vec.Vector3f getPosition() -> do
    89:89:nidefawl.qubes.vec.Matrix4f getViewMatrix() -> do
    96:96:nidefawl.qubes.vec.Vector3f getCameraOffset() -> if
nidefawl.qubes.gl.Engine -> IjiJIj1LiJL1IjjI:
    nidefawl.qubes.vec.BlockPos GLOBAL_OFFSET -> do
    nidefawl.qubes.vec.BlockPos LAST_REPOS -> if
    java.util.Map bufferBindingPoints -> do
    int NEXT_BUFFER_BINDING_POINT -> do
    boolean initRenderers -> do
    java.nio.IntBuffer viewportBuf -> do
    java.nio.FloatBuffer position -> do
    java.nio.IntBuffer allocBuffer -> if
    nidefawl.qubes.gl.BufferedMatrix projection -> do
    nidefawl.qubes.gl.BufferedMatrix view -> if
    nidefawl.qubes.gl.BufferedMatrix viewInvYZ -> for
    nidefawl.qubes.gl.BufferedMatrix viewprojection -> int
    nidefawl.qubes.gl.BufferedMatrix modelviewprojection -> new
    nidefawl.qubes.vec.Matrix4f modelviewprojectionInv -> if
    nidefawl.qubes.gl.BufferedMatrix modelview -> try
    nidefawl.qubes.gl.BufferedMatrix normalMatrix -> byte
    nidefawl.qubes.gl.BufferedMatrix orthoP -> case
    nidefawl.qubes.gl.BufferedMatrix orthoMV -> char
    nidefawl.qubes.gl.BufferedMatrix orthoMVP -> else
    nidefawl.qubes.gl.BufferedMatrix ortho3DP -> goto
    nidefawl.qubes.gl.BufferedMatrix ortho3DMV -> long
    nidefawl.qubes.gl.BufferedMatrix tempMatrix -> this
    nidefawl.qubes.gl.BufferedMatrix tempMatrix2 -> void
    nidefawl.qubes.gl.BufferedMatrix identity -> break
    nidefawl.qubes.vec.Vector3f pxOffset -> do
    nidefawl.qubes.vec.TransformStack pxStack -> do
    nidefawl.qubes.vec.Matrix4f invertYZ -> do
    nidefawl.qubes.gl.FrameBuffer fbScene -> do
    nidefawl.qubes.gl.FrameBuffer fbDbg -> if
    float znear -> do
    float zfar -> if
    nidefawl.qubes.gl.TesselatorState fullscreenquad -> do
    nidefawl.qubes.gl.TesselatorState quad -> if
    nidefawl.qubes.vec.Frustum camFrustum -> do
    nidefawl.qubes.vec.Vector3f up -> if
    nidefawl.qubes.vec.Vector4f back -> do
    nidefawl.qubes.vec.Vector3f lightPosition -> for
    nidefawl.qubes.vec.Vector3f lightDirection -> int
    float sunAngle -> for
    nidefawl.qubes.gl.Camera camera -> do
    nidefawl.qubes.gl.Camera camera2 -> if
    nidefawl.qubes.gl.ShadowProjector shadowProj -> do
    nidefawl.qubes.render.WorldRenderer worldRenderer -> do
    nidefawl.qubes.render.ShadowRenderer shadowRenderer -> do
    nidefawl.qubes.render.BlurRenderer blurRenderer -> do
    nidefawl.qubes.render.FinalRenderer outRenderer -> do
    nidefawl.qubes.render.region.RegionRenderer regionRenderer -> do
    nidefawl.qubes.render.LightCompute lightCompute -> do
    nidefawl.qubes.meshing.MeshThread regionRenderThread -> do
    nidefawl.qubes.models.render.QModelBatchedRender renderBatched -> do
    float aspectRatio -> int
    int fieldOfView -> if
    boolean renderWireFrame -> if
    boolean isDepthMask -> new
    boolean isScissors -> for
    boolean updateRenderOffset -> int
    nidefawl.qubes.render.gui.SingleBlockRenderer blockRender -> do
    nidefawl.qubes.render.gui.SingleBlockDraw blockDraw -> do
    nidefawl.qubes.item.ItemRenderer itemRender -> do
    nidefawl.qubes.gl.GLVAO active -> do
    int[] viewport -> do
    nidefawl.qubes.shader.ShaderBuffer debugOutput -> do
    nidefawl.qubes.shader.ShaderBuffer ssbo_lights -> if
    nidefawl.qubes.shader.ShaderBuffer ssbo_model_modelmat -> for
    nidefawl.qubes.shader.ShaderBuffer ssbo_model_normalmat -> int
    nidefawl.qubes.shader.ShaderBuffer ssbo_model_bonemat -> new
    nidefawl.qubes.world.SunLightModel sunlightmodel -> do
    nidefawl.qubes.gl.ReallocIntBuffer[] buffers -> do
    nidefawl.qubes.vec.Vector3f vOrigin -> new
    nidefawl.qubes.vec.Vector3f vDir -> try
    nidefawl.qubes.vec.Vector3f vDirTmp -> byte
    nidefawl.qubes.vec.Vector3f vTarget -> case
    nidefawl.qubes.vec.Vector3f t -> char
    127:132:void bindVAO(nidefawl.qubes.gl.GLVAO) -> do
    135:136:void bindIndexBuffer(int) -> do
    139:140:void bindBuffer(int) -> if
    148:153:boolean checkGLError(java.lang.String) -> do
    157:200:void baseInit() -> do
    203:230:void init() -> if
    233:305:void resize(int,int) -> do
    307:321:void updateOrthoMatrix(float,float) -> do
    324:325:void drawFullscreenQuad() -> for
    328:329:void drawQuad() -> int
    333:333:nidefawl.qubes.gl.BufferedMatrix getMatSceneP() -> do
    336:336:nidefawl.qubes.gl.BufferedMatrix getMatSceneV() -> if
    339:339:nidefawl.qubes.gl.BufferedMatrix getMatSceneV_YZ_Inv() -> for
    342:342:nidefawl.qubes.gl.BufferedMatrix getMatSceneVP() -> int
    346:346:nidefawl.qubes.gl.BufferedMatrix getMatSceneMV() -> new
    349:349:nidefawl.qubes.gl.BufferedMatrix getMatSceneMVP() -> try
    353:353:nidefawl.qubes.gl.BufferedMatrix getMatSceneNormal() -> byte
    363:363:nidefawl.qubes.gl.BufferedMatrix getMatOrthoMVP() -> case
    366:366:nidefawl.qubes.gl.BufferedMatrix getMatOrtho3DMV() -> char
    370:370:nidefawl.qubes.gl.BufferedMatrix getMatOrtho3DP() -> else
    374:374:nidefawl.qubes.gl.BufferedMatrix getTempMatrix() -> goto
    378:378:nidefawl.qubes.gl.BufferedMatrix getTempMatrix2() -> long
    381:381:nidefawl.qubes.gl.BufferedMatrix getIdentityMatrix() -> this
    385:386:void updateCamera() -> new
    389:418:void updateCamera(nidefawl.qubes.gl.Camera) -> do
    422:444:boolean updateGlobalRenderOffset(float,float,float) -> do
    448:448:nidefawl.qubes.gl.FrameBuffer getSceneFB() -> do
    454:465:void flushRenderTasks() -> try
    485:488:void setLightPosition(nidefawl.qubes.vec.Vector3f) -> do
    491:494:void updateShadowProjections(float) -> do
    497:502:void stop() -> byte
    513:546:void updateMouseOverView(float,float,boolean) -> do
    549:570:void reloadRenderer(boolean) -> do
    573:574:void setSceneFB(nidefawl.qubes.gl.FrameBuffer) -> do
    577:586:java.nio.IntBuffer glGenBuffers(int) -> do
    590:594:void deleteBuffers(int[]) -> do
    598:600:void toggleWireFrame() -> case
    631:636:int getBindingPoint(java.lang.String) -> do
    640:642:void enableDepthMask(boolean) -> if
    645:647:void enableScissors() -> char
    649:651:void disableScissors() -> else
    653:658:void setOverrideScissorTest(boolean) -> for
    660:665:void restoreScissorTest() -> goto
    667:668:void restoreDepthMask() -> long
    671:672:void setOverrideDepthMask(boolean) -> int
    675:682:void setViewport(int,int,int,int) -> do
    685:686:void setDefaultViewport() -> this
    689:689:nidefawl.qubes.world.SunLightModel getSunLightModel() -> do
    693:704:nidefawl.qubes.gl.ReallocIntBuffer getIntBuffer() -> do
nidefawl.qubes.gl.Engine$1 -> iJjI1LjIiJJijIiJ:
    225:227:void onChange(nidefawl.qubes.vec.Vector3f) -> do
nidefawl.qubes.gl.FrameBuffer -> L1IjIjIjIjjIL11L:
    int FRAMEBUFFERS -> do
    int renderWidth -> if
    int renderHeight -> for
    int fb -> int
    java.nio.IntBuffer drawBufAtt -> do
    boolean hasDepth -> do
    boolean isShadowDepthBuffer -> if
    int numColorTextures -> new
    int depthTexture -> try
    int[] colorAttTextures -> do
    int[] colorAttFormats -> if
    int[] colorAttMinFilters -> for
    int[] colorAttMagFilters -> int
    boolean[] clearBuffer -> do
    float[][] clearColor -> do
    int colorTexExtFmt -> byte
    int colorTexExtType -> case
    59:69:nidefawl.qubes.gl.FrameBuffer make(nidefawl.qubes.util.IResourceManager,int,int,int,boolean) -> do
    72:72:nidefawl.qubes.gl.FrameBuffer make(nidefawl.qubes.util.IResourceManager,int,int,int) -> do
    76:83:void setColorAtt(int,int) -> do
    87:93:void setFilter(int,int,int) -> do
    95:104:void setClearColor(int,float,float,float,float) -> do
    107:108:void setHasDepthAttachment() -> do
    111:113:void setShadowBuffer() -> if
    116:171:void setup(nidefawl.qubes.util.IResourceManager) -> do
    174:176:void unbindFramebuffer() -> for
    178:180:void unbindReadFramebuffer() -> int
    183:185:void bind() -> new
    187:189:void bindRead() -> try
    192:207:void setupTexture(int,int,int,int) -> do
    210:240:void createDepthTextureAttachment(int) -> do
    243:246:int getTexture(int) -> do
    250:253:int getDepthTex() -> do
    258:261:void clearDepth() -> byte
    265:268:void clearColor() -> case
    272:277:void clearColorBlack() -> char
    281:283:void setDrawAll() -> else
    286:302:void clearFrameBuffer() -> goto
    305:324:void release() -> long
    327:327:int getWidth() -> if
    331:331:int getHeight() -> for
    337:337:int getFB() -> int
    341:341:nidefawl.qubes.util.EResourceType getType() -> do
nidefawl.qubes.gl.GL -> iJL1iJ1L1LJi1LjI:
    boolean directStateAccess -> do
    24:36:void bindTexture(int,int,int) -> do
    39:57:java.util.List validateCaps() -> do
    63:64:void glGetObjectParameterivARB(int,int,java.nio.IntBuffer) -> do
    66:67:void glUniformMatrix4fvARB(int,boolean,java.nio.FloatBuffer) -> do
    79:79:org.lwjgl.opengl.GLCapabilities getCaps() -> do
    82:105:void glTexStorage3D(int,int,int,int,int,int) -> do
    108:117:void glTexStorage2D(int,int,int,int,int) -> do
    120:129:int genStorage(int,int,int,int,int) -> do
    133:136:void deleteTexture(int) -> do
nidefawl.qubes.gl.GLDebugLog -> iJL1L11LIjlljIll:
    org.lwjgl.opengl.GLDebugMessageCallback callback -> do
    java.nio.ByteBuffer buf -> do
    21:59:void setup() -> do
nidefawl.qubes.gl.GLDebugLog$1 -> iJ1Lllll1LiJIjll:
    28:57:void invoke(int,int,int,int,int,long,long) -> invoke
nidefawl.qubes.gl.GLDebugTextures -> JiIjIjL1jIL1JijI:
    int format -> do
    java.lang.String name -> do
    java.lang.String pass -> if
    int h -> if
    int w -> for
    int tex -> int
    int d -> new
    int flags -> try
    boolean valid -> do
    boolean show -> if
    java.util.HashMap textures -> do
    java.util.HashMap alltextures -> if
    nidefawl.qubes.gl.GLDebugTextures selTex -> do
    boolean triggered -> for
    45:46:void readTexture(java.lang.String,java.lang.String,int) -> do
    48:79:int readTexture(java.lang.String,java.lang.String,int,int) -> do
    83:85:void release() -> int
    87:93:void onResize() -> do
    96:201:void drawAll(int,int) -> do
    204:221:void bindShader() -> if
    229:229:nidefawl.qubes.gl.GLDebugTextures getSelected() -> do
    232:232:int get() -> do
    237:244:void drawFullScreen(nidefawl.qubes.gl.GLDebugTextures) -> do
    246:246:boolean isShow() -> do
    249:250:void setShow(boolean) -> do
    253:272:void toggleDebugTex() -> for
nidefawl.qubes.gl.GLTriBuffer -> jIiJiJiJllllJiL1:
    nidefawl.qubes.gl.GLVBO vbo -> do
    nidefawl.qubes.gl.GLVBO vboIndices -> if
    int triCount -> do
    int vertexCount -> if
    int idxCount -> for
    30:43:int upload(nidefawl.qubes.gl.VertexBuffer) -> do
    53:53:int getTriCount() -> do
    56:63:void draw() -> do
    69:75:void release() -> if
    91:91:nidefawl.qubes.gl.GLVBO getVbo() -> do
    94:94:nidefawl.qubes.gl.GLVBO getVboIndices() -> if
nidefawl.qubes.gl.GLVAO -> jIIjL1JijIJiL1Ij:
    int NEXT_VAO_ID -> for
    nidefawl.qubes.gl.GLVAO[] vaoList -> if
    int stride -> do
    int vaoId -> if
    nidefawl.qubes.gl.GLVAO vaoBlocksShadow -> do
    nidefawl.qubes.gl.GLVAO vaoBlocksShadowTextured -> if
    nidefawl.qubes.gl.GLVAO vaoModel -> for
    nidefawl.qubes.gl.GLVAO vaoModelGPUSkinned -> int
    nidefawl.qubes.gl.GLVAO vaoBlocks -> new
    nidefawl.qubes.gl.GLVAO[] vaoTesselator -> do
    18:21:void initVAOs() -> do
    23:23:void init() -> if
nidefawl.qubes.gl.GLVAO$1 -> Ij1LIjjIJiiJ1L:
    26:38:void init() -> if
nidefawl.qubes.gl.GLVAO$2 -> iJlliJiJIjllIjll:
    42:60:void init() -> if
nidefawl.qubes.gl.GLVAO$3 -> jIlliJ1LJiL11LIj:
    65:86:void init() -> if
nidefawl.qubes.gl.GLVAO$4 -> iJjIL11L1Lll:
    90:120:void init() -> if
nidefawl.qubes.gl.GLVAO$5 -> IjllJijIjI1LJiIj:
    124:151:void init() -> if
nidefawl.qubes.gl.GLVAO$6 -> Ji1LjIIjL1JiIjjI:
    int val$tessSetting -> for
    159:197:void init() -> if
nidefawl.qubes.gl.GLVBO -> JillIjjIIjllIj1L:
    int ALLOC_VBOS -> do
    int ALLOC_VBOS_TERRAIN -> if
    int vboId -> for
    long vboSize -> do
    int usage -> int
    boolean isTerrain -> do
    21:22:void setTerrain(boolean) -> do
    28:35:int getVboId() -> do
    44:65:void upload(int,java.nio.ByteBuffer,long) -> do
    67:75:void release() -> do
nidefawl.qubes.gl.GPUVendor -> JijIiJIjlljIL1ll:
    nidefawl.qubes.gl.GPUVendor NVIDIA -> do
    nidefawl.qubes.gl.GPUVendor AMD -> if
    nidefawl.qubes.gl.GPUVendor INTEL -> for
    nidefawl.qubes.gl.GPUVendor OTHER -> int
    nidefawl.qubes.gl.GPUVendor[] $VALUES -> do
    10:10:nidefawl.qubes.gl.GPUVendor[] values() -> values
    10:10:nidefawl.qubes.gl.GPUVendor valueOf(java.lang.String) -> valueOf
    18:36:nidefawl.qubes.gl.GPUVendor parse(java.lang.String) -> do
nidefawl.qubes.gl.Memory -> L1L1iJjI1L1LIjll:
    int mallocd -> do
    java.util.HashSet ptrs -> do
    25:30:java.nio.FloatBuffer createFloatBuffer(int) -> do
    34:39:java.nio.IntBuffer createIntBuffer(int) -> do
    52:57:java.nio.DoubleBuffer createDoubleBuffer(int) -> do
    61:61:java.nio.FloatBuffer createFloatBufferAligned(int,int) -> do
    70:80:java.nio.ByteBuffer createByteBufferAligned(int,int) -> do
    90:94:java.nio.ByteBuffer reallocByteBufferAligned(java.nio.ByteBuffer,int,int) -> do
    109:111:java.nio.IntBuffer createIntBufferGC(int) -> if
    118:126:void free(java.nio.FloatBuffer) -> do
    132:140:void free(java.nio.ByteBuffer) -> do
    143:144:java.nio.IntBuffer createIntBufferHeap(int) -> for
    152:153:java.nio.FloatBuffer createFloatBufferHeap(int) -> if
nidefawl.qubes.gl.ReallocIntBuffer -> jIjIiJIjL1jIJiJi:
    java.nio.ByteBuffer buffers -> do
    java.nio.IntBuffer intbuffers -> do
    boolean inUse -> do
    19:20:void setInUse(boolean) -> do
    22:22:boolean isInUse() -> do
    41:53:void reallocBuffer(int) -> do
    55:60:void release() -> do
    75:79:void put(int[],int,int) -> do
    85:85:java.nio.ByteBuffer getByteBuf() -> do
nidefawl.qubes.gl.ShadowProjector -> jIjIiJ1LJiL11L1L:
    nidefawl.qubes.vec.Matrix4f[] shadowSplitProj -> do
    nidefawl.qubes.gl.BufferedMatrix[] shadowSplitMVP -> do
    float[] shadowSplitDepth -> do
    nidefawl.qubes.vec.Frustum[] shadowCamFrustum -> do
    nidefawl.qubes.vec.Matrix4f newMat -> do
    nidefawl.qubes.vec.Matrix4f newMatInv -> if
    nidefawl.qubes.vec.Matrix4f matLookAt -> for
    nidefawl.qubes.vec.Matrix4f matLookAtInv -> int
    nidefawl.qubes.vec.Matrix4f matOrtho -> new
    nidefawl.qubes.vec.Vector3f frustumCenter -> do
    nidefawl.qubes.vec.Vector3f tmp -> if
    nidefawl.qubes.vec.Vector3f eye -> for
    nidefawl.qubes.vec.Vector3f[] furstumCornersIn -> do
    nidefawl.qubes.vec.Vector3f[] furstumCornersOut -> if
    float[] splits -> if
    49:126:void calcShadow(int,nidefawl.qubes.vec.Matrix4f,nidefawl.qubes.vec.Vector3f,float) -> do
    129:161:void setSplits(float[],float,float) -> do
    164:167:void calcSplits(nidefawl.qubes.vec.Matrix4f,nidefawl.qubes.vec.Vector3f,float) -> do
    169:169:int checkFrustum(int,nidefawl.qubes.vec.AABBInt,float) -> do
    178:178:java.nio.FloatBuffer getSMVP(int) -> do
nidefawl.qubes.gl.Tess -> jI1LL1jIjIjI1Lll:
    java.lang.String[] attributes -> do
    boolean littleEndian -> new
    nidefawl.qubes.gl.Tess instance -> do
    nidefawl.qubes.gl.Tess tessFont -> if
    int[] rawBuffer -> do
    int rgba -> if
    int uintLSB -> for
    int uintMSB -> int
    float u -> do
    float v -> if
    int normal -> new
    float offsetX -> for
    float offsetY -> int
    float offsetZ -> new
    boolean isSoftTesselator -> try
    nidefawl.qubes.gl.ReallocIntBuffer bufInt -> do
    int vboIdx -> try
    nidefawl.qubes.gl.GLVBO[] vbo -> do
    57:57:boolean isSoftTesselator() -> do
    61:68:void add(float,float,float,float,float) -> do
    80:81:void add(float,float) -> do
    84:92:void setNormals(float,float,float) -> do
    95:125:void add(float,float,float) -> if
    129:133:void resizeBuffer() -> if
    137:152:void setColorRGBAF(float,float,float,float) -> do
    155:160:void setUIntLSB(int) -> for
    169:178:void setColor(int,int) -> do
    181:182:void setColorF(int,float) -> do
    185:206:void draw(int,nidefawl.qubes.gl.AbstractTesselatorState) -> do
    209:209:nidefawl.qubes.gl.GLVBO getVBO() -> do
    213:214:void draw(int) -> int
    218:219:void drawQuads() -> do
    224:231:void resetState() -> for
    234:238:void destroy() -> int
    241:244:void setOffset(float,float,float) -> for
    247:249:void destroyAll() -> new
nidefawl.qubes.gl.TesselatorState -> iJIjjIjIiJiJ1L:
    nidefawl.qubes.gl.GLVBO vbo -> do
    13:13:nidefawl.qubes.gl.GLVBO getVBO() -> do
nidefawl.qubes.gl.VertexBuffer -> L1JiJijIllllL11L:
    int[] buffer -> do
    int[] triIdxBuffer -> if
    int triIdxPos -> do
    int pos -> if
    int left -> for
    int left2 -> int
    int vertexCount -> new
    39:44:void reset() -> do
    51:57:int realloc(int) -> do
    64:70:int reallocTriIdxBuffer(int) -> if
    76:83:void put(int) -> do
    85:93:void putIdx(int) -> if
    98:99:void increaseVert() -> if
    104:104:int getVertexCount() -> do
    116:116:int getTriIdxPos() -> if
    122:122:int[] get() -> do
    128:128:int[] getTriIdxBuffer() -> if
    136:137:int storeVertexData(nidefawl.qubes.gl.ReallocIntBuffer) -> do
    144:145:int storeIndexData(nidefawl.qubes.gl.ReallocIntBuffer) -> if
    164:169:void putTriVertIndex(int[],int,int) -> do
nidefawl.qubes.gui.AbstractUI -> iJlljIIjIjJillIj:
    nidefawl.qubes.gui.AbstractUI parent -> do
    int id -> do
    int width -> if
    int height -> for
    int posX -> int
    int posY -> new
    int[] overridebounds -> do
    boolean hovered -> do
    boolean enabled -> if
    boolean draw -> for
    boolean focused -> int
    int zIndex -> try
    nidefawl.qubes.gui.AbstractUI selectedButton -> if
    int color -> byte
    float alpha -> do
    int color2 -> case
    float alpha2 -> if
    int color3 -> char
    float alpha3 -> for
    int color4 -> else
    int color5 -> goto
    int color6 -> long
    float alpha4 -> int
    float boxSigma -> new
    float shadowSigma -> try
    float round -> byte
    int extendx -> this
    int extendy -> void
    31:35:void saveBounds() -> do
    37:41:void restoreBounds() -> if
    43:45:void setSize(int,int) -> do
    47:49:void setPos(int,int) -> if
    52:52:int right() -> do
    56:56:int bottom() -> if
    59:59:boolean hasElement(nidefawl.qubes.gui.AbstractUI) -> do
    62:62:void add(nidefawl.qubes.gui.AbstractUI) -> do
    65:65:void update() -> for
    68:68:boolean mouseOver(double,double) -> do
    72:72:boolean handleMouseUp(nidefawl.qubes.gui.Gui,int) -> do
    75:75:boolean handleMouseDown(nidefawl.qubes.gui.Gui,int) -> if
    78:78:boolean onKeyPress(int,int,int,int) -> do
    81:81:boolean onTextInput(int) -> do
    85:86:void setFocus() -> int
    105:110:void resetShape() -> new
    113:140:void renderRoundedBoxShadow(float,float,float,float,float,int,float,boolean) -> do
    142:167:void renderRoundedBoxShadowInverse(float,float,float,float,float,int,float,boolean) -> if
    169:184:void renderOutlinedBox() -> try
    186:193:void renderBox() -> byte
    198:218:void renderBox(boolean,boolean,int,int) -> do
    220:240:void renderBox2(boolean,boolean,int,int) -> if
    242:242:int getWindowPosX() -> for
    245:245:int getWindowPosY() -> int
    249:262:void renderSlotBackground(float,float,float,float,float,int,float,boolean,float) -> do
    266:316:void renderSlots(nidefawl.qubes.inventory.slots.Slots,float,double,double,float,float) -> do
    318:324:void renderSlotOverlay(nidefawl.qubes.inventory.slots.Slot,float,float) -> do
    327:329:void setDisableDraw(boolean) -> do
nidefawl.qubes.gui.Gui -> L1IjjIJiJillJiiJ:
    java.util.ArrayList buttons -> do
    java.util.ArrayList prebackground -> if
    boolean firstOpen -> new
    nidefawl.qubes.gui.AbstractUI popup -> for
    int FONT_SIZE_WINDOW_TITLE -> break
    int FONT_SIZE_BUTTON -> catch
    35:35:nidefawl.qubes.gui.AbstractUI getPopup() -> do
    38:38:boolean hasElement(nidefawl.qubes.gui.AbstractUI) -> do
    41:44:void add(nidefawl.qubes.gui.AbstractUI) -> do
    46:50:void addBackground(nidefawl.qubes.gui.AbstractUI) -> if
    55:57:void clearElements() -> case
    59:70:void sortElements() -> char
    73:77:void remove(nidefawl.qubes.gui.AbstractUI) -> for
    80:88:void setPopup(nidefawl.qubes.gui.AbstractUI) -> int
    91:98:void renderBackgroundElements(float,double,double) -> a_
    100:131:void renderButtons(float,double,double) -> if
    134:138:void update() -> for
    141:141:void onClose() -> else
    144:183:boolean onMouseClick(int,int) -> do
    187:187:double mouseOffsetY() -> do
    191:191:double mouseOffsetX() -> if
    195:195:boolean onGuiClicked(nidefawl.qubes.gui.AbstractUI) -> if
    199:216:boolean onKeyPress(int,int,int,int) -> do
    220:221:void close() -> goto
    224:232:boolean onTextInput(int) -> do
    239:251:void renderBackground(float,double,double,boolean,float) -> do
    254:254:void updateBounds() -> long
    257:257:boolean canResize() -> do
    261:261:boolean onWheelScroll(double,double) -> if
nidefawl.qubes.gui.Gui$1 -> lljI1LIjIjllL1L1:
    nidefawl.qubes.gui.Gui this$0 -> do
    62:65:int compare(nidefawl.qubes.gui.AbstractUI,nidefawl.qubes.gui.AbstractUI) -> do
    59:59:int compare(java.lang.Object,java.lang.Object) -> compare
nidefawl.qubes.gui.GuiAction -> L1jIL1iJIjJi1L1L:
    int mouseAction -> do
    17:17:boolean isAct(int) -> do
nidefawl.qubes.gui.GuiBG -> lliJiJL1L1lliJll:
    9:13:void render(float,double,double) -> do
    17:17:void initGui(boolean) -> if
nidefawl.qubes.gui.GuiCached -> llJiL1IjjIiJJi1L:
    nidefawl.qubes.gui.Gui gui -> do
    nidefawl.qubes.gl.FrameBuffer fbDbg -> do
    boolean refresh -> try
    24:25:void setPos(int,int) -> if
    29:37:void setSize(int,int) -> do
    40:55:void render(float,double,double) -> do
    57:59:void refresh() -> this
    62:62:void initGui(boolean) -> if
nidefawl.qubes.gui.GuiChatInput -> IjiJL1lliJlliJjI:
    nidefawl.qubes.font.FontRenderer font -> do
    nidefawl.qubes.gui.controls.TextField field -> do
    nidefawl.qubes.gui.GuiOverlayChat overlay -> do
    int mouseResize -> class
    40:43:void setSize(int,int) -> do
    47:64:void initGui(boolean) -> if
    68:68:boolean onGuiClicked(nidefawl.qubes.gui.AbstractUI) -> if
    73:75:boolean onKeyPress(int,int,int,int) -> do
    80:88:boolean onMouseClick(int,int) -> do
    92:97:boolean over(double,double) -> for
    103:128:void render(float,double,double) -> do
    132:139:void submit(nidefawl.qubes.font.TextInput) -> do
    143:144:void onEscape(nidefawl.qubes.font.TextInput) -> if
nidefawl.qubes.gui.GuiConnecting -> IjiJjIiJIjJiL1L1:
    nidefawl.qubes.font.FontRenderer font -> do
    nidefawl.qubes.font.FontRenderer fontSmall -> if
    java.lang.String stateStr -> do
    nidefawl.qubes.network.client.ThreadConnect thread -> do
    24:32:void initGui(boolean) -> if
    35:40:void update() -> for
    43:49:void render(float,double,double) -> do
    52:56:boolean onGuiClicked(nidefawl.qubes.gui.AbstractUI) -> if
nidefawl.qubes.gui.GuiControls -> jIllJiIjIj1LL1Ij:
    nidefawl.qubes.gui.GuiControls$Control selected -> do
    nidefawl.qubes.font.FontRenderer font -> do
    nidefawl.qubes.gui.controls.Button back -> do
    java.util.List list -> do
    nidefawl.qubes.gui.controls.ScrollList scrolllist -> do
    nidefawl.qubes.gui.controls.Button clear -> if
    nidefawl.qubes.gui.controls.Button cancel -> for
    nidefawl.qubes.gui.controls.Button defaultSet -> int
    nidefawl.qubes.input.Keybinding inUseKey -> do
    113:165:void initGui(boolean) -> if
    168:171:boolean onMouseClick(int,int) -> do
    175:177:void update() -> for
    181:235:void render(float,double,double) -> do
    238:262:boolean onKeyPress(int,int,int,int) -> do
    268:305:boolean onGuiClicked(nidefawl.qubes.gui.AbstractUI) -> if
    308:312:boolean onWheelScroll(double,double) -> if
nidefawl.qubes.gui.GuiControls$Control -> Ji1LiJllllIjL1:
    nidefawl.qubes.input.Keybinding b -> do
    41:90:void render(float,double,double) -> do
    94:94:void initGui(boolean) -> if
    27:27:nidefawl.qubes.input.Keybinding access$000(nidefawl.qubes.gui.GuiControls$Control) -> do
nidefawl.qubes.gui.GuiDisconnected -> lljIiJjIL1jIjIll:
    nidefawl.qubes.font.FontRenderer font -> do
    java.lang.String reason -> do
    20:28:void initGui(boolean) -> if
    31:37:void render(float,double,double) -> do
    40:43:boolean onGuiClicked(nidefawl.qubes.gui.AbstractUI) -> if
nidefawl.qubes.gui.GuiGameMenu -> L1Ji1LJillll1LIj:
    nidefawl.qubes.font.FontRenderer font -> do
    nidefawl.qubes.font.FontRenderer fontSmall -> if
    nidefawl.qubes.gui.controls.Button resume -> do
    nidefawl.qubes.gui.controls.Button settings -> if
    nidefawl.qubes.gui.controls.Button controls -> for
    nidefawl.qubes.gui.controls.Button back -> int
    nidefawl.qubes.gui.controls.Button quit -> new
    26:95:void initGui(boolean) -> if
    98:100:void render(float,double,double) -> do
    102:137:boolean onGuiClicked(nidefawl.qubes.gui.AbstractUI) -> if
nidefawl.qubes.gui.GuiMainMenu -> iJL1llIjJi1LiJIj:
    nidefawl.qubes.font.FontRenderer font -> do
    nidefawl.qubes.font.FontRenderer fontSmall -> if
    nidefawl.qubes.gui.controls.TextField field -> do
    nidefawl.qubes.gui.controls.TextField fieldN -> if
    nidefawl.qubes.gui.controls.Button connect -> do
    nidefawl.qubes.gui.controls.Button settings -> if
    nidefawl.qubes.gui.controls.Button controls -> for
    nidefawl.qubes.gui.controls.Button quit -> int
    nidefawl.qubes.gui.controls.Button crash -> new
    31:81:void initGui(boolean) -> if
    83:83:boolean onMouseClick(int,int) -> do
    87:89:void render(float,double,double) -> do
    95:111:boolean onGuiClicked(nidefawl.qubes.gui.AbstractUI) -> if
    115:116:void submit(nidefawl.qubes.font.TextInput) -> do
    121:130:void connect() -> this
    133:141:void onEscape(nidefawl.qubes.font.TextInput) -> if
nidefawl.qubes.gui.GuiOverlayChat -> L11L1LJiJi1LL11L:
    nidefawl.qubes.font.FontRenderer font -> do
    boolean mouseRes -> try
    27:33:void render(float,double,double) -> do
    37:37:void initGui(boolean) -> if
    46:98:void renderAt(int,boolean) -> do
nidefawl.qubes.gui.GuiOverlayStats -> lljIIjjIllL1iJll:
    nidefawl.qubes.font.FontRenderer font -> do
    nidefawl.qubes.font.FontRenderer fontSmall -> if
    java.util.ArrayList info1 -> for
    java.util.ArrayList info -> int
    java.lang.String stats -> if
    java.lang.String statsRight -> for
    long messageTime -> do
    java.lang.String message -> do
    boolean render -> try
    java.lang.String stats5 -> int
    nidefawl.qubes.util.SysInfo sysInfo -> do
    45:135:void refresh() -> this
    138:209:void render(float,double,double) -> do
    212:214:void setMessage(java.lang.String) -> do
    218:218:void initGui(boolean) -> if
    225:232:void blockClicked(nidefawl.qubes.util.RayTrace$RayTraceIntersection) -> do
nidefawl.qubes.gui.GuiSelectBlock -> jIL1Ji1LlliJIjll:
    nidefawl.qubes.font.FontRenderer font -> do
    java.util.List blocks -> do
    nidefawl.qubes.gui.controls.Button fakeButton -> do
    nidefawl.qubes.item.BlockStack sel -> do
    float dir -> case
    float rot -> char
    float lastRot -> else
    42:84:void initGui(boolean) -> if
    90:97:void update() -> for
    101:255:void render(float,double,double) -> do
    258:265:boolean onGuiClicked(nidefawl.qubes.gui.AbstractUI) -> if
    269:277:boolean onKeyPress(int,int,int,int) -> do
nidefawl.qubes.gui.GuiSelectWorld -> IjIjIjIj1LjIJiIj:
    nidefawl.qubes.font.FontRenderer font -> do
    nidefawl.qubes.gui.controls.ScrollList scrolllist -> do
    java.util.ArrayList list -> for
    nidefawl.qubes.gui.controls.Button btnBack -> do
    int REQ_ID -> class
    69:83:void initGui(boolean) -> if
    87:108:void fillList(java.util.ArrayList) -> do
    110:110:boolean onMouseClick(int,int) -> do
    114:126:void render(float,double,double) -> do
    129:137:boolean onGuiClicked(nidefawl.qubes.gui.AbstractUI) -> if
    141:144:boolean onKeyPress(int,int,int,int) -> do
    147:148:boolean onWheelScroll(double,double) -> if
    151:153:void update() -> for
nidefawl.qubes.gui.GuiSelectWorld$WorldListControl -> L1iJJillJiIjjIIj:
    nidefawl.qubes.io.network.WorldInfo info -> do
    34:51:void render(float,double,double) -> do
    55:55:void initGui(boolean) -> if
    23:23:nidefawl.qubes.io.network.WorldInfo access$000(nidefawl.qubes.gui.GuiSelectWorld$WorldListControl) -> do
nidefawl.qubes.gui.GuiSettings -> iJ1L1LIjiJ:
    int nextID -> class
    nidefawl.qubes.font.FontRenderer font -> do
    nidefawl.qubes.gui.controls.Button back -> do
    java.util.List list -> do
    nidefawl.qubes.gui.GuiSettings$Setting testSetting -> do
    nidefawl.qubes.gui.GuiSettings$Setting distanceSetting -> if
    nidefawl.qubes.gui.GuiSettings$Setting shadowSetting -> for
    nidefawl.qubes.gui.GuiSettings$Setting reflectionSetting -> int
    nidefawl.qubes.gui.GuiSettings$Setting smaaSetting -> new
    nidefawl.qubes.gui.GuiSettings$Setting smaaQSetting -> try
    nidefawl.qubes.gui.GuiSettings$Setting aoSetting -> byte
    60:146:void initGui(boolean) -> if
    149:160:void render(float,double,double) -> do
    163:184:boolean onGuiClicked(nidefawl.qubes.gui.AbstractUI) -> if
nidefawl.qubes.gui.GuiSettings$1 -> jIIjIjjI1LJiL1L1:
    nidefawl.qubes.gui.GuiSettings this$0 -> do
    73:73:void callback(int) -> do
nidefawl.qubes.gui.GuiSettings$2 -> jIjIIjiJjI1LJiiJ:
    java.lang.Integer[] val$values -> do
    nidefawl.qubes.gui.GuiSettings this$0 -> do
    82:85:void callback(int) -> do
nidefawl.qubes.gui.GuiSettings$3 -> IjJiIjjIiJIjiJ1L:
    nidefawl.qubes.gui.GuiSettings this$0 -> do
    90:93:void callback(int) -> do
nidefawl.qubes.gui.GuiSettings$4 -> IjJi1LiJIjL1IjJi:
    nidefawl.qubes.gui.GuiSettings this$0 -> do
    98:102:void callback(int) -> do
nidefawl.qubes.gui.GuiSettings$5 -> lllllliJIjIjL1ll:
    nidefawl.qubes.gui.GuiSettings this$0 -> do
    107:111:void callback(int) -> do
nidefawl.qubes.gui.GuiSettings$6 -> L1L11LiJIjjIL1Ji:
    nidefawl.qubes.gui.GuiSettings this$0 -> do
    116:119:void callback(int) -> do
nidefawl.qubes.gui.GuiSettings$7 -> iJllIjJiJiIjllll:
    nidefawl.qubes.gui.GuiSettings this$0 -> do
    125:128:void callback(int) -> do
nidefawl.qubes.gui.GuiSettings$8 -> llllIjllL1llJiIj:
    nidefawl.qubes.gui.GuiSettings$Setting val$s -> do
    nidefawl.qubes.gui.GuiSettings this$0 -> do
    171:176:void call(nidefawl.qubes.gui.controls.ComboBox$ComboBoxList,int) -> do
nidefawl.qubes.gui.GuiSettings$Setting -> JijIL1jIL1lllliJ:
    java.lang.Object[] vals -> do
    nidefawl.qubes.gui.controls.ComboBox box -> do
    39:39:void callback(int) -> do
nidefawl.qubes.gui.Tooltip -> JiL1jIIjllL1iJ:
    nidefawl.qubes.gui.Tooltip$ItemToolTip item -> do
nidefawl.qubes.gui.Tooltip$1 -> llL1L1jIll1LjIiJ:
nidefawl.qubes.gui.Tooltip$ItemToolTip -> jIIjIjjIjIIjL1ll:
    nidefawl.qubes.item.BaseStack stack -> do
    nidefawl.qubes.inventory.slots.Slot slot -> do
    nidefawl.qubes.gui.windows.GuiWindow window -> do
    java.lang.String title -> do
    nidefawl.qubes.font.FontRenderer fr -> do
    nidefawl.qubes.font.FontRenderer fr2 -> if
    22:40:nidefawl.qubes.gui.Tooltip$ItemToolTip set(nidefawl.qubes.item.BaseStack,nidefawl.qubes.inventory.slots.Slot,nidefawl.qubes.gui.windows.GuiWindow) -> do
    44:55:void render(float,double,double) -> do
    59:59:void initGui(boolean) -> if
nidefawl.qubes.gui.controls.Button -> jIjIL1IjL1:
    java.lang.String text -> do
    nidefawl.qubes.font.FontRenderer font -> do
    26:54:void render(float,double,double) -> do
    59:59:void initGui(boolean) -> if
nidefawl.qubes.gui.controls.CheckBox -> JiiJiJ1LjIiJ1LiJ:
    boolean checked -> new
    java.lang.String text -> do
    nidefawl.qubes.font.FontRenderer font -> do
    float titleWidth -> case
    boolean drawTitle -> try
    boolean titleLeft -> byte
    int colorDisabled -> break
    37:104:void render(float,double,double) -> do
    109:109:void initGui(boolean) -> if
nidefawl.qubes.gui.controls.ColorPicker -> L1L1lliJjIIjiJIj:
    nidefawl.qubes.gui.controls.Button[] colorPick -> do
    float valH -> case
    float valS -> char
    float valL -> else
    int rgb -> break
    29:81:void render(float,double,double) -> do
    84:105:void onColorChange(int) -> do
    109:126:void initGui(boolean) -> if
    130:135:boolean hasElement(nidefawl.qubes.gui.AbstractUI) -> do
nidefawl.qubes.gui.controls.ComboBox -> jIllllllL1L1jI1L:
    nidefawl.qubes.font.FontRenderer font -> do
    int textColorDisabled -> break
    int textColorHover -> catch
    int textColor -> class
    float r -> case
    float g -> char
    float b -> else
    float a -> goto
    java.lang.Object value -> do
    float stringWidth -> long
    boolean isOpen -> new
    int sel -> const
    int id -> final
    java.lang.String string -> do
    boolean drawTitle -> try
    boolean titleLeft -> byte
    boolean canexpandHorizontally -> case
    int maxWidthClosed -> float
    int titleWidth -> short
    nidefawl.qubes.gui.controls.ComboBox$ComboBoxList comboBoxList -> do
    nidefawl.qubes.gui.Gui gui -> do
    int scrollbarwidth -> super
    57:58:void setValue(java.lang.Object) -> do
    73:73:void initGui(boolean) -> if
    367:368:void setWatchPopup(nidefawl.qubes.gui.controls.ComboBox$ComboBoxList) -> do
    389:458:void render(float,double,double) -> do
    464:478:boolean onClick(nidefawl.qubes.gui.controls.PopupHolder) -> do
    21:21:nidefawl.qubes.font.FontRenderer access$000(nidefawl.qubes.gui.controls.ComboBox) -> do
nidefawl.qubes.gui.controls.ComboBox$CallBack -> Jill1LJijIIjiJll:
    void call(nidefawl.qubes.gui.controls.ComboBox$ComboBoxList,int) -> do
nidefawl.qubes.gui.controls.ComboBox$ComboBoxList -> ll1L1LjI1LJiiJll:
    nidefawl.qubes.gui.controls.PopupHolder parentScreen -> do
    nidefawl.qubes.gui.controls.ComboBox$CallBack callBack -> do
    nidefawl.qubes.gui.controls.ComboBox box -> do
    java.lang.Object[] values -> do
    int size -> catch
    int heightPerEntry -> class
    boolean showScrollBar -> try
    int scrollOffset -> const
    int showMax -> break
    boolean isScrolling -> new
    int scrollBeginY -> final
    113:114:void initGui(boolean) -> if
    117:150:boolean onKeyPress(int,int,int,int) -> do
    158:174:boolean mouseOver(double,double) -> do
    181:186:boolean handleMouseDown(nidefawl.qubes.gui.Gui,int) -> if
    195:363:void render(float,double,double) -> do
nidefawl.qubes.gui.controls.PopupHolder -> JijIjIIjIjiJJi:
    void setPopup(nidefawl.qubes.gui.AbstractUI) -> int
    nidefawl.qubes.gui.AbstractUI getPopup() -> do
nidefawl.qubes.gui.controls.ProgressBar -> IjiJiJ1LL1iJIjL1:
    float progress -> case
    float lastProgress -> char
    nidefawl.qubes.font.FontRenderer fr -> do
    java.lang.String s -> do
    22:24:void update() -> for
    28:56:void render(float,double,double) -> do
    60:60:void initGui(boolean) -> if
    63:65:void setProgress(float) -> do
    76:77:void setText(java.lang.String) -> do
nidefawl.qubes.gui.controls.ScrollList -> IjJiIjll1LllJiJi:
    nidefawl.qubes.font.FontRenderer font -> do
    float scrollOffset -> case
    nidefawl.qubes.gui.controls.Button scrollbarbutton -> do
    float scrollY -> char
    52:60:float getContentHeight() -> do
    65:149:void render(float,double,double) -> do
    153:153:void initGui(boolean) -> if
    156:162:boolean onMouseClick(int,int) -> do
    166:169:boolean onWheelScroll(double,double) -> if
    173:178:double mouseOffsetY() -> do
    182:182:boolean onGuiClicked(nidefawl.qubes.gui.AbstractUI) -> if
nidefawl.qubes.gui.controls.TextField -> JiiJjIllIjiJ1L:
    nidefawl.qubes.font.FontRenderer font -> do
    nidefawl.qubes.font.TextInput inputRenderer -> do
    36:39:void setPos(int,int) -> if
    43:46:void setSize(int,int) -> do
    49:65:void render(float,double,double) -> do
    68:68:boolean mouseOver(double,double) -> do
    74:74:void initGui(boolean) -> if
    77:77:boolean handleMouseUp(nidefawl.qubes.gui.Gui,int) -> do
    81:89:boolean handleMouseDown(nidefawl.qubes.gui.Gui,int) -> if
    93:97:boolean onKeyPress(int,int,int,int) -> do
    101:105:boolean onTextInput(int) -> do
    109:109:java.lang.String getText() -> do
    116:116:nidefawl.qubes.font.TextInput getTextInput() -> do
    120:133:boolean isFocusedAndContext() -> do
nidefawl.qubes.gui.crafting.GuiCraftingProgressEntry -> L1IjlliJ1L1L1LiJ:
    nidefawl.qubes.crafting.recipes.CraftingRecipe recipe -> do
    nidefawl.qubes.gui.crafting.GuiRecipeOutPreviewItemSlot slotPreview -> do
    nidefawl.qubes.gui.controls.ProgressBar progress -> do
    int n -> class
    nidefawl.qubes.crafting.CraftingManagerClient mgr -> do
    37:81:void render(float,double,double) -> do
    85:106:void initGui(boolean) -> if
    109:109:boolean onGuiClicked(nidefawl.qubes.gui.AbstractUI) -> if
    113:115:void updateState() -> this
    118:120:void update() -> for
    123:134:void updateProgress() -> void
    137:137:nidefawl.qubes.item.BaseStack getStack() -> do
    141:141:long getEndTime() -> do
    145:145:nidefawl.qubes.crafting.CraftingManagerClient getMgr() -> do
nidefawl.qubes.gui.crafting.GuiCraftingSelect -> JijIiJL11LiJ1L1L:
    nidefawl.qubes.gui.crafting.GuiCraftingSelect$RecipeSlot selected -> do
    nidefawl.qubes.gui.crafting.GuiCraftingProgressEntry selected2 -> do
    nidefawl.qubes.gui.GuiBG bg -> do
    nidefawl.qubes.gui.controls.ScrollList scr2 -> do
    java.util.List catButtons -> do
    nidefawl.qubes.gui.controls.TextField txtAmount -> do
    nidefawl.qubes.gui.crafting.GuiCraftingSelect$GuiButtonCat cat -> do
    nidefawl.qubes.gui.controls.Button btnCraft -> do
    nidefawl.qubes.gui.controls.Button btnIncr -> if
    nidefawl.qubes.gui.controls.Button btnDecr -> for
    nidefawl.qubes.gui.controls.Button btnMax -> int
    float entryw -> case
    int cols -> class
    352:352:java.lang.String getTitle() -> do
    360:428:void initGui(boolean) -> if
    431:458:void setCat(nidefawl.qubes.gui.crafting.GuiCraftingSelect$GuiButtonCat) -> do
    461:496:void initLists(boolean,int) -> do
    499:499:boolean onMouseClick(int,int) -> do
    505:512:void update() -> for
    533:534:void renderFrame(float,double,double) -> for
    536:587:void render(float,double,double) -> do
    590:593:boolean onKeyPress(int,int,int,int) -> do
    599:674:boolean onGuiClicked(nidefawl.qubes.gui.AbstractUI) -> if
    677:684:void startcraft(nidefawl.qubes.gui.crafting.GuiCraftingSelect$RecipeSlot,int) -> do
    686:700:void updateProgress() -> this
    702:723:void layoutList() -> class
    725:726:void onRemoteUpdate(nidefawl.qubes.crafting.CraftingManagerClient,int) -> do
    747:764:void renderSlotOverlay(nidefawl.qubes.inventory.slots.Slot,float,float) -> do
    804:815:void setRecipe(nidefawl.qubes.gui.crafting.GuiCraftingSelect$RecipeSlot) -> do
    817:822:void showButtons(boolean) -> for
    824:827:boolean onWheelScroll(double,double) -> if
    831:831:void submit(nidefawl.qubes.font.TextInput) -> do
    834:834:void onEscape(nidefawl.qubes.font.TextInput) -> if
    42:42:nidefawl.qubes.gui.crafting.GuiCraftingSelect$GuiButtonCat access$000(nidefawl.qubes.gui.crafting.GuiCraftingSelect) -> do
nidefawl.qubes.gui.crafting.GuiCraftingSelect$1 -> iJJiiJ1L1LjIIjiJ:
    nidefawl.qubes.gui.crafting.GuiCraftingSelect this$0 -> do
    709:711:int compare(nidefawl.qubes.gui.AbstractUI,nidefawl.qubes.gui.AbstractUI) -> do
    705:705:int compare(java.lang.Object,java.lang.Object) -> compare
nidefawl.qubes.gui.crafting.GuiCraftingSelect$GuiButtonCat -> jIjIjIIjL1L11L:
    nidefawl.qubes.gui.crafting.GuiCraftingSelect$GuiControlCat category -> do
    int catid -> break
    91:91:nidefawl.qubes.gui.controls.ScrollList getScrollList() -> do
    94:94:nidefawl.qubes.gui.controls.Button getScrollbarButton() -> do
    99:164:void render(float,double,double) -> do
    167:167:nidefawl.qubes.crafting.CraftingManagerClient getCraftingManager() -> do
    80:80:int access$300(nidefawl.qubes.gui.crafting.GuiCraftingSelect$GuiButtonCat) -> do
nidefawl.qubes.gui.crafting.GuiCraftingSelect$GuiControlCat -> jIL1JiL1iJllJijI:
    nidefawl.qubes.gui.controls.ScrollList scrolllist -> do
    java.util.List list -> do
    nidefawl.qubes.crafting.CraftingCategory craftingCategory -> do
    nidefawl.qubes.crafting.CraftingManagerClient craftingClient -> do
    63:63:nidefawl.qubes.crafting.CraftingManagerClient access$100(nidefawl.qubes.gui.crafting.GuiCraftingSelect$GuiControlCat) -> do
nidefawl.qubes.gui.crafting.GuiCraftingSelect$GuiControlSubCat -> L1JiiJJijIJill:
    java.lang.String string -> do
    java.util.List list -> if
    boolean expanded -> new
    int rows -> break
    java.util.List slots -> do
    nidefawl.qubes.gui.crafting.GuiCraftingSelect$GuiControlCat parentCat -> do
    275:311:void render(float,double,double) -> do
    315:331:void initGui(boolean) -> if
    334:346:int layout() -> new
    256:256:nidefawl.qubes.gui.crafting.GuiCraftingSelect$GuiControlCat access$200(nidefawl.qubes.gui.crafting.GuiCraftingSelect$GuiControlSubCat) -> do
nidefawl.qubes.gui.crafting.GuiCraftingSelect$PreviewSlots -> IjllIjIjllIj1LiJ:
    nidefawl.qubes.crafting.recipes.CraftingRecipe recipe -> do
    nidefawl.qubes.inventory.BaseInventory baseInv -> do
    nidefawl.qubes.inventory.BaseInventory playerInv -> if
    790:795:void update() -> do
    799:799:nidefawl.qubes.item.BaseStack slotClicked(nidefawl.qubes.inventory.slots.Slot,int,int) -> do
nidefawl.qubes.gui.crafting.GuiCraftingSelect$RecipeSlot -> L11LL1llL11L1LJi:
    nidefawl.qubes.crafting.recipes.CraftingRecipe recipe -> do
    int maxAmount -> break
    nidefawl.qubes.gui.crafting.GuiCraftingSelect$GuiControlSubCat guiControlSubCat -> do
    183:183:void initGui(boolean) -> if
    186:196:void update() -> for
    200:253:void render(float,double,double) -> do
nidefawl.qubes.gui.crafting.GuiRecipeOutPreviewItemSlot -> llIjIjjIjIiJlljI:
    nidefawl.qubes.gui.crafting.GuiCraftingProgressEntry ctrl -> do
    26:26:void initGui(boolean) -> if
    30:94:void render(float,double,double) -> do
nidefawl.qubes.gui.windows.GuiColor -> iJJiIjL1IjjI1LiJ:
    nidefawl.qubes.gui.controls.ColorPicker colorPick -> do
    15:15:java.lang.String getTitle() -> do
    19:37:void initGui(boolean) -> if
    39:39:boolean canResize() -> do
    43:49:void render(float,double,double) -> do
    55:58:boolean onGuiClicked(nidefawl.qubes.gui.AbstractUI) -> if
nidefawl.qubes.gui.windows.GuiContext -> jIjI1L1Lll1LL1ll:
    nidefawl.qubes.gui.controls.TextField input -> do
    nidefawl.qubes.gui.controls.ScrollList scrolllist -> do
nidefawl.qubes.gui.windows.GuiInventory -> JiL1iJJiJiL1IjJi:
    13:13:java.lang.String getTitle() -> do
    17:36:void initGui(boolean) -> if
    39:42:void render(float,double,double) -> do
nidefawl.qubes.gui.windows.GuiInventoryResult -> IjL11LIjJillL1iJ:
    nidefawl.qubes.inventory.slots.Slots slots -> do
    43:53:java.lang.Class getWindowClass(int) -> do
    int getInventory() -> new
    66:94:void initGui(boolean) -> if
    97:105:void render(float,double,double) -> do
    109:113:boolean onGuiClicked(nidefawl.qubes.gui.AbstractUI) -> if
    118:134:boolean onMouseClick(int,int) -> do
nidefawl.qubes.gui.windows.GuiInventoryResult$GuiInventoryResult1 -> ll1LIjL11LJiiJIj:
    21:21:int getInventory() -> new
nidefawl.qubes.gui.windows.GuiInventoryResult$GuiInventoryResult2 -> lliJL11LJijIjI1L:
    27:27:int getInventory() -> new
nidefawl.qubes.gui.windows.GuiInventoryResult$GuiInventoryResult3 -> jIjIiJIjIjJiJiL1:
    33:33:int getInventory() -> new
nidefawl.qubes.gui.windows.GuiInventoryResult$GuiInventoryResult4 -> IjIjL11LjI1L1LjI:
    39:39:int getInventory() -> new
nidefawl.qubes.gui.windows.GuiModelAdjustAbstract -> llJijIJijIllll:
    int nextID -> class
    java.util.List list -> do
    java.util.List listDyn -> if
    nidefawl.qubes.gui.windows.GuiModelAdjustAbstract$Setting testSetting -> do
    nidefawl.qubes.models.EntityModel entityModel -> do
    int modelidx -> const
    nidefawl.qubes.models.qmodel.QModelProperties properties -> do
    boolean isPlayerAdjust() -> if
    176:180:void reloadModel() -> this
    183:221:void setModel(nidefawl.qubes.models.EntityModel,nidefawl.qubes.models.qmodel.QModelProperties) -> do
    225:278:void initGui(boolean) -> if
    281:319:int layout() -> new
    323:332:void render(float,double,double) -> do
    335:405:void renderModel(float,double,double) -> int
    409:409:java.lang.String getTitle() -> do
    413:454:boolean onGuiClicked(nidefawl.qubes.gui.AbstractUI) -> if
    459:471:boolean onKeyPress(int,int,int,int) -> do
    475:484:void setModel(int) -> do
nidefawl.qubes.gui.windows.GuiModelAdjustAbstract$1 -> L11LIjllIjIjL1jI:
    java.util.List val$l -> do
    nidefawl.qubes.gui.windows.GuiModelAdjustAbstract this$0 -> do
    241:252:void callback(int) -> do
nidefawl.qubes.gui.windows.GuiModelAdjustAbstract$2 -> jIjIllIjJi1L1LIj:
    java.util.List val$l -> do
    nidefawl.qubes.gui.windows.GuiModelAdjustAbstract this$0 -> do
    264:269:void callback(int) -> do
nidefawl.qubes.gui.windows.GuiModelAdjustAbstract$3 -> IjlllllljIiJL1L1:
    nidefawl.qubes.gui.windows.GuiModelAdjustAbstract$Setting val$s -> do
    nidefawl.qubes.gui.windows.GuiModelAdjustAbstract this$0 -> do
    441:446:void call(nidefawl.qubes.gui.controls.ComboBox$ComboBoxList,int) -> do
nidefawl.qubes.gui.windows.GuiModelAdjustAbstract$GuiModelView -> llL11LjIIjIjIjIj:
    40:40:boolean isPlayerAdjust() -> if
nidefawl.qubes.gui.windows.GuiModelAdjustAbstract$GuiPlayerAdjust -> IjiJjIiJjIiJJi1L:
    46:46:boolean isPlayerAdjust() -> if
nidefawl.qubes.gui.windows.GuiModelAdjustAbstract$ModelActionList -> L1jIjIL11L1LiJll:
    nidefawl.qubes.models.EntityModel entityModel -> do
    int idx -> if
    146:157:void callback(int) -> do
nidefawl.qubes.gui.windows.GuiModelAdjustAbstract$ModelSettingControl -> JijI1LjIlljIJiIj:
    nidefawl.qubes.models.ModelOption option -> do
    101:112:void callback(int) -> do
    75:75:nidefawl.qubes.models.ModelOption access$000(nidefawl.qubes.gui.windows.GuiModelAdjustAbstract$ModelSettingControl) -> do
nidefawl.qubes.gui.windows.GuiModelAdjustAbstract$Setting -> L1jIiJIjjIiJllll:
    java.lang.Object[] vals -> do
    nidefawl.qubes.gui.controls.ComboBox box -> do
    nidefawl.qubes.gui.controls.Button button1 -> do
    nidefawl.qubes.gui.controls.Button button2 -> if
    int curVal -> do
    nidefawl.qubes.gui.windows.GuiModelAdjustAbstract gui -> if
    72:72:void callback(int) -> do
nidefawl.qubes.gui.windows.GuiWindow -> jIIjIjllL11LiJiJ:
    boolean allwaysVisible -> try
    boolean visible -> byte
    nidefawl.qubes.font.FontRenderer font -> do
    int[] bounds -> if
    25:31:void initGui(boolean) -> if
    33:33:java.lang.String getTitle() -> do
    37:40:void onDefocus() -> void
    43:43:void onFocus() -> break
    47:48:void setFocus() -> int
    51:51:boolean hasFocus() -> for
    54:58:void open() -> catch
    61:64:void close() -> goto
    67:69:void onClose() -> else
    72:82:boolean mouseOver(double,double) -> do
    85:85:boolean mouseOverResize(double,double) -> for
    89:89:boolean removeOnClose() -> int
    98:98:void updateBounds() -> long
    101:101:boolean canResize() -> do
    106:163:void renderFrame(float,double,double) -> for
    165:190:void onDrag(double,double) -> do
    192:205:void onResize(double,double) -> if
    207:236:boolean onMouseClick(int,int) -> do
    239:239:int getWindowPosX() -> for
    242:242:int getWindowPosY() -> int
nidefawl.qubes.gui.windows.GuiWindowInventoryBase -> JiIjiJIjjIIjIj:
    nidefawl.qubes.inventory.slots.Slots slots -> do
    21:24:void renderSlots(float,double,double) -> int
    26:38:boolean onMouseClick(int,int) -> do
    41:41:boolean canResize() -> do
nidefawl.qubes.gui.windows.GuiWindowManager -> llL1llL1iJ1LllJi:
    nidefawl.qubes.gui.windows.GuiWindowManager singleton -> do
    java.util.Map windowList -> do
    nidefawl.qubes.gui.windows.GuiWindow windowFocus -> for
    nidefawl.qubes.gui.windows.GuiWindow dragged -> do
    nidefawl.qubes.gui.windows.GuiWindow resized -> if
    nidefawl.qubes.gui.Tooltip tooltip -> do
    25:25:nidefawl.qubes.gui.windows.GuiWindowManager getInstance() -> do
    29:58:void setWindowFocus(nidefawl.qubes.gui.windows.GuiWindow) -> do
    61:89:void do_setWindowFocus(nidefawl.qubes.gui.windows.GuiWindow) -> if
    91:96:int getHighestIndex() -> do
    122:141:nidefawl.qubes.gui.windows.GuiWindow openWindow(java.lang.Class,boolean) -> do
    145:145:nidefawl.qubes.gui.windows.GuiWindow openWindow(java.lang.Class) -> do
    149:154:java.lang.Object getWindow(java.lang.Class) -> do
    158:162:boolean anyWindowVisible() -> do
    167:171:nidefawl.qubes.gui.windows.GuiWindow addWindow(nidefawl.qubes.gui.windows.GuiWindow,boolean) -> do
    244:245:void render(float,double,double) -> do
    248:308:void drawWindows(float,double,double) -> if
    310:314:void renderTooltip(float,double,double) -> for
    318:323:void setTooltip(nidefawl.qubes.gui.Tooltip) -> do
    330:330:void initGui(boolean) -> if
    347:347:nidefawl.qubes.gui.windows.GuiWindow getWindowFocus() -> do
    350:361:boolean onMouseClick(int,int) -> do
    364:378:nidefawl.qubes.gui.windows.GuiWindow getMouseOver(double,double) -> do
    381:389:void mouseMove(double,double) -> do
    392:396:boolean onKeyPress(int,int,int,int) -> do
    400:404:boolean onWheelScroll(double,double) -> do
    407:428:void onWindowClosed(nidefawl.qubes.gui.windows.GuiWindow) -> for
    430:432:void onWindowManagerClose() -> do
    435:439:void onWindowOpened(nidefawl.qubes.gui.windows.GuiWindow) -> int
    441:446:void update() -> if
nidefawl.qubes.hex.HexCell -> L11LL1iJIjJiIj1L:
    int x -> do
    int z -> if
    nidefawl.qubes.hex.HexagonGridStorage grid -> do
    29:33:double getDistanceCenter(double,double) -> do
    37:37:double getCenterX() -> do
    41:41:double getCenterY() -> if
    63:83:int getClosesCorner(double,double) -> do
nidefawl.qubes.hex.HexagonGrid -> jI1LIj1LL11LiJjI:
    double radius -> do
    double height -> if
    double width -> for
    double hwidth -> int
    double ttheight -> new
    double[] sinCos -> do
    int[] offset -> do
    41:41:long blockToGrid(int,int) -> do
    45:53:long toHex(double,double) -> do
    57:57:double getCenterX(int,int) -> do
    61:61:double getCenterY(int,int) -> if
    65:65:double getPointX(int,int,int) -> do
    68:68:double getPointY(int,int,int) -> if
    111:111:long offset(int,int,int) -> do
nidefawl.qubes.hex.HexagonGridStorage -> IjjIJiiJL1iJllJi:
    int max -> do
    java.util.HashMap map -> do
    java.util.HashMap oobmap -> if
    39:40:void putPos(long,java.lang.Object) -> do
    43:60:java.lang.Object getPos(long) -> do
    64:66:boolean outOfBounds(long) -> do
    70:71:java.lang.Object blockToHex(int,int) -> do
    java.lang.Object loadCell(int,int) -> if
    java.lang.Object oobCell(int,int) -> for
nidefawl.qubes.input.DigController -> jIjIIjL1JiJiJiIj:
    int stage -> do
    boolean digging -> do
    int speed -> if
    int tick -> for
    nidefawl.qubes.vec.BlockPos mouseOver -> do
    nidefawl.qubes.vec.BlockPos lastMouseOver -> if
    nidefawl.qubes.util.RayTrace$RayTraceIntersection intersect -> do
    int transaction -> int
    int[] stageTex -> do
    35:43:void onMouseClick(int,boolean) -> do
    64:64:boolean isDigAnimation() -> do
    71:73:void onGrabChange(boolean) -> do
    75:79:void startDigging() -> new
    81:85:void endDigging() -> try
    91:91:void preRenderUpdate() -> do
    94:111:void update() -> if
    114:120:boolean equalMouseOver() -> if
    125:135:void sendDigState(int) -> if
    138:147:void setBlock(nidefawl.qubes.util.RayTrace$RayTraceIntersection,nidefawl.qubes.vec.BlockPos) -> do
    156:156:void init() -> for
    161:165:void reloadTextures() -> int
    235:235:void renderDigging(nidefawl.qubes.world.World,float) -> do
    239:243:float getSwingProgress(float) -> do
    247:253:void handleServerState(int) -> do
nidefawl.qubes.input.GameMode -> jIjI1LL1iJIjL11L:
    nidefawl.qubes.input.GameMode PLAY -> do
    nidefawl.qubes.input.GameMode BUILD -> if
    nidefawl.qubes.input.GameMode EDIT -> for
    nidefawl.qubes.input.GameMode SELECT -> int
    nidefawl.qubes.input.GameMode[] $VALUES -> do
    6:6:nidefawl.qubes.input.GameMode[] values() -> values
    6:6:nidefawl.qubes.input.GameMode valueOf(java.lang.String) -> valueOf
nidefawl.qubes.input.InputController -> L1jIjIiJJiJi:
    nidefawl.qubes.config.AbstractYMLConfig settings -> do
    nidefawl.qubes.input.Keybinding kb_forward -> do
    nidefawl.qubes.input.Keybinding kb_backward -> if
    nidefawl.qubes.input.Keybinding kb_left -> for
    nidefawl.qubes.input.Keybinding kb_right -> int
    nidefawl.qubes.input.Keybinding kb_sneak -> new
    nidefawl.qubes.input.Keybinding kb_jump -> try
    float strafe -> do
    float forward -> if
    boolean grabbed -> do
    int mX -> do
    int mY -> if
    float jump -> for
    float sneak -> int
    java.util.Map keyToKeyBinding -> do
    java.util.ArrayList keybindings -> do
    java.util.concurrent.ConcurrentMap keybindingsStr -> do
    103:105:void addKeyBinding(nidefawl.qubes.input.Keybinding) -> do
    107:107:nidefawl.qubes.input.Keybinding getKeyBindingByName(java.lang.String) -> do
    110:115:void updateKeybindMap() -> do
    118:118:nidefawl.qubes.input.Keybinding getKeyBinding(int) -> do
    122:153:void update(double,double) -> do
    156:156:boolean isKeyDown(int) -> do
    160:169:void setGrabbed(boolean) -> do
    172:172:boolean grabbed() -> do
    176:364:void initKeybinds() -> if
    368:376:void load() -> for
    378:386:void saveBindings() -> int
    388:388:java.util.Collection getBindings() -> do
nidefawl.qubes.input.InputController$1 -> IjIjJiJiIjjIlljI:
    46:46:void setDefaults() -> do
    50:53:void save() -> for
    57:66:void load() -> if
nidefawl.qubes.input.InputController$10 -> jIiJL1jIJiiJiJL1:
    242:243:void onDown() -> do
nidefawl.qubes.input.InputController$11 -> L1L1L11LjIJi1L:
    247:248:void onDown() -> do
nidefawl.qubes.input.InputController$12 -> jIJiiJ1LjIiJ1LL1:
    nidefawl.qubes.Game val$game -> do
    252:253:void onDown() -> do
nidefawl.qubes.input.InputController$13 -> L1L1jIIj1LjIll:
    nidefawl.qubes.Game val$game -> do
    261:265:void onDown() -> do
nidefawl.qubes.input.InputController$14 -> IjL1IjiJ1LllL1ll:
    nidefawl.qubes.Game val$game -> do
    269:276:void onDown() -> do
nidefawl.qubes.input.InputController$15 -> lljIL1llIjL1JiIj:
    nidefawl.qubes.Game val$game -> do
    280:281:void onDown() -> do
nidefawl.qubes.input.InputController$16 -> IjjIL11LllL1jI1L:
    285:286:void onDown() -> do
nidefawl.qubes.input.InputController$17 -> JiL11LJi1LL1JijI:
    293:297:void onDown() -> do
nidefawl.qubes.input.InputController$18 -> llL1jI1LL1Jillll:
    301:302:void onDown() -> do
nidefawl.qubes.input.InputController$19 -> ll1LjIiJiJJijIL1:
    nidefawl.qubes.Game val$game -> do
    306:307:void onDown() -> do
nidefawl.qubes.input.InputController$2 -> Ij1LjIiJjIlliJ1L:
    nidefawl.qubes.Game val$game -> do
    180:182:void onDown() -> do
nidefawl.qubes.input.InputController$20 -> iJ1LIjIjL11LIjL1:
    311:312:void onDown() -> do
nidefawl.qubes.input.InputController$21 -> L1L1JijIjIjIjIJi:
    317:320:void onDown() -> do
nidefawl.qubes.input.InputController$22 -> jIllllL1jI1LjIjI:
    325:326:void onDown() -> do
nidefawl.qubes.input.InputController$23 -> JilljIIjiJL11L1L:
    nidefawl.qubes.Game val$game -> do
    330:332:void onDown() -> do
nidefawl.qubes.input.InputController$24 -> IjlliJjIJiL11LjI:
    338:339:void onDown() -> do
nidefawl.qubes.input.InputController$25 -> iJiJIjiJIjjIJijI:
    345:348:void onDown() -> do
nidefawl.qubes.input.InputController$26 -> iJIjIjJiiJL1jIll:
    352:353:void onDown() -> do
nidefawl.qubes.input.InputController$27 -> JiIjjIjIJiL1Ijll:
    nidefawl.qubes.Game val$game -> do
    357:362:void onDown() -> do
nidefawl.qubes.input.InputController$3 -> Ij1LiJIjiJL1iJJi:
    nidefawl.qubes.Game val$game -> do
    194:202:void onDown() -> do
nidefawl.qubes.input.InputController$4 -> iJjIJi1LJiJiiJll:
    nidefawl.qubes.Game val$game -> do
    206:207:void onDown() -> do
nidefawl.qubes.input.InputController$5 -> L1llJi1LiJlliJjI:
    nidefawl.qubes.Game val$game -> do
    211:212:void onDown() -> do
nidefawl.qubes.input.InputController$6 -> L1L1jIjIjIL1IjJi:
    nidefawl.qubes.Game val$game -> do
    216:221:void onDown() -> do
nidefawl.qubes.input.InputController$7 -> llll1LJiL11LJiiJ:
    nidefawl.qubes.Game val$game -> do
    225:226:void onDown() -> do
nidefawl.qubes.input.InputController$8 -> L1iJL1IjjIllL1Ij:
    230:231:void onDown() -> do
nidefawl.qubes.input.InputController$9 -> IjJiJiIjIjL1jIIj:
    236:237:void onDown() -> do
nidefawl.qubes.input.Keybinding -> JiJijI1LL1jIIj1L:
    boolean enabled -> do
    int key -> do
    boolean isPressed -> if
    java.lang.String name -> do
    boolean hasCallback -> for
    boolean staticBinding -> int
    int defaultkey -> if
    28:28:int getDefaultkey() -> do
    31:32:nidefawl.qubes.input.Keybinding setNoCallBack() -> do
    36:37:nidefawl.qubes.input.Keybinding setStatic() -> if
    40:40:boolean isStaticBinding() -> do
    43:43:boolean hasCallback() -> if
    46:51:void fire() -> if
    54:54:java.lang.String getName() -> do
    61:61:boolean isEnabled() -> for
    68:68:boolean isPressed() -> int
    75:75:int getKey() -> if
    83:84:void setEnabled(boolean) -> do
    91:92:void setKey(int) -> do
    102:102:void onDown() -> do
    103:103:void onUp() -> for
    109:118:void update(int) -> if
nidefawl.qubes.input.Keyboard -> L1Ji1Lllll1LL1iJ:
    java.util.HashMap keyNames -> do
    139:139:boolean isKeyDown(int) -> do
    143:143:boolean getState(int) -> if
    147:148:java.lang.String getKeyName(int) -> do
nidefawl.qubes.input.Mouse -> L1IjjIIjL1JijIjI:
    double dy -> do
    double dx -> if
    double x -> for
    double y -> int
    double scrollDX -> new
    double scrollDY -> try
    double lastX -> byte
    double lastY -> case
    java.nio.DoubleBuffer bx -> do
    java.nio.DoubleBuffer by -> if
    boolean isGrabbed -> do
    28:32:void init() -> do
    34:36:double getDX() -> do
    40:42:double getDY() -> if
    46:46:boolean getState(int) -> do
    50:50:double getX() -> for
    54:54:double getY() -> int
    58:59:void setCursorPosition(int,int) -> do
    63:63:boolean isGrabbed() -> do
    67:72:void setGrabbed(boolean) -> do
    75:82:void setLastPos() -> if
    84:84:boolean isButtonDown(int) -> if
    90:96:void update(double,double) -> do
nidefawl.qubes.input.Selection -> IjJiIjiJIjllJijI:
    nidefawl.qubes.gl.TesselatorState highlightSelection -> do
    nidefawl.qubes.gl.TesselatorState fullBlock -> if
    nidefawl.qubes.gl.TesselatorState customBB -> for
    nidefawl.qubes.vec.AABBFloat lastCustomBB -> do
    boolean quarterMode -> do
    boolean mouseDown -> if
    boolean mouseStateChanged -> for
    nidefawl.qubes.gl.TesselatorState renderBB -> int
    nidefawl.qubes.util.RayTrace rayTrace -> do
    nidefawl.qubes.vec.BlockPos[] pos -> do
    boolean updateBB -> int
    nidefawl.qubes.vec.BlockPos mouseOver -> do
    nidefawl.qubes.vec.AABBFloat selBB -> if
    30:30:nidefawl.qubes.input.GameMode getMode() -> do
    45:50:void init() -> do
    57:60:void resetSelection() -> if
    63:63:boolean hasSelection() -> do
    71:105:void renderBlockHighlight(nidefawl.qubes.world.World,float) -> do
    110:119:void renderMouseOver() -> try
    122:250:void renderBlockOver(nidefawl.qubes.gl.TesselatorState,nidefawl.qubes.vec.AABBFloat) -> do
    254:303:void renderBB() -> for
    306:364:void update(nidefawl.qubes.world.World,double,double,double) -> do
    370:407:void setMouseOver(nidefawl.qubes.util.RayTrace$RayTraceIntersection) -> do
    409:416:void set(int,nidefawl.qubes.vec.BlockPos) -> do
    419:457:void clicked(int,boolean) -> do
    460:460:boolean extendReach() -> if
    464:464:nidefawl.qubes.vec.BlockPos getMin() -> do
    468:468:nidefawl.qubes.vec.BlockPos getMax() -> if
    472:474:int getNumBlocks() -> do
    480:525:void onRelease() -> byte
    528:534:void reset() -> int
    539:542:nidefawl.qubes.util.RayTrace$RayTraceIntersection getHit() -> do
    566:567:void toggleQuarterMode() -> new
nidefawl.qubes.inventory.BaseInventory -> lliJIjll1LIjJiJi:
    int id -> do
    int inventorySize -> if
    nidefawl.qubes.item.BaseStack[] stacks -> do
    byte[] flagged -> do
    boolean dirty -> do
    boolean needSorting -> if
    java.util.HashMap amounts -> do
    41:41:nidefawl.qubes.item.BaseStack getItem(int) -> do
    45:50:nidefawl.qubes.item.BaseStack setItem(int,nidefawl.qubes.item.BaseStack) -> do
    82:83:void setIncr(java.util.Collection) -> do
    85:86:void set(java.util.Collection) -> if
    89:103:void _set(java.util.Collection,boolean) -> do
    123:138:java.util.HashMap getSortedStacks() -> do
nidefawl.qubes.inventory.PlayerInventory -> iJllL1IjIjllllll:
    nidefawl.qubes.item.BaseStack carried -> do
    57:59:nidefawl.qubes.item.BaseStack setCarried(nidefawl.qubes.item.BaseStack) -> do
    63:63:nidefawl.qubes.item.BaseStack getCarried() -> do
nidefawl.qubes.inventory.PlayerInventoryCrafting -> L1L1jIjIllL1Ijll:
    int inputSlots -> for
    int outputSlots -> int
nidefawl.qubes.inventory.slots.Slot -> JiiJjIlliJL1Ij1L:
    int idx -> do
    float x -> do
    float y -> if
    float w -> for
    nidefawl.qubes.inventory.slots.Slots slots -> do
    nidefawl.qubes.item.BaseStack getItem() -> do
    30:30:boolean isAt(double,double) -> do
    nidefawl.qubes.item.BaseStack putStack(nidefawl.qubes.item.BaseStack) -> do
    boolean canTake() -> do
    boolean canPut(nidefawl.qubes.item.BaseStack) -> do
nidefawl.qubes.inventory.slots.SlotInventory -> llL1JijIJiL1iJjI:
    nidefawl.qubes.inventory.BaseInventory inv -> do
    24:24:nidefawl.qubes.item.BaseStack getItem() -> do
    56:59:nidefawl.qubes.item.BaseStack putStack(nidefawl.qubes.item.BaseStack) -> do
    64:64:boolean canTake() -> do
    69:69:boolean canPut(nidefawl.qubes.item.BaseStack) -> do
nidefawl.qubes.inventory.slots.SlotPreview -> lljIIjjIL1iJjIL1:
    nidefawl.qubes.item.BaseStack stack -> do
    16:16:nidefawl.qubes.item.BaseStack getItem() -> do
    41:41:nidefawl.qubes.item.BaseStack putStack(nidefawl.qubes.item.BaseStack) -> do
    46:46:boolean canTake() -> do
    51:51:boolean canPut(nidefawl.qubes.item.BaseStack) -> do
nidefawl.qubes.inventory.slots.SlotStack -> jIJiIj1L1LiJllll:
    int slot -> do
    nidefawl.qubes.item.BaseStack stack -> do
    23:25:void read(java.io.DataInput) -> do
    28:30:void write(java.io.DataOutput) -> do
nidefawl.qubes.inventory.slots.SlotStock -> iJjIjI1LL1iJIjJi:
    nidefawl.qubes.item.BaseStack stack -> do
    nidefawl.qubes.inventory.PlayerInventory inv -> do
    nidefawl.qubes.item.BaseStack stackReq -> if
    23:23:nidefawl.qubes.item.BaseStack getItem() -> do
    48:48:nidefawl.qubes.item.BaseStack putStack(nidefawl.qubes.item.BaseStack) -> do
    53:53:boolean canTake() -> do
    58:58:boolean canPut(nidefawl.qubes.item.BaseStack) -> do
    62:68:void update() -> do
nidefawl.qubes.inventory.slots.Slots -> IjllIjllllIjIjIj:
    java.util.List slots -> do
    int id -> do
    18:18:int getId() -> do
    21:22:void addSlot(nidefawl.qubes.inventory.slots.Slot) -> do
    30:35:nidefawl.qubes.inventory.slots.Slot getSlotAt(double,double) -> do
    42:42:java.util.List getSlots() -> do
    nidefawl.qubes.item.BaseStack slotClicked(nidefawl.qubes.inventory.slots.Slot,int,int) -> do
    54:54:nidefawl.qubes.inventory.slots.Slot getSlot(int) -> do
    58:58:boolean canModify() -> do
nidefawl.qubes.inventory.slots.SlotsCrafting -> iJjIJiL1iJllIjIj:
    boolean locked -> do
    38:38:boolean canModify() -> do
nidefawl.qubes.inventory.slots.SlotsInventory -> Ji1LllIjjIiJjI:
    28:28:boolean canModify() -> do
nidefawl.qubes.inventory.slots.SlotsInventoryBase -> llL1iJiJlljIL1:
    nidefawl.qubes.inventory.BaseInventory baseInv -> do
    nidefawl.qubes.inventory.PlayerInventory playerInv -> do
    18:32:nidefawl.qubes.item.BaseStack slotClicked(nidefawl.qubes.inventory.slots.Slot,int,int) -> do
    39:39:nidefawl.qubes.inventory.BaseInventory getInv() -> do
nidefawl.qubes.io.BinaryStreamReader -> L1JiJi1LIjllL1Ji:
    int offset -> do
    nidefawl.qubes.assets.AssetBinary asset -> do
    15:21:byte[] readBytes(int) -> do
    33:34:float readFloat() -> do
    45:45:nidefawl.qubes.vec.Vector3f readVec3() -> do
    53:53:nidefawl.qubes.vec.Vector4f readVec4() -> do
    57:64:int readInt() -> do
    67:72:int readUShort() -> if
    75:78:int readUByte() -> for
    87:90:java.lang.String readString(int) -> do
    94:95:void resetOffset() -> do
nidefawl.qubes.io.ByteArrIO -> llIjllIj1LiJiJll:
    40:42:int readShort(byte[],int) -> do
    46:47:int readUnsignedByte(byte[],int) -> if
    56:60:int readInt(byte[],int) -> for
    72:75:void byteToShortArray(byte[],short[]) -> do
    77:78:byte[] shortToByteArray(short[]) -> do
    81:85:byte[] shortToByteArray(short[],byte[]) -> do
nidefawl.qubes.io.network.DataListType -> L1jIllJiiJiJllll:
    nidefawl.qubes.io.network.DataListType WORLDS -> do
    int id -> do
    java.lang.Class clazz -> do
    nidefawl.qubes.io.network.DataListType[] $VALUES -> do
    6:6:nidefawl.qubes.io.network.DataListType[] values() -> values
    6:6:nidefawl.qubes.io.network.DataListType valueOf(java.lang.String) -> valueOf
    15:16:nidefawl.qubes.io.network.DataListType byId(int) -> do
    20:22:nidefawl.qubes.network.StreamIO makeNew() -> do
    26:26:int getId() -> do
nidefawl.qubes.io.network.WorldInfo -> iJllL1JiiJIjJill:
    int id -> do
    java.lang.String name -> do
    java.util.UUID uuid -> do
    19:22:void read(java.io.DataInput) -> do
    25:29:void write(java.io.DataOutput) -> do
nidefawl.qubes.item.BaseStack -> llIjL1iJjIjIJill:
    int id -> do
    int data -> if
    int size -> for
    nidefawl.qubes.item.ItemStack tmpStackItem -> do
    nidefawl.qubes.item.BlockStack tmpStackBlock -> do
    boolean isItem() -> do
    23:23:boolean isBlock() -> if
    nidefawl.qubes.item.BaseStack copy() -> do
    nidefawl.qubes.item.Item getItem() -> do
    nidefawl.qubes.block.Block getBlock() -> do
    int getTypeHash() -> do
    62:62:java.lang.String getName() -> do
    69:77:nidefawl.qubes.item.BaseStack getTemp(java.lang.Object) -> do
    80:81:void setSize(int) -> do
    83:83:int getSize() -> if
nidefawl.qubes.item.BlockStack -> JiL1L11LL11LIj1L:
    nidefawl.qubes.item.StackData stackdata -> do
    29:30:void setStackdata(nidefawl.qubes.item.StackData) -> do
    35:35:nidefawl.qubes.item.StackData getStackdata() -> do
    99:102:nidefawl.qubes.item.BlockStack copy() -> do
    105:105:nidefawl.qubes.block.Block getBlock() -> do
    109:118:void read(java.io.DataInput) -> do
    121:130:void write(java.io.DataOutput) -> do
    147:147:boolean isItem() -> do
    151:151:nidefawl.qubes.item.Item getItem() -> do
    156:156:java.lang.String toString() -> toString
    162:162:int getTypeHash() -> do
    21:21:nidefawl.qubes.item.BaseStack copy() -> do
nidefawl.qubes.item.IDMappingItems -> JiIjjI1LJijIjIjI:
    boolean CHANGED -> do
    boolean LOADED -> if
    int HIGHEST_ITEM_ID -> do
    com.google.common.collect.ImmutableBiMap map -> do
    java.lang.Object sync -> do
    33:72:void load() -> do
    74:115:void save() -> if
    117:149:int get(java.lang.String) -> do
nidefawl.qubes.item.Item -> IjllJiL1JijI1LL1:
    nidefawl.qubes.item.Item[] registereditems -> if
    short[] registereditemIds -> do
    nidefawl.qubes.item.Item[] item -> do
    nidefawl.qubes.item.Item pickaxe -> do
    nidefawl.qubes.item.Item axe -> if
    nidefawl.qubes.item.ItemGroupLog log -> do
    nidefawl.qubes.item.ItemGroupPlank plank -> do
    nidefawl.qubes.item.ItemGroupStones stones -> do
    int id -> do
    java.lang.String name -> do
    boolean transparent -> do
    java.lang.String[] textures -> do
    nidefawl.qubes.vec.AABBFloat blockBounds -> do
    nidefawl.qubes.models.ItemModel itemModel -> do
    nidefawl.qubes.item.ItemGroup itemGroup -> do
    60:61:void setItemGroup(nidefawl.qubes.item.ItemGroup) -> do
    75:75:void init() -> do
    79:80:nidefawl.qubes.item.Item setModel(nidefawl.qubes.models.ItemModel) -> do
    84:84:java.lang.String[] getTextures() -> do
    88:92:nidefawl.qubes.item.Item setTextures(java.lang.String[]) -> do
    101:101:java.lang.String getName() -> do
    108:130:void preInit() -> if
    133:133:void postInit() -> for
    145:145:nidefawl.qubes.item.Item get(int) -> do
    152:152:int getTexture(nidefawl.qubes.item.ItemStack) -> do
    159:159:nidefawl.qubes.models.ItemModel getItemModel() -> do
nidefawl.qubes.item.ItemGroup -> jIL1Ijll1LiJJiIj:
    int NEXT_GROUP_ID -> do
    int id -> if
    java.util.List items -> do
    19:21:void addItem(nidefawl.qubes.item.Item) -> do
    26:26:java.util.List getItems() -> do
    29:29:nidefawl.qubes.item.Item getItem(int) -> do
nidefawl.qubes.item.ItemGroupLog -> iJIjjIjI1LL1IjL1:
nidefawl.qubes.item.ItemGroupPlank -> llJiiJiJ1LllJi1L:
nidefawl.qubes.item.ItemGroupStones -> jIllL1llIjJiiJL1:
    java.util.List names -> do
nidefawl.qubes.item.ItemLog -> llIjL11LiJIj1LjI:
    int index -> if
nidefawl.qubes.item.ItemRenderer -> IjJiJijIL1IjiJL1:
    nidefawl.qubes.font.FontRenderer font -> do
    33:34:void init() -> do
    37:59:void drawItem(nidefawl.qubes.item.BaseStack,float,float,float,float) -> do
    69:79:void drawItemOverlay(nidefawl.qubes.item.BaseStack,float,float,float,float) -> if
nidefawl.qubes.item.ItemStack -> iJjI1LjIL11LjIIj:
    40:43:void read(java.io.DataInput) -> do
    47:50:void write(java.io.DataOutput) -> do
    54:54:boolean isItem() -> do
    61:61:int getItemTexture() -> for
    68:68:nidefawl.qubes.item.Item getItem() -> do
    73:77:nidefawl.qubes.item.BaseStack copy() -> do
    105:105:nidefawl.qubes.block.Block getBlock() -> do
    109:109:java.lang.String toString() -> toString
    114:114:int getTypeHash() -> do
nidefawl.qubes.item.ItemStone -> IjIjllll1LL11L1L:
    int index -> if
nidefawl.qubes.item.StackData -> Ji1L1LJi1LL1Jill:
    nidefawl.qubes.chunk.blockdata.BlockData data -> do
    27:28:void setBlockData(nidefawl.qubes.chunk.blockdata.BlockData) -> do
    30:30:nidefawl.qubes.chunk.blockdata.BlockData getBlockData() -> do
    35:48:void read(java.io.DataInput) -> do
    52:63:void write(java.io.DataOutput) -> do
    66:66:nidefawl.qubes.item.StackData copy() -> do
nidefawl.qubes.lighting.DynamicLight -> IjllJilliJL1jIIj:
    nidefawl.qubes.vec.Vector3f pos -> do
    nidefawl.qubes.vec.Vector3f lastPos -> if
    nidefawl.qubes.vec.Vector3f mot -> for
    nidefawl.qubes.vec.Vector3f lastMot -> int
    nidefawl.qubes.vec.Vector3f renderPos -> new
    nidefawl.qubes.vec.Vector3f color -> try
    float intensity -> do
    float quadratic -> if
    float lightThreshold -> for
    float radius -> int
    int ticks -> do
    30:32:void setPos(nidefawl.qubes.vec.Vector3f) -> do
    34:39:void tickUpdate(nidefawl.qubes.world.WorldClient) -> do
    42:56:void updatePreRender(nidefawl.qubes.world.WorldClient,float) -> do
    59:67:void store(java.nio.FloatBuffer) -> do
nidefawl.qubes.logging.ErrorHandler -> llL1iJL1L11LL1Ji:
    nidefawl.qubes.logging.IErrorHandler handler -> do
    8:11:void setException(nidefawl.qubes.util.GameError) -> do
    13:14:void setHandler(nidefawl.qubes.logging.IErrorHandler) -> do
nidefawl.qubes.logging.IErrorHandler -> iJ1LllL1L1lljIL1:
    void setException(nidefawl.qubes.util.GameError) -> do
nidefawl.qubes.logging.LogBufferStream -> JiL1L1JiiJjIIj:
    java.io.ByteArrayOutputStream baos -> do
    java.io.PrintStream ps -> do
    17:21:void write(byte[],int,int) -> write
    25:26:void write(byte[]) -> write
    30:36:void flush() -> flush
    40:46:void close() -> close
    50:52:void write(int) -> write
    56:60:java.lang.String getLogString() -> do
nidefawl.qubes.meshing.BlockFace -> L1IjiJIjJiJill1L:
    nidefawl.qubes.meshing.BlockSurface bs -> do
    float[] v0 -> do
    float[] v1 -> if
    float[] v2 -> for
    float[] v3 -> int
    int[] du -> do
    int[] dv -> if
    byte[] normal -> do
    int faceDir -> do
    int[] pos -> for
    int w -> if
    int h -> for
    int[][] faceVDirections -> do
    int[][] faceVDirectionsNeg -> if
    27:30:int encNormal(int,int,int) -> do
    34:41:int encNegNormal(int,int,int) -> if
    47:123:void initDir() -> do
    241:247:int drawBasic(nidefawl.qubes.meshing.BlockFaceAttr,nidefawl.qubes.gl.VertexBuffer) -> do
    259:275:int drawShadowTextured(nidefawl.qubes.meshing.BlockFaceAttr,nidefawl.qubes.gl.VertexBuffer) -> if
    279:351:int draw(nidefawl.qubes.meshing.BlockFaceAttr,nidefawl.qubes.gl.VertexBuffer) -> for
    355:390:void setUV(nidefawl.qubes.meshing.BlockFaceVert,int) -> do
nidefawl.qubes.meshing.BlockFaceAttr -> llllJiJiL1iJllL1:
    java.lang.String[] attributes -> do
    nidefawl.qubes.meshing.BlockFaceVert v0 -> do
    nidefawl.qubes.meshing.BlockFaceVert v1 -> if
    nidefawl.qubes.meshing.BlockFaceVert v2 -> for
    nidefawl.qubes.meshing.BlockFaceVert v3 -> int
    nidefawl.qubes.meshing.BlockFaceVert[] v -> do
    boolean useGlobalRenderOffset -> do
    int tex -> do
    float xOff -> do
    float yOff -> if
    float zOff -> for
    int aoMask -> if
    int lightMaskSky -> for
    int lightMaskBlock -> int
    int type -> new
    boolean reverse -> if
    int faceDir -> try
    int normalMap -> byte
    int roughness -> case
    54:55:void setUseGlobalRenderOffset(boolean) -> do
    58:59:void setTex(int) -> do
    62:63:void setNormalMap(int) -> if
    66:73:void setOffset(float,float,float) -> do
    76:83:void setNormal(int,int,int) -> do
    86:88:void setLight(int,int) -> do
    93:130:void rotateUV(int) -> for
    133:147:void putSingleVert(int,nidefawl.qubes.gl.VertexBuffer) -> do
    149:156:void putShadowTexturedSingleVert(int,nidefawl.qubes.gl.VertexBuffer) -> if
    159:164:void putBasicSingleVert(int,nidefawl.qubes.gl.VertexBuffer) -> for
    203:229:void put(nidefawl.qubes.gl.VertexBuffer) -> do
    232:248:void putBasic(nidefawl.qubes.gl.VertexBuffer) -> if
    252:270:void putShadowTextured(nidefawl.qubes.gl.VertexBuffer) -> for
    273:274:void setAO(int) -> int
    276:277:void setRoughness(float) -> do
    280:284:void setType(int) -> new
    286:289:void setPass(int) -> try
    291:294:void flipNormal() -> do
    300:301:void setReverse(boolean) -> if
    307:308:void setFaceDir(int) -> byte
    313:313:int getFaceDir() -> do
    320:335:void calcNormal(nidefawl.qubes.vec.Vector3f) -> do
    372:375:int packNormal(nidefawl.qubes.vec.Vector3f) -> do
    379:379:boolean getReverse() -> do
    384:401:void maskLight(int,int,int,int,int) -> do
    404:404:int maskAO(int,int,int,int) -> do
    409:413:int mix_light(int,int,int,int) -> if
nidefawl.qubes.meshing.BlockFaceVert -> iJiJIjL1llllIjll:
    int rgba -> do
    float u -> do
    float v -> if
    float x -> for
    float y -> int
    float z -> new
    int dirOffset -> if
    int normal -> for
    int direction -> int
    int pass -> new
    20:26:void setColorRGBAF(float,float,float,float) -> do
    29:31:void setColorRGBA(int,float) -> do
    34:35:void setColorRGB(int) -> do
    38:40:void setUV(float,float) -> do
    43:46:void setPos(float,float,float) -> do
    49:50:void setFaceVertDir(int) -> if
    52:56:void setDirection(int,int,boolean) -> do
    58:59:void setNoDirection() -> do
    63:75:void setNormal(float,float,float) -> if
    81:82:void setPass(int) -> for
    88:92:void flipNormal() -> if
nidefawl.qubes.meshing.BlockRenderer -> iJiJiJIjIjJiIjll:
    int[][] offsets -> do
    nidefawl.qubes.meshing.BlockSurface bs -> do
    nidefawl.qubes.vec.AABBFloat bb -> do
    int shadowDrawMode -> do
    boolean extendFaces -> do
    nidefawl.qubes.world.IBlockWorld w -> do
    nidefawl.qubes.meshing.BlockFaceAttr attr -> do
    nidefawl.qubes.gl.VertexBuffer[] vbuffer -> do
    boolean[] wallDir -> do
    boolean[] fenceDir -> if
    int[] paneDir -> do
    int[] quarters -> if
    int[] quarters2 -> for
    nidefawl.qubes.vec.AABBFloat[] boxes -> do
    nidefawl.qubes.meshing.BlockSurface[] qSurfacesS -> do
    nidefawl.qubes.meshing.BlockSurface[] qSurfaces -> if
    int[] vPos_model -> int
    int[] vIdx_model -> new
    nidefawl.qubes.vec.Vector3f plantNormal -> do
    81:82:void setDefaultBounds() -> do
    89:92:void preRender(nidefawl.qubes.world.World,nidefawl.qubes.meshing.ChunkRenderCache,nidefawl.qubes.meshing.BlockFaceAttr) -> do
    98:100:void setBuffers(nidefawl.qubes.gl.VertexBuffer[],int) -> do
    108:179:int render(int,int,int) -> do
    192:206:int renderWaterLily(nidefawl.qubes.block.Block,int,int,int,int) -> new
    210:210:int setPaneConnections(nidefawl.qubes.world.IBlockWorld,int,int,int,int[]) -> do
    213:339:int renderPane(nidefawl.qubes.block.Block,int,int,int,int) -> try
    343:455:int renderTorch(nidefawl.qubes.block.Block,int,int,int) -> do
    459:459:int setWallConnections(nidefawl.qubes.world.IBlockWorld,int,int,int,boolean[]) -> do
    462:538:int renderWall(nidefawl.qubes.block.Block,int,int,int,int) -> do
    541:541:int setFenceConnections(nidefawl.qubes.world.IBlockWorld,int,int,int,boolean[]) -> if
    552:606:int renderFence(nidefawl.qubes.block.Block,int,int,int,int) -> if
    618:680:int renderVines(nidefawl.qubes.block.Block,int,int,int,int) -> for
    684:693:void renderXNeg(nidefawl.qubes.block.Block,float,float,float) -> do
    696:705:void renderXPos(nidefawl.qubes.block.Block,float,float,float) -> if
    707:716:void renderZNeg(nidefawl.qubes.block.Block,float,float,float) -> for
    718:727:void renderZPos(nidefawl.qubes.block.Block,float,float,float) -> int
    729:740:void renderYPos(nidefawl.qubes.block.Block,float,float,float) -> new
    744:753:void renderYNeg(nidefawl.qubes.block.Block,float,float,float) -> try
    756:777:int renderFace(nidefawl.qubes.block.Block,int,float,float,float,int) -> do
    787:795:void putSingleVert(nidefawl.qubes.block.Block,int,int) -> do
    798:802:void putTriIndex(nidefawl.qubes.block.Block,int,int[],int,int) -> do
    804:812:void putBuffer(nidefawl.qubes.block.Block,int) -> do
    815:898:int renderSlicedFaces(nidefawl.qubes.block.BlockSliced,int,int,int) -> do
    901:942:int renderPlantFlat(nidefawl.qubes.block.Block,int,int,int,int) -> byte
    946:950:int renderBlock(nidefawl.qubes.block.Block,int,int,int,int,int) -> do
    955:1001:int renderBlockModel(nidefawl.qubes.block.Block,int,int,int,int,int) -> if
    1023:1034:void flipFace() -> if
    1038:1062:void setFaceColorTexture(nidefawl.qubes.block.Block,int,int,int,int,nidefawl.qubes.meshing.BlockSurface,int,int) -> do
    1064:1066:void setFaceColor(nidefawl.qubes.block.Block,int,int,int,int,nidefawl.qubes.meshing.BlockSurface,int) -> do
    1075:1079:void setBlockBounds(nidefawl.qubes.block.Block,int,int,int) -> do
    1082:1088:int getAndRenderBlockFace(nidefawl.qubes.block.Block,int,int,int,int,int,int,int) -> do
    1093:1128:nidefawl.qubes.meshing.BlockSurface getSingleBlockSurface(nidefawl.qubes.block.Block,int,int,int,int,int,boolean,nidefawl.qubes.meshing.BlockSurface,int) -> do
    1140:1140:int renderDoublePlant(nidefawl.qubes.block.Block,int,int,int,int) -> case
    1145:1364:int renderPlant(nidefawl.qubes.block.Block,int,int,int,int) -> int
nidefawl.qubes.meshing.BlockSurface -> llllIjllllIjllJi:
    boolean transparent -> do
    int type -> do
    int face -> if
    int axis -> for
    int x -> int
    int y -> new
    int z -> try
    int pass -> byte
    boolean extraFace -> if
    boolean resolved -> for
    boolean calcLight -> int
    int maskedLightSky -> case
    int maskedLightBlock -> char
    int maskedAO -> else
    boolean isAirAbove -> new
    int texture -> goto
    boolean renderTypeTransition -> try
    int faceColor -> long
    int[][] offset -> do
    31:31:int maskAO(int,int,int,int) -> do
    35:39:int mix_light(int,int,int,int) -> if
    42:61:void maskLight(int,int,int,int,nidefawl.qubes.block.Block) -> do
    87:108:void calcAO(nidefawl.qubes.world.IBlockWorld) -> do
    111:118:int vertexAO(boolean,boolean,boolean) -> do
    130:137:boolean isOccludingAt(nidefawl.qubes.world.IBlockWorld,int,int,int) -> do
    141:191:void calcPosZ(nidefawl.qubes.world.IBlockWorld) -> if
    194:245:void calcNegZ(nidefawl.qubes.world.IBlockWorld) -> for
    248:297:void calcPosX(nidefawl.qubes.world.IBlockWorld) -> int
    299:348:void calcNegX(nidefawl.qubes.world.IBlockWorld) -> new
    351:402:void calcPosY(nidefawl.qubes.world.IBlockWorld) -> try
    404:454:void calcNegY(nidefawl.qubes.world.IBlockWorld) -> byte
    458:489:boolean mergeWith(nidefawl.qubes.meshing.ChunkRenderCache,nidefawl.qubes.meshing.BlockSurface) -> do
    493:520:void resolve(nidefawl.qubes.meshing.ChunkRenderCache) -> do
    523:540:void reset() -> do
    542:561:nidefawl.qubes.meshing.BlockSurface copy() -> do
nidefawl.qubes.meshing.BlockSurfaceAir -> IjjIL1Ji1LJijI1L:
    11:11:nidefawl.qubes.meshing.BlockSurface copy() -> do
nidefawl.qubes.meshing.BlockSurfaceHidden -> jIIjiJjI1LIjIjiJ:
    17:17:nidefawl.qubes.meshing.BlockSurface copy() -> do
nidefawl.qubes.meshing.ChunkRenderCache -> IjllJiL1iJjIJill:
    nidefawl.qubes.chunk.Chunk[] chunks -> do
    nidefawl.qubes.world.WorldClient world -> do
    int baseX -> do
    int baseZ -> if
    32:33:void set(int,int,nidefawl.qubes.chunk.Chunk) -> do
    36:36:nidefawl.qubes.chunk.Chunk get(int,int) -> do
    40:41:void flush() -> do
    44:48:int getData(int,int,int) -> do
    53:57:nidefawl.qubes.chunk.blockdata.BlockData getBlockData(int,int,int) -> do
    63:67:int getType(int,int,int) -> if
    72:76:int getWater(int,int,int) -> for
    81:85:int getLight(int,int,int) -> int
    95:133:boolean cache(nidefawl.qubes.world.WorldClient,nidefawl.qubes.render.region.MeshedRegion,int,int) -> do
    137:137:nidefawl.qubes.chunk.Chunk getWest() -> do
    140:140:nidefawl.qubes.chunk.Chunk getEast() -> if
    143:143:nidefawl.qubes.chunk.Chunk getNorth() -> for
    146:146:nidefawl.qubes.chunk.Chunk getSouth() -> int
    166:169:boolean isNormalBlock(int,int,int,int) -> do
    183:183:int getBiomeFaceColor(int,int,int,int,int,nidefawl.qubes.biome.BiomeColor) -> do
nidefawl.qubes.meshing.MeshThread -> L1IjL1jIjIllL1Ij:
    long sleepTime -> do
    java.util.concurrent.LinkedBlockingQueue queue -> do
    java.util.LinkedList results -> do
    java.util.LinkedList finish -> if
    boolean hasResults -> do
    boolean isRunning -> if
    boolean finished -> for
    nidefawl.qubes.meshing.MeshUpdateTask[] tasks -> do
    java.lang.Thread[] threads -> do
    int tasksRunning -> do
    int id -> if
    38:49:void init() -> do
    54:86:void run() -> run
    92:109:nidefawl.qubes.render.region.MeshedRegion finishTask() -> do
    114:123:boolean offer(nidefawl.qubes.world.WorldClient,nidefawl.qubes.render.region.MeshedRegion,int,int) -> do
    127:127:boolean busy() -> do
    131:131:boolean hasTasks() -> if
    135:140:nidefawl.qubes.meshing.MeshUpdateTask getNextTask() -> do
    146:147:void flush() -> if
    150:176:void stopThread() -> for
    179:179:boolean isRunning() -> for
    183:190:void cleanup() -> int
nidefawl.qubes.meshing.MeshUpdateTask -> L11LL1IjjIL1jIll:
    nidefawl.qubes.meshing.Mesher mesher -> do
    nidefawl.qubes.meshing.BlockRenderer blockRenderer -> do
    nidefawl.qubes.meshing.ChunkRenderCache ccache -> do
    nidefawl.qubes.meshing.BlockFaceAttr attr -> do
    int worldInstance -> do
    boolean meshed -> do
    nidefawl.qubes.render.region.MeshedRegion mr -> do
    nidefawl.qubes.gl.VertexBuffer[] vbuffer -> do
    int shadowDrawMode -> if
    46:54:boolean prepare(nidefawl.qubes.world.WorldClient,nidefawl.qubes.render.region.MeshedRegion,int,int) -> do
    58:100:boolean finish(int) -> do
    104:104:boolean isValid(int) -> if
    108:171:boolean updateFromThread() -> do
    176:176:nidefawl.qubes.render.region.MeshedRegion getRegion() -> do
    180:180:void destroy() -> do
nidefawl.qubes.meshing.Mesher -> IjIjIjjIllL1jIjI:
    int[] dims -> do
    nidefawl.qubes.meshing.BlockSurface[] mask2 -> do
    nidefawl.qubes.meshing.BlockSurfaceAir air -> do
    nidefawl.qubes.meshing.BlockSurfaceHidden hidden -> do
    short[] renderTypeBlocks -> do
    int nextBlockIDX -> for
    nidefawl.qubes.meshing.BlockSurface[] scratchPad -> if
    int scratchpadidx -> do
    java.util.List[] meshes -> do
    nidefawl.qubes.meshing.BlockSurface bs1 -> do
    nidefawl.qubes.meshing.BlockSurface bs2 -> if
    nidefawl.qubes.vec.AABBFloat fullBB -> do
    nidefawl.qubes.meshing.BlockSurface[] extraWaterFaces -> for
    int extraIdx -> int
    nidefawl.qubes.meshing.ChunkRenderCache cache -> do
    int strategy -> new
    int yPos -> try
    int ySlice -> byte
    int avgUsage -> if
    45:55:int computeHeight(int,int,int,int,int,int,nidefawl.qubes.meshing.BlockSurface) -> do
    65:172:void setMask2(int,int[],int[],int) -> do
    181:202:void mesh(nidefawl.qubes.meshing.ChunkRenderCache,int) -> do
    205:309:void meshRound(nidefawl.qubes.meshing.ChunkRenderCache) -> do
    314:386:nidefawl.qubes.meshing.BlockSurface getBlockSurface(int,int,int,int,int) -> do
    391:393:nidefawl.qubes.meshing.BlockSurface next() -> do
    399:399:java.util.List getMeshes(int) -> do
    408:408:int getRenderType1Blocks() -> do
    418:418:short getBlockPos(int) -> do
nidefawl.qubes.models.BlockModelManager -> JilllliJiJJiJiL1:
    nidefawl.qubes.models.BlockModelManager instance -> do
    java.util.HashMap models -> do
    java.util.HashMap textures -> if
    20:20:nidefawl.qubes.models.BlockModelManager getInstance() -> do
    28:28:void init() -> do
    33:87:void reload() -> if
nidefawl.qubes.models.EntityModel -> iJjIL1IjIjJilljI:
    int HIGHEST_MODEL_ID -> do
    nidefawl.qubes.models.EntityModel[] registeredmodels -> if
    short[] registeredmodelIds -> do
    nidefawl.qubes.models.EntityModel[] models -> do
    nidefawl.qubes.models.EntityModel modelPlayerMale -> do
    nidefawl.qubes.models.EntityModel modelPlayerFemale -> if
    nidefawl.qubes.models.EntityModel modelArcher -> for
    nidefawl.qubes.models.EntityModel modelWarrior -> int
    nidefawl.qubes.models.EntityModel modelSkeleton -> new
    nidefawl.qubes.models.EntityModel modelZombie -> try
    nidefawl.qubes.models.EntityModel modelDemon -> byte
    nidefawl.qubes.models.EntityModel modelCat -> case
    nidefawl.qubes.models.EntityModel modelCow -> char
    nidefawl.qubes.models.EntityModel modelChicken -> else
    nidefawl.qubes.models.EntityModel modelDog -> goto
    nidefawl.qubes.models.EntityModel modelDuck -> long
    nidefawl.qubes.models.EntityModel modelGoat -> this
    nidefawl.qubes.models.EntityModel modelPig -> void
    nidefawl.qubes.models.EntityModel modelPony -> break
    nidefawl.qubes.models.EntityModel modelPuppy -> catch
    nidefawl.qubes.models.EntityModel modelSheep -> class
    nidefawl.qubes.models.EntityModel modelTest -> const
    int id -> if
    java.lang.String modelPath -> do
    java.lang.String name -> if
    nidefawl.qubes.models.qmodel.loader.ModelLoaderQModel loader -> do
    nidefawl.qubes.models.qmodel.ModelQModel model -> do
    java.util.List modelOptions -> do
    java.util.ArrayList actions -> do
    59:72:void preInit() -> do
    75:75:void postInit() -> if
    94:96:int addOption(nidefawl.qubes.models.ModelOption) -> do
    100:101:nidefawl.qubes.models.EntityModel setModelPath(java.lang.String) -> do
    105:105:java.lang.String getModelFile() -> do
    void setPose(nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelProperties,float,float) -> do
    121:124:void setModel(nidefawl.qubes.models.qmodel.loader.ModelLoaderQModel) -> do
    127:127:void onLoad(nidefawl.qubes.models.qmodel.ModelQModel) -> do
    130:130:java.lang.String getName() -> if
    135:140:nidefawl.qubes.models.qmodel.QModelObject getObject(java.util.List,java.lang.String) -> do
    143:143:java.util.List getModelOptions() -> do
    147:147:java.util.List getActions() -> if
    151:151:void setActions(nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelProperties,float,float) -> if
    153:153:nidefawl.qubes.models.qmodel.animation.QModelAction getIdle() -> do
nidefawl.qubes.models.EntityModelAnimal -> iJL1IjJiJiL1jIJi:
    nidefawl.qubes.models.qmodel.QModelObject main -> do
    nidefawl.qubes.models.ModelOption texSkin -> do
    nidefawl.qubes.vec.Matrix4f matDeform -> if
    nidefawl.qubes.vec.Matrix4f rotation -> do
    30:36:void setActions(nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelProperties,float,float) -> if
    40:71:void setPose(nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelProperties,float,float) -> do
    74:109:void onLoad(nidefawl.qubes.models.qmodel.ModelQModel) -> do
nidefawl.qubes.models.EntityModelArcher -> jIiJL1JiJijIiJjI:
    nidefawl.qubes.models.ModelOption texSkin -> do
    nidefawl.qubes.models.ModelOption modelHelmet -> if
    nidefawl.qubes.models.ModelOption texHelmet -> for
    nidefawl.qubes.models.ModelOption modelShoulders -> int
    nidefawl.qubes.models.ModelOption texShoulders -> new
    nidefawl.qubes.models.ModelOption modelBracers -> try
    nidefawl.qubes.models.ModelOption texBracers -> byte
    nidefawl.qubes.models.ModelOption modelShield -> case
    nidefawl.qubes.models.ModelOption texShield -> char
    nidefawl.qubes.models.ModelOption modelWeapon -> else
    boolean isMale -> do
    java.util.List listBracers -> if
    java.util.List listShoulders -> for
    java.util.List listShields -> int
    java.util.List listHelmets -> new
    java.util.List listWeapon -> try
    java.util.Map optNameToMat -> do
    java.util.Map optNameToOptTexMap -> if
    java.util.Map defaultSettings -> for
    nidefawl.qubes.models.qmodel.QModelObject main_0 -> do
    boolean isArcher -> if
    nidefawl.qubes.models.qmodel.animation.QModelAction idle1 -> do
    nidefawl.qubes.models.qmodel.animation.QModelAction walk -> if
    nidefawl.qubes.models.qmodel.animation.QModelAction idle2 -> for
    59:112:void onLoad(nidefawl.qubes.models.qmodel.ModelQModel) -> do
    116:137:void setActions(nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelProperties,float,float) -> if
    140:177:void setPose(nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelProperties,float,float) -> do
    179:186:void attach(nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelProperties,java.util.List,nidefawl.qubes.models.ModelOption,nidefawl.qubes.models.ModelOption) -> do
    188:197:void attach2(nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelProperties,java.util.List,nidefawl.qubes.models.ModelOption,nidefawl.qubes.models.ModelOption) -> if
nidefawl.qubes.models.EntityModelDemon -> IjIjJiIjL1jIIjL1:
    boolean isMale -> do
    nidefawl.qubes.models.ModelOption modelArmor -> do
    nidefawl.qubes.models.ModelOption texSkin -> if
    java.util.ArrayList armors -> if
    nidefawl.qubes.models.qmodel.QModelObject main -> do
    nidefawl.qubes.models.qmodel.animation.QModelAction walk -> do
    nidefawl.qubes.models.qmodel.animation.QModelAction run -> if
    nidefawl.qubes.models.qmodel.animation.QModelAction idle1 -> for
    33:77:void onLoad(nidefawl.qubes.models.qmodel.ModelQModel) -> do
    81:102:void setActions(nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelProperties,float,float) -> if
    105:136:void setPose(nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelProperties,float,float) -> do
nidefawl.qubes.models.EntityModelManager -> IjL11LL1iJ1LiJll:
    nidefawl.qubes.models.EntityModelManager instance -> do
    java.util.HashMap models -> do
    19:19:nidefawl.qubes.models.EntityModelManager getInstance() -> do
    29:69:void reload() -> do
nidefawl.qubes.models.EntityModelPlayer -> jIjIllllL1IjL1L1:
    nidefawl.qubes.vec.Matrix4f modelMat -> do
    nidefawl.qubes.vec.Matrix4f normalMat -> if
    boolean isMale -> do
    java.util.ArrayList hats -> if
    java.util.ArrayList beards -> for
    java.util.ArrayList hairs -> int
    java.util.ArrayList bags -> new
    nidefawl.qubes.models.ModelOption modelSize -> do
    nidefawl.qubes.models.ModelOption texSkin -> if
    nidefawl.qubes.models.ModelOption texFace -> for
    nidefawl.qubes.models.ModelOption modelHair -> int
    nidefawl.qubes.models.ModelOption texHair -> new
    nidefawl.qubes.models.ModelOption modelBeard -> try
    nidefawl.qubes.models.ModelOption texBeard -> byte
    nidefawl.qubes.models.ModelOption modelHat -> case
    nidefawl.qubes.models.ModelOption texHat -> char
    nidefawl.qubes.models.ModelOption modelBag -> else
    nidefawl.qubes.models.ModelOption texBag -> goto
    nidefawl.qubes.models.qmodel.QModelObject main_0 -> do
    nidefawl.qubes.models.qmodel.QModelObject main_1 -> if
    nidefawl.qubes.models.qmodel.QModelObject main_2 -> for
    nidefawl.qubes.models.qmodel.QModelObject[] body -> do
    nidefawl.qubes.models.qmodel.animation.QModelAction run -> do
    nidefawl.qubes.models.qmodel.animation.QModelAction jump -> if
    nidefawl.qubes.models.qmodel.animation.QModelAction hit1 -> for
    nidefawl.qubes.models.qmodel.animation.QModelAction idle -> int
    50:50:nidefawl.qubes.models.qmodel.animation.QModelAction getIdle() -> do
    66:71:nidefawl.qubes.models.qmodel.QModelObject getObject(java.util.List,java.lang.String) -> do
    75:174:void onLoad(nidefawl.qubes.models.qmodel.ModelQModel) -> do
    178:200:void setActions(nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelProperties,float,float) -> if
    205:266:void setPose(nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelProperties,float,float) -> do
    271:278:void attach(nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelProperties,java.util.ArrayList,nidefawl.qubes.models.ModelOption,nidefawl.qubes.models.ModelOption) -> do
nidefawl.qubes.models.EntityModelSkeleton -> jIjIllJijIIj1LIj:
    boolean isMale -> do
    nidefawl.qubes.models.ModelOption modelSel -> do
    nidefawl.qubes.models.ModelOption texSkin -> if
    java.util.List modelList -> if
    nidefawl.qubes.models.qmodel.animation.QModelAction walk -> do
    nidefawl.qubes.models.qmodel.animation.QModelAction idle1 -> if
    nidefawl.qubes.models.qmodel.animation.QModelAction idle2 -> for
    nidefawl.qubes.models.qmodel.animation.QModelAction attack1 -> int
    32:75:void onLoad(nidefawl.qubes.models.qmodel.ModelQModel) -> do
    79:89:void setActions(nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelProperties,float,float) -> if
    93:121:void setPose(nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelProperties,float,float) -> do
nidefawl.qubes.models.EntityModelTest -> L1jIlllliJJiJiJi:
    nidefawl.qubes.vec.Matrix4f modelMat -> do
    nidefawl.qubes.vec.Matrix4f normalMat -> if
    boolean isMale -> do
    java.util.ArrayList headThings -> if
    nidefawl.qubes.models.ModelOption modelHeadThing -> do
    nidefawl.qubes.models.qmodel.QModelObject main_0 -> do
    nidefawl.qubes.models.qmodel.QModelObject test1 -> if
    34:39:nidefawl.qubes.models.qmodel.QModelObject getObject(java.util.List,java.lang.String) -> do
    43:59:void onLoad(nidefawl.qubes.models.qmodel.ModelQModel) -> do
    64:91:void setPose(nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelProperties,float,float) -> do
    94:102:void attach(nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelProperties,java.util.ArrayList,nidefawl.qubes.models.ModelOption,nidefawl.qubes.models.ModelOption) -> do
nidefawl.qubes.models.EntityModelZombie -> iJL1lliJjIllIj1L:
    boolean isMale -> do
    nidefawl.qubes.models.ModelOption modelSel -> do
    nidefawl.qubes.models.ModelOption texSkin -> if
    java.util.List modelList -> if
    nidefawl.qubes.models.qmodel.animation.QModelAction walk -> do
    nidefawl.qubes.models.qmodel.animation.QModelAction walk2 -> if
    nidefawl.qubes.models.qmodel.animation.QModelAction idle1 -> for
    nidefawl.qubes.models.qmodel.animation.QModelAction idle2 -> int
    35:67:void onLoad(nidefawl.qubes.models.qmodel.ModelQModel) -> do
    70:80:void setActions(nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelProperties,float,float) -> if
    85:113:void setPose(nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelProperties,float,float) -> do
nidefawl.qubes.models.ItemModel -> iJiJIjiJiJll1L1L:
    int HIGHEST_MODEL_ID -> do
    nidefawl.qubes.models.ItemModel[] registeredmodels -> if
    short[] registeredmodelIds -> do
    nidefawl.qubes.models.ItemModel[] model -> do
    nidefawl.qubes.models.ItemModel modelPickaxe -> do
    nidefawl.qubes.models.ItemModel modelAxe -> if
    int id -> if
    java.lang.String[] models -> do
    java.lang.String[] textures -> if
    nidefawl.qubes.models.qmodel.ModelQModel[] loadedModels -> do
    java.lang.String name -> do
    33:54:void preInit() -> do
    57:57:void postInit() -> if
    75:76:nidefawl.qubes.models.ItemModel setModels(java.lang.String[]) -> do
    80:80:java.lang.String[] getModels() -> do
nidefawl.qubes.models.ItemModelManager -> iJ1LjIIjjIL1JiiJ:
    nidefawl.qubes.models.ItemModelManager instance -> do
    java.util.HashMap models -> do
    22:22:nidefawl.qubes.models.ItemModelManager getInstance() -> do
    29:29:void init() -> do
    34:75:void reload() -> if
nidefawl.qubes.models.ModelOption -> iJ1LJiL1iJjIIj1L:
    java.lang.String name -> do
    java.lang.String[] options -> do
    nidefawl.qubes.models.EntityModel eModel -> do
    int id -> do
    int defaultVal -> if
    15:16:nidefawl.qubes.models.ModelOption setOptions(java.lang.String[]) -> do
    22:35:nidefawl.qubes.models.ModelOption setOptionCount(java.lang.String,int) -> do
    38:38:java.lang.String getTextVal(int) -> do
    41:41:java.lang.String[] getOptions() -> do
    44:44:int getId() -> do
    47:47:java.lang.String getName() -> do
    50:51:void setDefaultVal(int) -> do
    53:53:int getDefaultVal() -> if
nidefawl.qubes.models.qmodel.ModelBlock -> Ij1L1LJijIlljIJi:
    nidefawl.qubes.models.qmodel.QModelGroup[] faceGroups -> do
    nidefawl.qubes.gl.VertexBuffer vBuf -> do
    boolean needsDraw -> do
    long reRender -> do
    nidefawl.qubes.vec.Vector3f tmpVec -> do
    70:120:void render(int,int,float) -> do
nidefawl.qubes.models.qmodel.ModelQModel -> lllliJJijIllJijI:
    nidefawl.qubes.models.qmodel.loader.ModelLoaderQModel loader -> do
    nidefawl.qubes.models.qmodel.ModelQModel$ModelRenderObject[] objects -> do
    nidefawl.qubes.gl.VertexBuffer vbuf -> if
    nidefawl.qubes.vec.Vector3f tmpVec -> if
    nidefawl.qubes.vec.Vector3f tmpVec2 -> for
    nidefawl.qubes.vec.Matrix4f tmpMat1 -> do
    nidefawl.qubes.vec.Matrix4f tmpMat2 -> if
    boolean needsDraw -> if
    82:92:void release() -> do
    103:103:void animate(nidefawl.qubes.models.qmodel.QModelProperties,float,float) -> do
    109:109:void animateNodes(nidefawl.qubes.models.qmodel.QModelProperties,float,float) -> if
    117:117:void setHeadOrientation(float,float) -> do
    void render(int,int,float) -> do
    125:191:void renderRestModel(nidefawl.qubes.models.qmodel.QModelObject,nidefawl.qubes.models.qmodel.QModelGroup,int) -> do
    194:209:void bindTextures(int) -> do
    213:217:nidefawl.qubes.models.qmodel.ModelQModel$ModelRenderObject getGroup(int) -> do
    221:221:java.util.List getObjects() -> do
nidefawl.qubes.models.qmodel.ModelQModel$ModelRenderGroup -> JiIj1LL1Ij1LJiiJ:
    nidefawl.qubes.gl.GLTriBuffer gpuBufRest -> do
    nidefawl.qubes.gl.GLTriBuffer gpuBuf -> if
    long reRender -> do
    48:56:void release() -> do
nidefawl.qubes.models.qmodel.ModelQModel$ModelRenderObject -> IjL1llL1L1L11Lll:
    java.util.List list -> do
    61:65:void release() -> do
    67:70:nidefawl.qubes.models.qmodel.ModelQModel$ModelRenderGroup getGroup(int) -> do
nidefawl.qubes.models.qmodel.ModelRigged -> IjiJllL1iJiJiJll:
    nidefawl.qubes.models.qmodel.QModelPoseBone rootJoint -> do
    java.util.ArrayList poseBones -> do
    nidefawl.qubes.models.qmodel.QModelPoseBone head -> if
    nidefawl.qubes.models.qmodel.QModelPoseBone neck -> for
    nidefawl.qubes.models.qmodel.QModelNode weaponSlot -> do
    76:80:nidefawl.qubes.models.qmodel.QModelPoseBone getPoseBone(nidefawl.qubes.models.qmodel.QModelBone) -> do
    88:100:void animate(nidefawl.qubes.models.qmodel.QModelProperties,float,float) -> do
    106:123:void animateNodes(nidefawl.qubes.models.qmodel.QModelProperties,float,float) -> if
    130:139:nidefawl.qubes.vec.Matrix4f buildFinalPose(nidefawl.qubes.models.qmodel.QModelObject,nidefawl.qubes.models.qmodel.QModelVertex) -> do
    159:250:void render(int,int,float) -> do
    256:362:void setHeadOrientation(float,float) -> do
nidefawl.qubes.models.qmodel.ModelStatic -> JiIjL1llL1jIJiL1:
    30:79:void render(int,int,float) -> do
nidefawl.qubes.models.qmodel.QModelAbstractNode -> llll1LjIll1L1LiJ:
    12:20:int readParentType(nidefawl.qubes.models.qmodel.loader.ModelLoaderQModel) -> do
    nidefawl.qubes.vec.Matrix4f getMatDeform() -> do
    nidefawl.qubes.vec.Matrix4f getMatDeformNormal() -> if
nidefawl.qubes.models.qmodel.QModelBone -> L1jIL1L1jIiJll1L:
    int idx -> do
    int flags -> if
    java.lang.String name -> do
    java.lang.String parentName -> if
    nidefawl.qubes.vec.Matrix4f matRest -> do
    nidefawl.qubes.vec.Matrix4f matRestInv -> if
    java.util.List children -> do
    nidefawl.qubes.vec.Vector3f tailLocal -> do
    nidefawl.qubes.models.qmodel.QModelBone parent -> do
    nidefawl.qubes.models.qmodel.QModelPoseBone posebone -> do
    float boneLength -> do
    57:58:void addChild(nidefawl.qubes.models.qmodel.QModelBone) -> do
    79:79:java.lang.String stringInfo() -> do
    83:83:java.lang.String toString() -> toString
nidefawl.qubes.models.qmodel.QModelGroup -> JiIj1LjIJiJi:
    int idx -> do
    int flags -> if
    java.lang.String name -> do
    int[] triIdx -> do
    int materialIdx -> for
    nidefawl.qubes.models.qmodel.QModelMaterial material -> do
    java.util.List listTri -> do
    boolean isSkinned -> do
    46:46:java.lang.String toString() -> toString
nidefawl.qubes.models.qmodel.QModelMaterial -> llllllL11LL1L1ll:
    java.lang.String name -> do
    nidefawl.qubes.vec.Vector4f ambient -> do
    nidefawl.qubes.vec.Vector4f diffuse -> if
    nidefawl.qubes.vec.Vector4f specular -> for
    nidefawl.qubes.vec.Vector4f emissive -> int
    float specular_hardness -> do
    float transparency -> if
    int mode -> do
    int idx -> if
    int[] textureIdxs -> do
    nidefawl.qubes.models.qmodel.QModelTexture[] qTextures -> do
    nidefawl.qubes.models.qmodel.QModelTexture bound -> do
    54:61:void resolveTextures(nidefawl.qubes.models.qmodel.loader.ModelLoaderQModel) -> do
    64:65:void setBoundTexture(nidefawl.qubes.models.qmodel.QModelTexture) -> do
    69:75:nidefawl.qubes.models.qmodel.QModelTexture getBoundTexture() -> do
nidefawl.qubes.models.qmodel.QModelNode -> jIJilliJIjIjiJJi:
    int idx -> do
    java.lang.String name -> do
    java.lang.String parent_name -> if
    int parent_type -> if
    nidefawl.qubes.models.qmodel.QModelBone attachmentBone -> do
    nidefawl.qubes.models.qmodel.QModelAbstractNode attachmentEmpty -> do
    nidefawl.qubes.vec.Matrix4f matDeform -> do
    nidefawl.qubes.vec.Matrix4f matDeformNormal -> if
    nidefawl.qubes.vec.Matrix4f localMat -> for
    42:42:java.lang.String toString() -> toString
    47:53:void resolveParent(nidefawl.qubes.models.qmodel.loader.ModelLoaderQModel) -> do
    58:66:void updateNormalMat() -> do
    77:77:nidefawl.qubes.models.qmodel.QModelBone getAttachmentBone() -> do
    83:83:nidefawl.qubes.vec.Matrix4f getMatDeform() -> do
    89:89:nidefawl.qubes.vec.Matrix4f getMatDeformNormal() -> if
nidefawl.qubes.models.qmodel.QModelObject -> L1lliJL11LJiiJll:
    int idx -> do
    int type -> if
    java.lang.String name -> do
    java.lang.String parent_name -> if
    int parent_type -> for
    nidefawl.qubes.models.qmodel.QModelBone attachmentBone -> do
    nidefawl.qubes.models.qmodel.QModelAbstractNode attachmentEmpty -> do
    nidefawl.qubes.vec.Matrix4f matDeform -> do
    nidefawl.qubes.vec.Matrix4f matDeformNormal -> if
    java.util.List listVertex -> do
    java.util.List listTri -> if
    java.util.List listGroups -> for
    java.util.List listBones -> int
    boolean isSkinned -> do
    75:75:java.lang.String toString() -> toString
    79:113:void flattenBoneList(nidefawl.qubes.models.qmodel.loader.ModelLoaderQModel) -> do
    116:134:void normalizeWeights(nidefawl.qubes.models.qmodel.loader.ModelLoaderQModel) -> if
    137:148:int getMinBone(nidefawl.qubes.models.qmodel.QModelTriangle) -> do
    153:164:int getMaxBone(nidefawl.qubes.models.qmodel.QModelTriangle) -> if
    169:197:void sortVertices(nidefawl.qubes.models.qmodel.loader.ModelLoaderQModel) -> for
    201:207:void resolveParent(nidefawl.qubes.models.qmodel.loader.ModelLoaderQModel) -> int
    211:217:void resolveGroupMaterials(nidefawl.qubes.models.qmodel.loader.ModelLoaderQModel) -> new
    221:225:void bindTextureIdx(int,int) -> do
    228:236:void updateNormalMat() -> do
    241:241:nidefawl.qubes.models.qmodel.QModelAbstractNode getAttachementNode() -> do
    247:247:nidefawl.qubes.models.qmodel.QModelBone getAttachmentBone() -> do
    251:251:nidefawl.qubes.vec.Matrix4f getMatDeform() -> do
    257:257:nidefawl.qubes.vec.Matrix4f getMatDeformNormal() -> if
    261:262:void setAttachmentEmpty(nidefawl.qubes.models.qmodel.QModelAbstractNode) -> do
nidefawl.qubes.models.qmodel.QModelObject$1 -> jIjIIj1LiJ1LiJ:
    nidefawl.qubes.models.qmodel.QModelObject this$0 -> do
    172:194:int compare(nidefawl.qubes.models.qmodel.QModelTriangle,nidefawl.qubes.models.qmodel.QModelTriangle) -> do
    169:169:int compare(java.lang.Object,java.lang.Object) -> compare
nidefawl.qubes.models.qmodel.QModelPoseBone -> JiIjIjJi1LiJll1L:
    java.util.List children -> do
    nidefawl.qubes.vec.Matrix4f matDeform -> do
    nidefawl.qubes.vec.Matrix4f matDeformNormal -> if
    nidefawl.qubes.models.qmodel.QModelBone restbone -> do
    nidefawl.qubes.models.qmodel.QModelPoseBone parent -> do
    boolean animate -> do
    35:43:void updateNormalMat() -> do
    48:49:void addChild(nidefawl.qubes.models.qmodel.QModelPoseBone) -> do
    66:66:nidefawl.qubes.vec.Matrix4f getMatRest() -> do
    78:78:nidefawl.qubes.vec.Vector3f getTailLocal() -> do
    89:89:java.lang.String toString() -> toString
nidefawl.qubes.models.qmodel.QModelProperties -> IjIjIjiJL1L11L:
    int[] properties -> do
    nidefawl.qubes.models.qmodel.animation.QModelAction[] actions -> do
    float[] actionOffsets -> do
    float[] actionSpeed -> if
    nidefawl.qubes.vec.Vector3f pos -> do
    nidefawl.qubes.vec.Vector3f rot -> if
    nidefawl.qubes.entity.Entity entity -> do
    nidefawl.qubes.models.qmodel.ModelQModel modelAtt -> do
    25:25:int getOption(int) -> do
    34:35:void setRot(nidefawl.qubes.vec.Vector3f) -> do
    38:39:void setPos(nidefawl.qubes.vec.Vector3f) -> if
    41:42:void setEntity(nidefawl.qubes.entity.Entity) -> do
    45:46:void setActionOffset(int,float) -> do
    48:49:void setActionSpeed(int,float) -> if
    51:54:void setAction(int,nidefawl.qubes.models.qmodel.animation.QModelAction) -> do
    56:69:int getChannelIdx(java.lang.String) -> do
    72:72:nidefawl.qubes.models.qmodel.animation.QAnimationChannel getActionChannel(int,java.lang.String) -> do
    75:75:nidefawl.qubes.models.qmodel.animation.QModelAction getAction(int) -> do
    78:78:float getActionOffset(int) -> do
    81:81:float getActionSpeed(int) -> if
    84:85:void setModelAtt(nidefawl.qubes.models.qmodel.ModelQModel) -> do
    87:87:nidefawl.qubes.models.qmodel.ModelQModel getModelAtt() -> do
    90:91:void setOption(int,int) -> do
    93:94:void setProperties(int[]) -> do
nidefawl.qubes.models.qmodel.QModelTexture -> IjIjL1JiJiL1L1ll:
    int idx -> do
    java.lang.String name -> do
    java.lang.String path -> if
    int glid -> if
    27:33:int get() -> do
    37:39:void release() -> do
nidefawl.qubes.models.qmodel.QModelTriangle -> L11LL1L1jIiJJiL1:
    int idx -> do
    int[] vertIdx -> do
    nidefawl.qubes.vec.Vector3f[] normal -> do
    float[][] texCoord -> do
    int smoothing -> if
    int group -> for
    int flags -> int
    54:54:java.lang.String toString() -> toString
nidefawl.qubes.models.qmodel.QModelType -> iJjI1LiJ1LjIL1Ji:
    nidefawl.qubes.models.qmodel.QModelType STATIC -> do
    nidefawl.qubes.models.qmodel.QModelType RIGGED -> if
    nidefawl.qubes.models.qmodel.QModelType BLOCK -> for
    nidefawl.qubes.models.qmodel.QModelType[] $VALUES -> do
    10:10:nidefawl.qubes.models.qmodel.QModelType[] values() -> values
    10:10:nidefawl.qubes.models.qmodel.QModelType valueOf(java.lang.String) -> valueOf
    18:26:nidefawl.qubes.models.qmodel.QModelType get(int) -> do
nidefawl.qubes.models.qmodel.QModelVertex -> jIJill1LiJjIlliJ:
    int idx -> do
    int flags -> if
    int refCount -> for
    int[] bones -> do
    float[] weights -> do
    int numBones -> int
nidefawl.qubes.models.qmodel.animation.KeyFrame -> IjIjJiIjjIL1jIL1:
    float time -> do
    int idx -> do
    nidefawl.qubes.models.qmodel.animation.KeyFrame next -> do
    26:26:int getIdx() -> do
    32:32:nidefawl.qubes.models.qmodel.animation.KeyFrame getNext() -> do
    35:35:nidefawl.qubes.models.qmodel.animation.KeyFrame copy() -> if
nidefawl.qubes.models.qmodel.animation.QAnimationChannel -> jIL1IjIjlliJlljI:
    nidefawl.qubes.models.qmodel.animation.KeyFrame[] frames -> do
    float animLength -> do
    float frameLength -> if
    float startOffset -> for
    int priority -> do
    40:57:nidefawl.qubes.models.qmodel.animation.KeyFrame getFrameAt(int,float) -> do
    63:72:void addFrame(nidefawl.qubes.models.qmodel.animation.KeyFrame) -> do
    74:84:nidefawl.qubes.models.qmodel.animation.QAnimationChannel split(int,int) -> do
    87:118:boolean setDeform(int,float,nidefawl.qubes.vec.Matrix4f) -> do
nidefawl.qubes.models.qmodel.animation.QModelAction -> IjIjllL1llL1Ij:
    int idx -> do
    int flags -> if
    java.lang.String name -> do
    float fps -> do
    int startFrame -> for
    int endFrame -> int
    java.util.Map map -> do
    nidefawl.qubes.models.qmodel.animation.QAnimationChannel armatureAnim -> do
    float lenTime -> if
    71:87:nidefawl.qubes.models.qmodel.animation.QModelAction split(java.lang.String,int,int) -> do
nidefawl.qubes.models.qmodel.animation.QModelKeyFrameMatrix -> Ji1LL1lljIL11LJi:
    nidefawl.qubes.vec.Matrix4f mat -> do
    32:33:nidefawl.qubes.models.qmodel.animation.KeyFrame copy() -> if
nidefawl.qubes.models.qmodel.loader.ModelLoaderQModel -> JiiJJi1LllJiiJjI:
    java.util.List listObjects -> do
    java.util.List listMaterials -> if
    java.util.List listTextures -> for
    java.util.List listBones -> int
    java.util.List listActions -> new
    java.util.List listEmpties -> try
    java.lang.String path -> do
    nidefawl.qubes.models.qmodel.QModelType modelType -> do
    54:147:void loadModel(nidefawl.qubes.assets.AssetBinary) -> do
    181:187:nidefawl.qubes.models.qmodel.QModelBone findJoint(java.lang.String) -> do
    190:196:nidefawl.qubes.models.qmodel.QModelNode findEmpty(java.lang.String) -> do
    211:211:nidefawl.qubes.models.qmodel.ModelBlock buildBlockModel() -> do
    215:220:nidefawl.qubes.models.qmodel.ModelQModel buildModel() -> do
    225:231:java.lang.String getModelName() -> do
nidefawl.qubes.models.qmodel.loader.ModelLoaderQModel$1 -> JillllJiJiIj1L:
    int[] $SwitchMap$nidefawl$qubes$models$qmodel$QModelType -> do
nidefawl.qubes.models.render.QModelBatchedRender -> JiL1IjJiIjL1iJll:
    nidefawl.qubes.shader.Shader[] shaderSkinned -> do
    nidefawl.qubes.shader.Shader[] shader -> if
    boolean startup -> for
    java.nio.FloatBuffer bufBoneMat -> do
    java.nio.FloatBuffer bufNormalMat -> if
    java.nio.FloatBuffer bufModelMat -> for
    nidefawl.qubes.models.render.QModelBatchedRender$QModelRenderSubList[] tmpLists -> do
    java.util.List subLists -> do
    nidefawl.qubes.vec.Matrix4f tmpMat1 -> do
    int nxtIdx -> do
    boolean isModelViewer -> do
    int pass -> if
    int shadowVP -> for
    int renderer -> int
    nidefawl.qubes.gl.BufferedMatrix mvp -> for
    nidefawl.qubes.vec.Matrix4f tmpMatrix1 -> if
    nidefawl.qubes.vec.Matrix4f tmpMatrix2 -> for
    52:58:void setPass(int,int) -> do
    60:61:void setRenderer(int) -> do
    68:98:void render(float) -> do
    102:144:void initShaders() -> do
    147:153:void begin() -> if
    156:162:void end() -> for
    166:166:java.nio.FloatBuffer getBufModelMat() -> do
    170:170:java.nio.FloatBuffer getBufNormalMat() -> if
    174:174:java.nio.FloatBuffer getBufBoneMat() -> for
    298:303:void reset() -> int
    307:311:void addObject(nidefawl.qubes.models.qmodel.QModelObject) -> do
    314:328:nidefawl.qubes.models.render.QModelBatchedRender$QModelRenderSubList getSubList(nidefawl.qubes.models.qmodel.QModelObject,nidefawl.qubes.models.qmodel.QModelGroup) -> do
    337:338:void init() -> new
    340:345:void setForwardRenderMVP(nidefawl.qubes.gl.BufferedMatrix) -> do
nidefawl.qubes.models.render.QModelBatchedRender$1 -> ll1LJi1LJijIjI1L:
    int val$iRENDER -> do
    nidefawl.qubes.models.render.QModelBatchedRender this$0 -> do
    111:113:java.lang.String getDefinition(java.lang.String) -> do
nidefawl.qubes.models.render.QModelBatchedRender$2 -> jIiJL1jIIjiJJijI:
    int val$iRENDER -> do
    nidefawl.qubes.models.render.QModelBatchedRender this$0 -> do
    119:121:java.lang.String getDefinition(java.lang.String) -> do
nidefawl.qubes.models.render.QModelBatchedRender$QModelRenderSubList -> L1ll1LiJJiiJllL1:
    boolean isSkinned -> do
    nidefawl.qubes.models.qmodel.ModelQModel model -> do
    nidefawl.qubes.models.qmodel.QModelObject object -> do
    nidefawl.qubes.models.qmodel.QModelGroup group -> do
    nidefawl.qubes.models.qmodel.QModelMaterial material -> do
    nidefawl.qubes.models.qmodel.QModelTexture tex -> do
    nidefawl.qubes.models.render.QModelBatchedRender$ReallocFloatBuf buf1 -> do
    nidefawl.qubes.models.render.QModelBatchedRender$ReallocFloatBuf buf2 -> if
    nidefawl.qubes.models.render.QModelBatchedRender$ReallocFloatBuf buf3 -> for
    int instances -> do
    221:221:boolean matches(nidefawl.qubes.models.qmodel.ModelQModel,nidefawl.qubes.models.qmodel.QModelObject,nidefawl.qubes.models.qmodel.QModelGroup) -> do
    229:235:void set(nidefawl.qubes.models.qmodel.ModelQModel,nidefawl.qubes.models.qmodel.QModelObject,nidefawl.qubes.models.qmodel.QModelGroup) -> do
    238:269:void add(nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelObject,nidefawl.qubes.models.qmodel.QModelGroup) -> do
    273:277:void put(java.nio.FloatBuffer,java.nio.FloatBuffer) -> do
    279:285:void putSkinned(java.nio.FloatBuffer,java.nio.FloatBuffer,java.nio.FloatBuffer) -> do
    287:294:void reset() -> do
nidefawl.qubes.models.render.QModelBatchedRender$ReallocFloatBuf -> iJiJIjjI1LIjiJIj:
    int pos -> do
    float[] matBuf -> do
    182:187:int realloc(int) -> do
    191:191:int left() -> do
    198:203:void store(nidefawl.qubes.vec.Matrix4f) -> do
nidefawl.qubes.models.render.QModelRender -> IjiJllJiJiL1Ij:
    java.util.ArrayList rendered -> do
    nidefawl.qubes.models.qmodel.ModelQModel model -> do
    nidefawl.qubes.gl.BufferedMatrix normalMat -> do
    nidefawl.qubes.gl.BufferedMatrix modelMat -> if
    23:24:void setModel(nidefawl.qubes.models.qmodel.ModelQModel) -> do
    void addObject(nidefawl.qubes.models.qmodel.QModelObject) -> do
nidefawl.qubes.nbt.Tag -> jIllllL1jIiJIjll:
    java.lang.String name -> do
    808:808:java.lang.String getName() -> do
    nidefawl.qubes.nbt.Tag$TagType getType() -> do
    void writeData(java.io.DataOutput) -> do
    void readData(java.io.DataInput,nidefawl.qubes.nbt.TagReadLimiter) -> do
    820:823:void write(nidefawl.qubes.nbt.Tag,java.io.DataOutput) -> do
    826:834:nidefawl.qubes.nbt.Tag read(java.io.DataInput,nidefawl.qubes.nbt.TagReadLimiter) -> do
    838:872:nidefawl.qubes.nbt.Tag newFromType(nidefawl.qubes.nbt.Tag$TagType) -> if
    877:883:java.lang.String readString(java.io.DataInput) -> do
    887:894:void writeString(java.lang.String,java.io.DataOutput) -> do
    897:898:void setName(java.lang.String) -> do
    16:16:nidefawl.qubes.nbt.Tag access$000(nidefawl.qubes.nbt.Tag$TagType) -> do
nidefawl.qubes.nbt.Tag$1 -> jIiJL1lljIjIIjIj:
    int[] $SwitchMap$nidefawl$qubes$nbt$Tag$TagType -> do
nidefawl.qubes.nbt.Tag$BlockPos3 -> Jill1LJiL1IjJiJi:
    nidefawl.qubes.vec.BlockPos data -> do
    623:626:void writeData(java.io.DataOutput) -> do
    629:633:void readData(java.io.DataInput,nidefawl.qubes.nbt.TagReadLimiter) -> do
    637:637:nidefawl.qubes.nbt.Tag$TagType getType() -> do
nidefawl.qubes.nbt.Tag$Byte -> IjiJjIjIiJJiIjll:
    byte byteVal -> do
    71:72:void writeData(java.io.DataOutput) -> do
    76:76:nidefawl.qubes.nbt.Tag$TagType getType() -> do
    86:88:void readData(java.io.DataInput,nidefawl.qubes.nbt.TagReadLimiter) -> do
nidefawl.qubes.nbt.Tag$ByteArray -> L11LiJIjL1JiIjll:
    byte[] data -> do
    112:114:void writeData(java.io.DataOutput) -> do
    118:118:nidefawl.qubes.nbt.Tag$TagType getType() -> do
    128:136:void readData(java.io.DataInput,nidefawl.qubes.nbt.TagReadLimiter) -> do
    143:143:byte[] getArray() -> do
nidefawl.qubes.nbt.Tag$Compound -> jIllJiIjL11LL1jI:
    java.util.Map data -> do
    369:369:nidefawl.qubes.nbt.Tag$TagType getType() -> do
    379:388:void writeData(java.io.DataOutput) -> do
    392:411:void readData(java.io.DataInput,nidefawl.qubes.nbt.TagReadLimiter) -> do
    440:440:nidefawl.qubes.nbt.Tag get(java.lang.String) -> do
    522:523:java.lang.String getString(java.lang.String) -> do
nidefawl.qubes.nbt.Tag$Double -> iJjIjIJijIIjJijI:
    double doubleVal -> do
    160:161:void writeData(java.io.DataOutput) -> do
    165:165:nidefawl.qubes.nbt.Tag$TagType getType() -> do
    175:177:void readData(java.io.DataInput,nidefawl.qubes.nbt.TagReadLimiter) -> do
nidefawl.qubes.nbt.Tag$End -> JiIjL11LL11LL1L1:
    45:45:nidefawl.qubes.nbt.Tag$TagType getType() -> do
    50:50:void writeData(java.io.DataOutput) -> do
    54:54:void readData(java.io.DataInput,nidefawl.qubes.nbt.TagReadLimiter) -> do
nidefawl.qubes.nbt.Tag$Float -> IjJillllL1IjIjJi:
    float floatVal -> do
    541:542:void writeData(java.io.DataOutput) -> do
    546:546:nidefawl.qubes.nbt.Tag$TagType getType() -> do
    556:558:void readData(java.io.DataInput,nidefawl.qubes.nbt.TagReadLimiter) -> do
nidefawl.qubes.nbt.Tag$Int -> iJL1iJL1ll1LiJ1L:
    int data -> do
    582:583:void writeData(java.io.DataOutput) -> do
    587:587:nidefawl.qubes.nbt.Tag$TagType getType() -> do
    597:599:void readData(java.io.DataInput,nidefawl.qubes.nbt.TagReadLimiter) -> do
nidefawl.qubes.nbt.Tag$IntMap -> jIiJ1LjI1L1LIjL1:
    java.util.Map data -> do
    323:323:nidefawl.qubes.nbt.Tag$TagType getType() -> do
    333:340:void writeData(java.io.DataOutput) -> do
    344:353:void readData(java.io.DataInput,nidefawl.qubes.nbt.TagReadLimiter) -> do
nidefawl.qubes.nbt.Tag$Long -> jIIj1LIjllJillJi:
    long data -> do
    704:705:void writeData(java.io.DataOutput) -> do
    709:709:nidefawl.qubes.nbt.Tag$TagType getType() -> do
    719:721:void readData(java.io.DataInput,nidefawl.qubes.nbt.TagReadLimiter) -> do
nidefawl.qubes.nbt.Tag$Short -> L1L1iJjIL1L11Lll:
    short data -> do
    779:780:void writeData(java.io.DataOutput) -> do
    784:784:nidefawl.qubes.nbt.Tag$TagType getType() -> do
    794:796:void readData(java.io.DataInput,nidefawl.qubes.nbt.TagReadLimiter) -> do
nidefawl.qubes.nbt.Tag$StringTag -> iJjIlljIllL1Jill:
    java.lang.String data -> if
    664:664:nidefawl.qubes.nbt.Tag$TagType getType() -> do
    674:676:void readData(java.io.DataInput,nidefawl.qubes.nbt.TagReadLimiter) -> do
    680:681:void writeData(java.io.DataOutput) -> do
    688:688:java.lang.String getString() -> if
nidefawl.qubes.nbt.Tag$TagList -> L1IjjIJiiJjIJiiJ:
    java.util.List data -> do
    nidefawl.qubes.nbt.Tag$TagType tagType -> do
    245:258:void writeData(java.io.DataOutput) -> do
    262:262:nidefawl.qubes.nbt.Tag$TagType getType() -> do
    275:296:void readData(java.io.DataInput,nidefawl.qubes.nbt.TagReadLimiter) -> do
nidefawl.qubes.nbt.Tag$TagType -> L1JiiJlljIll1Lll:
    nidefawl.qubes.nbt.Tag$TagType END -> do
    nidefawl.qubes.nbt.Tag$TagType BYTE -> if
    nidefawl.qubes.nbt.Tag$TagType SHORT -> for
    nidefawl.qubes.nbt.Tag$TagType INT -> int
    nidefawl.qubes.nbt.Tag$TagType LONG -> new
    nidefawl.qubes.nbt.Tag$TagType FLOAT -> try
    nidefawl.qubes.nbt.Tag$TagType DOUBLE -> byte
    nidefawl.qubes.nbt.Tag$TagType BYTEARRAY -> case
    nidefawl.qubes.nbt.Tag$TagType STRING -> char
    nidefawl.qubes.nbt.Tag$TagType LIST -> else
    nidefawl.qubes.nbt.Tag$TagType COMPOUND -> goto
    nidefawl.qubes.nbt.Tag$TagType VEC3 -> long
    nidefawl.qubes.nbt.Tag$TagType UUID -> this
    nidefawl.qubes.nbt.Tag$TagType INT_MAP -> void
    nidefawl.qubes.nbt.Tag$TagType BLOCK_POS -> break
    nidefawl.qubes.nbt.Tag$TagType[] $VALUES -> do
    18:18:nidefawl.qubes.nbt.Tag$TagType[] values() -> values
    18:18:nidefawl.qubes.nbt.Tag$TagType valueOf(java.lang.String) -> valueOf
    21:21:int getID() -> do
    25:25:nidefawl.qubes.nbt.Tag$TagType fromID(int) -> do
nidefawl.qubes.nbt.Tag$UUIDTag -> L1JiL11LJiJi:
    java.util.UUID data -> do
    745:747:void writeData(java.io.DataOutput) -> do
    751:751:nidefawl.qubes.nbt.Tag$TagType getType() -> do
    761:763:void readData(java.io.DataInput,nidefawl.qubes.nbt.TagReadLimiter) -> do
nidefawl.qubes.nbt.Tag$Vec3Tag -> iJJiL1iJlljIL1L1:
    nidefawl.qubes.vec.Vector3f vec3 -> do
    203:206:void writeData(java.io.DataOutput) -> do
    210:210:nidefawl.qubes.nbt.Tag$TagType getType() -> do
    220:222:void readData(java.io.DataInput,nidefawl.qubes.nbt.TagReadLimiter) -> do
nidefawl.qubes.nbt.TagReadLimiter -> jIIj1LIjJijIIj1L:
    nidefawl.qubes.nbt.TagReadLimiter UNLIMITED -> do
    int totalReadBytes -> do
    int limit -> if
    int maxStackDepth -> for
    int stackDepth -> int
    25:29:void add(int) -> do
    31:35:void push() -> do
    37:38:void pop() -> if
nidefawl.qubes.nbt.TagReadLimiter$1 -> L1JiJi1LIjL1Ji1L:
    7:7:void add(int) -> do
    8:8:void push() -> do
    9:9:void pop() -> if
nidefawl.qubes.network.Connection -> JiL11L1LjI1LiJjI:
    java.net.Socket socket -> do
    java.io.DataInputStream inStream -> do
    java.io.DataOutputStream outStream -> do
    nidefawl.qubes.network.ReaderThread readThread -> do
    nidefawl.qubes.network.WriterThread writeThread -> do
    boolean isConnected -> do
    boolean cleanUp -> if
    java.util.concurrent.LinkedBlockingQueue incoming -> do
    java.util.concurrent.LinkedBlockingQueue outgoing -> if
    java.io.InputStream sIn -> do
    java.lang.Throwable readWriteException -> do
    int disconnectFrom -> do
    java.lang.String disconnectReason -> do
    42:45:void startThreads() -> do
    48:48:boolean isConnected() -> do
    52:59:boolean readPackets() -> if
    63:72:boolean writePackets() -> for
    78:81:void onError(java.lang.Exception) -> do
    84:87:void sendPacket(nidefawl.qubes.network.packet.Packet) -> do
    90:110:void validateConnection() -> if
    113:131:void onDisconnect() -> int
    134:136:void interruptThreads() -> for
    139:162:void disconnect(int,java.lang.String) -> do
    165:165:boolean finished() -> int
    173:173:nidefawl.qubes.network.packet.Packet pollPacket() -> do
    177:177:java.util.concurrent.LinkedBlockingQueue getIncoming() -> do
    181:181:int getDisconnectFrom() -> do
    185:185:java.lang.String getDisconnectReason() -> do
nidefawl.qubes.network.Handler -> iJjIllL11LiJJi1L:
    boolean isValidWorld(nidefawl.qubes.network.packet.AbstractPacketWorldRef) -> do
    26:26:void handleHandshake(nidefawl.qubes.network.packet.PacketHandshake) -> do
    29:29:void handlePing(nidefawl.qubes.network.packet.PacketPing) -> do
    33:33:void handleDisconnect(nidefawl.qubes.network.packet.PacketDisconnect) -> do
    36:36:void handleSpawnInWorld(nidefawl.qubes.network.packet.PacketSSpawnInWorld) -> do
    39:39:void handleAuth(nidefawl.qubes.network.packet.PacketAuth) -> do
    42:42:void handleMovement(nidefawl.qubes.network.packet.PacketCMovement) -> do
    46:46:void handleChunkDataMulti(nidefawl.qubes.network.packet.PacketSChunkData,int) -> do
    49:49:void handleSetBlock(nidefawl.qubes.network.packet.PacketCSetBlock) -> do
    53:53:void handleSetBlocks(nidefawl.qubes.network.packet.PacketCSetBlocks) -> do
    56:56:void handleBlock(nidefawl.qubes.network.packet.PacketSSetBlock) -> do
    59:59:void handleMultiBlock(nidefawl.qubes.network.packet.PacketSSetBlocks) -> do
    63:66:void handlePackets(java.util.concurrent.LinkedBlockingQueue) -> do
    69:69:void handleLightChunk(nidefawl.qubes.network.packet.PacketSLightChunk) -> do
    76:76:void handleTrackChunk(nidefawl.qubes.network.packet.PacketSTrackChunk) -> do
    82:82:void handleClientSettings(nidefawl.qubes.network.packet.PacketCSettings) -> do
    89:89:void handleSwitchWorld(nidefawl.qubes.network.packet.PacketCSwitchWorld) -> do
    96:96:void handleChat(nidefawl.qubes.network.packet.PacketChatMessage) -> do
    103:103:void handleChannels(nidefawl.qubes.network.packet.PacketChatChannels) -> do
    110:110:void handleWorldTime(nidefawl.qubes.network.packet.PacketSWorldTime) -> do
    117:117:void handleTeleport(nidefawl.qubes.network.packet.PacketSTeleport) -> do
    123:123:void handleSync(nidefawl.qubes.network.packet.PacketSyncBlocks) -> do
    130:130:void handleTeleportAck(nidefawl.qubes.network.packet.PacketCTeleportAck) -> do
    136:136:void handleEntityUntrack(nidefawl.qubes.network.packet.PacketSEntityUnTrack) -> do
    142:142:void handleEntityTrack(nidefawl.qubes.network.packet.PacketSEntityTrack) -> do
    148:148:void handleEntityMove(nidefawl.qubes.network.packet.PacketSEntityMove) -> do
    154:154:void handleWorldBiomes(nidefawl.qubes.network.packet.PacketSWorldBiomes) -> do
    157:157:void handleDigState(nidefawl.qubes.network.packet.PacketCDigState) -> do
    160:160:void handleServerDigState(nidefawl.qubes.network.packet.PacketSDigState) -> do
    163:163:void handleDebugBBs(nidefawl.qubes.network.packet.PacketSDebugBB) -> do
    166:166:void handleInvClick(nidefawl.qubes.network.packet.PacketCInvClick) -> do
    169:169:void handleInvSync(nidefawl.qubes.network.packet.PacketSInvSync) -> do
    172:172:void handleCrafting(nidefawl.qubes.network.packet.PacketCCrafting) -> do
    175:175:void handleCraftingProgress(nidefawl.qubes.network.packet.PacketSCraftingProgress) -> do
    178:178:void handleInvSyncIncr(nidefawl.qubes.network.packet.PacketSInvSyncIncr) -> do
    181:181:void handleInvCarried(nidefawl.qubes.network.packet.PacketSInvCarried) -> do
    184:184:void handleInvTransaction(nidefawl.qubes.network.packet.PacketCInvTransaction) -> do
    187:187:void handleDebugPath(nidefawl.qubes.network.packet.PacketSDebugPath) -> do
    190:190:void handleSetProperty(nidefawl.qubes.network.packet.PacketCSetProperty) -> do
    193:193:void handleEntityProperties(nidefawl.qubes.network.packet.PacketSEntityProperties) -> do
    196:196:void handleEntityEquip(nidefawl.qubes.network.packet.PacketSEntityEquip) -> do
    199:199:void handleListReq(nidefawl.qubes.network.packet.PacketCListRequest) -> do
    202:202:void handleList(nidefawl.qubes.network.packet.PacketSList) -> do
nidefawl.qubes.network.ReaderThread -> iJjIllIj1LIjL1ll:
    int ACTIVE_THREADS -> do
    nidefawl.qubes.network.Connection conn -> do
    boolean interrupted -> do
    16:20:void interruptThread() -> do
    24:45:void run() -> run
nidefawl.qubes.network.StreamIO -> iJjIiJJijIiJ1LIj:
    void read(java.io.DataInput) -> do
    void write(java.io.DataOutput) -> do
nidefawl.qubes.network.WriterThread -> L1jI1L1L1LjIjIL1:
    int ACTIVE_THREADS -> do
    nidefawl.qubes.network.Connection conn -> do
    boolean interrupted -> do
    15:19:void interruptThread() -> do
    23:46:void run() -> run
nidefawl.qubes.network.client.ClientHandler -> IjiJjIIjjIIjjIL1:
    int state -> do
    java.lang.String disconnectReason -> do
    long time -> do
    int disconnectFrom -> if
    nidefawl.qubes.network.client.NetworkClient client -> do
    nidefawl.qubes.chunk.client.ChunkManagerClient chunkManager -> do
    nidefawl.qubes.entity.PlayerSelf player -> do
    nidefawl.qubes.world.WorldClient world -> do
    java.util.zip.Inflater inflate -> do
    int i10Meg -> for
    byte[] tmpBuffer -> do
    java.util.ArrayList worldList -> do
    76:83:void update() -> do
    87:88:void handlePing(nidefawl.qubes.network.packet.PacketPing) -> do
    92:103:void handleHandshake(nidefawl.qubes.network.packet.PacketHandshake) -> do
    106:115:void handleSync(nidefawl.qubes.network.packet.PacketSyncBlocks) -> do
    118:133:void handleAuth(nidefawl.qubes.network.packet.PacketAuth) -> do
    137:137:java.lang.String getHandlerName() -> do
    142:143:void handleDisconnect(nidefawl.qubes.network.packet.PacketDisconnect) -> do
    146:146:int getState() -> do
    152:156:void onDisconnect(int,java.lang.String) -> do
    158:160:java.lang.String getDisconnectReason() -> if
    165:180:void handleSpawnInWorld(nidefawl.qubes.network.packet.PacketSSpawnInWorld) -> do
    186:192:void handleTeleport(nidefawl.qubes.network.packet.PacketSTeleport) -> do
    195:196:void sendPacket(nidefawl.qubes.network.packet.Packet) -> do
    199:202:void byteToShortArray(byte[],short[],int) -> do
    208:233:void handleChunkDataMulti(nidefawl.qubes.network.packet.PacketSChunkData,int) -> do
    236:306:void processChunkData(nidefawl.qubes.network.packet.PacketSChunkData,byte[],int) -> do
    309:319:byte[] inflate(byte[]) -> do
    324:324:boolean isValidWorld(nidefawl.qubes.network.packet.AbstractPacketWorldRef) -> do
    328:329:void handleBlock(nidefawl.qubes.network.packet.PacketSSetBlock) -> do
    332:358:void handleMultiBlock(nidefawl.qubes.network.packet.PacketSSetBlocks) -> do
    361:374:void handleLightChunk(nidefawl.qubes.network.packet.PacketSLightChunk) -> do
    376:380:void handleTrackChunk(nidefawl.qubes.network.packet.PacketSTrackChunk) -> do
    383:384:void handleChat(nidefawl.qubes.network.packet.PacketChatMessage) -> do
    387:389:void handleChannels(nidefawl.qubes.network.packet.PacketChatChannels) -> do
    395:399:void handleWorldTime(nidefawl.qubes.network.packet.PacketSWorldTime) -> do
    405:409:void handleEntityUntrack(nidefawl.qubes.network.packet.PacketSEntityUnTrack) -> do
    415:425:void handleEntityTrack(nidefawl.qubes.network.packet.PacketSEntityTrack) -> do
    431:444:void handleEntityMove(nidefawl.qubes.network.packet.PacketSEntityMove) -> do
    448:450:void handleWorldBiomes(nidefawl.qubes.network.packet.PacketSWorldBiomes) -> do
    452:453:void handleServerDigState(nidefawl.qubes.network.packet.PacketSDigState) -> do
    455:460:void handleDebugBBs(nidefawl.qubes.network.packet.PacketSDebugBB) -> do
    462:465:void handleDebugPath(nidefawl.qubes.network.packet.PacketSDebugPath) -> do
    468:475:void handleInvSync(nidefawl.qubes.network.packet.PacketSInvSync) -> do
    477:484:void handleInvSyncIncr(nidefawl.qubes.network.packet.PacketSInvSyncIncr) -> do
    486:496:void handleCraftingProgress(nidefawl.qubes.network.packet.PacketSCraftingProgress) -> do
    499:504:void handleInvCarried(nidefawl.qubes.network.packet.PacketSInvCarried) -> do
    508:514:void handleEntityProperties(nidefawl.qubes.network.packet.PacketSEntityProperties) -> do
    519:523:void handleEntityEquip(nidefawl.qubes.network.packet.PacketSEntityEquip) -> do
    526:528:void handleList(nidefawl.qubes.network.packet.PacketSList) -> do
    44:44:void access$000(nidefawl.qubes.network.client.ClientHandler,nidefawl.qubes.network.packet.PacketSChunkData,byte[],int) -> do
nidefawl.qubes.network.client.ClientHandler$1 -> JiiJL1IjlliJ:
    byte[] decpressData -> do
    nidefawl.qubes.network.packet.PacketSChunkData val$packet -> do
    int val$flags -> do
    nidefawl.qubes.network.client.ClientHandler this$0 -> do
    213:217:java.lang.Void call() -> do
    221:224:void post() -> if
    209:209:java.lang.Object call() -> call
nidefawl.qubes.network.client.NetworkClient -> IjJijI1LjIIjL1Ji:
    nidefawl.qubes.network.client.ClientHandler handler -> do
    nidefawl.qubes.network.Connection conn -> do
    int netVersion -> do
    27:47:void update() -> do
    49:70:void processLogin() -> if
    72:72:nidefawl.qubes.network.client.ClientHandler getClient() -> do
    76:76:boolean isConnected() -> do
    81:82:void sendPacket(nidefawl.qubes.network.packet.Packet) -> do
    85:86:void disconnect(java.lang.String) -> do
    90:91:void onKick(int,java.lang.String) -> do
nidefawl.qubes.network.client.ThreadConnect -> IjL1IjiJJi1LjIJi:
    java.lang.String host -> do
    int port -> do
    java.lang.Thread thread -> do
    boolean finished -> do
    boolean cancelled -> if
    boolean connected -> for
    java.lang.String stateStr -> if
    26:63:void run() -> run
    66:70:void startThread() -> do
    73:73:java.lang.String getState() -> do
    76:77:void cancel() -> if
nidefawl.qubes.network.packet.AbstractPacketWorldRef -> jIJi1LlljIlliJIj:
    int worldID -> do
    20:21:void readPacket(java.io.DataInput) -> do
    25:26:void writePacket(java.io.DataOutput) -> do
    29:29:int getWorldId() -> do
nidefawl.qubes.network.packet.InvalidPacketException -> JijIJiL1iJlllljI:
    java.lang.Class clazz -> do
    22:22:java.lang.Class getClazz() -> do
nidefawl.qubes.network.packet.Packet -> llL1ll1LllJill1L:
    int NEXT_PACKET_ID -> do
    java.lang.Class[] packets -> do
    boolean[] sentByServer -> do
    boolean[] sentByClient -> if
    java.util.Map classToIDMap -> do
    int id -> if
    nidefawl.qubes.network.packet.Packet lastSuccess -> do
    78:90:nidefawl.qubes.network.packet.Packet read(java.io.DataInput) -> do
    94:96:void write(nidefawl.qubes.network.packet.Packet,java.io.DataOutput) -> do
    100:100:nidefawl.qubes.network.packet.Packet makePacket(int) -> do
    void readPacket(java.io.DataInput) -> do
    void writePacket(java.io.DataOutput) -> do
    void handle(nidefawl.qubes.network.Handler) -> do
    110:118:nidefawl.qubes.network.packet.Packet makePacket(java.lang.Class) -> do
    122:122:int getID() -> do
    126:131:void register(java.lang.Class,boolean,boolean) -> do
    140:140:java.lang.String readString(java.io.DataInput) -> do
    144:151:java.lang.String readString(java.io.DataInput,int) -> do
    154:161:void writeString(java.lang.String,java.io.DataOutput) -> do
    164:176:nidefawl.qubes.item.BaseStack readStack(java.io.DataInput) -> do
    182:193:void writeStack(nidefawl.qubes.item.BaseStack,java.io.DataOutput) -> do
nidefawl.qubes.network.packet.PacketAuth -> JiiJllL1IjlljIll:
    java.lang.String name -> do
    boolean success -> do
    29:31:void readPacket(java.io.DataInput) -> do
    35:37:void writePacket(java.io.DataOutput) -> do
    41:42:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketCCrafting -> iJ1LlliJ1LL1IjjI:
    int catid -> do
    int recipeid -> if
    int action -> for
    int amount -> int
    32:36:void readPacket(java.io.DataInput) -> do
    40:44:void writePacket(java.io.DataOutput) -> do
    48:49:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketCDigState -> L1Ij1LIjiJIj1L1L:
    nidefawl.qubes.vec.BlockPos pos -> do
    nidefawl.qubes.vec.Vector3f fpos -> do
    int face -> if
    nidefawl.qubes.item.BaseStack stack -> do
    int stage -> for
    34:40:void readPacket(java.io.DataInput) -> do
    44:50:void writePacket(java.io.DataOutput) -> do
    56:58:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketCInvClick -> L1JiIjiJiJ1LL1:
    int id -> do
    int idx -> if
    int button -> for
    int action -> int
    nidefawl.qubes.item.BaseStack stack -> do
    31:36:void readPacket(java.io.DataInput) -> do
    40:45:void writePacket(java.io.DataOutput) -> do
    49:50:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketCInvTransaction -> jI1LIjL1iJL1L1iJ:
    int id -> do
    int action -> if
    25:27:void readPacket(java.io.DataInput) -> do
    31:33:void writePacket(java.io.DataOutput) -> do
    37:38:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketCListRequest -> iJlliJjIiJllL1L1:
    int reqId -> do
    nidefawl.qubes.io.network.DataListType type -> do
    24:26:void readPacket(java.io.DataInput) -> do
    30:32:void writePacket(java.io.DataOutput) -> do
    36:37:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketCMovement -> IjiJL1L1llJi1Lll:
    nidefawl.qubes.vec.Vec3D pos -> do
    float yaw -> do
    float pitch -> if
    int flags -> do
    27:31:void readPacket(java.io.DataInput) -> do
    35:41:void writePacket(java.io.DataOutput) -> do
    47:48:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketCSetBlock -> L11LjIlllliJIjJi:
    nidefawl.qubes.vec.BlockPos pos -> do
    nidefawl.qubes.vec.Vector3f fpos -> do
    int face -> if
    nidefawl.qubes.item.BlockStack stack -> do
    33:40:void readPacket(java.io.DataInput) -> do
    44:49:void writePacket(java.io.DataOutput) -> do
    55:58:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketCSetBlocks -> iJJiiJJiJiIjJiL1:
    int x -> if
    int y -> for
    int z -> int
    int x2 -> new
    int y2 -> try
    int z2 -> byte
    nidefawl.qubes.item.BlockStack stack -> do
    int flags -> case
    nidefawl.qubes.vec.Vector3f fpos -> do
    int face -> char
    47:60:void readPacket(java.io.DataInput) -> do
    64:75:void writePacket(java.io.DataOutput) -> do
    81:83:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketCSetProperty -> JillL1iJIjIj1LjI:
    int propVal -> do
    int propId -> if
    22:24:void readPacket(java.io.DataInput) -> do
    28:30:void writePacket(java.io.DataOutput) -> do
    34:35:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketCSettings -> iJiJiJlliJ1LIj1L:
    int chunkLoadDistance -> do
    19:20:void readPacket(java.io.DataInput) -> do
    24:25:void writePacket(java.io.DataOutput) -> do
    29:30:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketCSwitchWorld -> iJ1LiJJiL1JiJi1L:
    int flags -> do
    21:22:void readPacket(java.io.DataInput) -> do
    26:27:void writePacket(java.io.DataOutput) -> do
    33:34:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketCTeleportAck -> jI1LIjjIIjL1jI1L:
    int sync -> if
    21:23:void readPacket(java.io.DataInput) -> do
    27:29:void writePacket(java.io.DataOutput) -> do
    35:36:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketChatChannels -> JiIjJiJi1LllL1Ij:
    java.util.ArrayList list -> do
    40:45:void readPacket(java.io.DataInput) -> do
    52:56:void writePacket(java.io.DataOutput) -> do
    68:69:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketChatMessage -> ll1LIjiJll1LL1Ji:
    java.lang.String channel -> do
    java.lang.String message -> if
    21:23:void readPacket(java.io.DataInput) -> do
    27:29:void writePacket(java.io.DataOutput) -> do
    33:34:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketDisconnect -> lljI1L1LjIjI1LiJ:
    int code -> do
    java.lang.String message -> do
    20:22:void readPacket(java.io.DataInput) -> do
    26:28:void writePacket(java.io.DataOutput) -> do
    32:33:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketHandshake -> llIjjI1LiJllJiL1:
    int version -> do
    19:20:void readPacket(java.io.DataInput) -> do
    24:25:void writePacket(java.io.DataOutput) -> do
    29:30:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketPing -> L1iJiJIjjIllJiJi:
    long time -> do
    19:20:void readPacket(java.io.DataInput) -> do
    24:25:void writePacket(java.io.DataOutput) -> do
    29:30:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSChunkData -> llIjJiiJiJIjIjjI:
    int len -> if
    byte[] blocks -> do
    int flags -> for
    int[][] coords -> do
    23:33:void readPacket(java.io.DataInput) -> do
    37:46:void writePacket(java.io.DataOutput) -> do
    52:60:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSCraftingProgress -> iJIjIjllL1IjJi:
    int id -> do
    int action -> if
    long currentTime -> do
    long startTime -> if
    long endTime -> for
    int recipe -> for
    boolean finished -> do
    int amount -> int
    27:35:void readPacket(java.io.DataInput) -> do
    39:47:void writePacket(java.io.DataOutput) -> do
    51:52:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSDebugBB -> iJJi1LiJIjJi1LIj:
    java.util.List boxes -> do
    24:31:void readPacket(java.io.DataInput) -> do
    35:40:void writePacket(java.io.DataOutput) -> do
    44:45:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSDebugPath -> L1iJJiL1jIjIJiIj:
    java.util.List pts -> do
    25:33:void readPacket(java.io.DataInput) -> do
    37:44:void writePacket(java.io.DataOutput) -> do
    48:49:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSDigState -> L1L1L1JiL1jIL1Ji:
    int stage -> if
    23:25:void readPacket(java.io.DataInput) -> do
    29:31:void writePacket(java.io.DataOutput) -> do
    37:39:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSEntityEquip -> L1L1JiJiiJiJiJiJ:
    int entId -> do
    nidefawl.qubes.item.BaseStack[] stacks -> do
    31:37:void readPacket(java.io.DataInput) -> do
    41:46:void writePacket(java.io.DataOutput) -> do
    52:53:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSEntityMove -> jIiJL1iJIjIjlljI:
    int entId -> do
    nidefawl.qubes.vec.Vec3D pos -> do
    float yaw -> do
    float pitch -> if
    int flags -> if
    float yawBodyOffset -> for
    37:46:void readPacket(java.io.DataInput) -> do
    50:62:void writePacket(java.io.DataOutput) -> do
    68:69:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSEntityProperties -> ll1LL1JiL1JiiJJi:
    int entId -> do
    nidefawl.qubes.nbt.Tag data -> do
    29:31:void readPacket(java.io.DataInput) -> do
    35:37:void writePacket(java.io.DataOutput) -> do
    43:44:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSEntityTrack -> JiL1L11LL1jIL1:
    int entId -> do
    int entType -> if
    nidefawl.qubes.vec.Vec3D pos -> do
    float yaw -> do
    float yawbody -> if
    float pitch -> for
    nidefawl.qubes.nbt.Tag data -> do
    35:45:void readPacket(java.io.DataInput) -> do
    49:66:void writePacket(java.io.DataOutput) -> do
    72:73:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSEntityUnTrack -> L1iJ1LL1llJi1L1L:
    int entId -> do
    30:31:void readPacket(java.io.DataInput) -> do
    35:36:void writePacket(java.io.DataOutput) -> do
    42:43:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSInvCarried -> ll1L1L1LjIjIJi1L:
    nidefawl.qubes.inventory.slots.SlotStack stack -> do
    27:29:void readPacket(java.io.DataInput) -> do
    33:34:void writePacket(java.io.DataOutput) -> do
    38:39:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSInvSync -> iJJiJiiJL1L1llJi:
    int invId -> do
    int invSize -> if
    java.util.Collection stacks -> do
    31:40:void readPacket(java.io.DataInput) -> do
    44:50:void writePacket(java.io.DataOutput) -> do
    54:55:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSInvSyncIncr -> lljIlllllliJjIL1:
    int invId -> do
    java.util.Collection stacks -> do
    30:38:void readPacket(java.io.DataInput) -> do
    42:47:void writePacket(java.io.DataOutput) -> do
    51:52:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSLightChunk -> jIL1L1iJIjJillll:
    int coordX -> if
    int coordZ -> for
    byte[] data -> do
    short min -> do
    short max -> if
    22:30:void readPacket(java.io.DataInput) -> do
    34:41:void writePacket(java.io.DataOutput) -> do
    47:50:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSList -> iJJiL1IjiJJijIL1:
    int reqId -> do
    nidefawl.qubes.io.network.DataListType type -> do
    java.util.List list -> do
    30:39:void readPacket(java.io.DataInput) -> do
    43:50:void writePacket(java.io.DataOutput) -> do
    54:55:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSSetBlock -> iJJillIjiJllL1Ij:
    int x -> if
    int y -> for
    int z -> int
    int type -> new
    int light -> try
    29:36:void readPacket(java.io.DataInput) -> do
    40:46:void writePacket(java.io.DataOutput) -> do
    52:54:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSSetBlocks -> llL1L1IjJiiJJill:
    int chunkX -> if
    int chunkZ -> for
    short[] positions -> do
    short[] blocks -> if
    byte[] lights -> do
    short[] data -> for
    nidefawl.qubes.chunk.blockdata.BlockData[] bdata -> do
    int numBlockData -> int
    43:73:void readPacket(java.io.DataInput) -> do
    77:98:void writePacket(java.io.DataOutput) -> do
    104:106:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSSpawnInWorld -> lljIJiiJllllL1Ji:
    nidefawl.qubes.world.IWorldSettings worldSettings -> do
    nidefawl.qubes.vec.Vec3D pos -> do
    int flags -> do
    int entId -> if
    int worldType -> for
    31:37:void readPacket(java.io.DataInput) -> do
    41:48:void writePacket(java.io.DataOutput) -> do
    54:55:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSTeleport -> JiJiiJllL1iJIjjI:
    nidefawl.qubes.vec.Vec3D pos -> do
    float yaw -> do
    float pitch -> if
    int flags -> if
    int sync -> for
    31:37:void readPacket(java.io.DataInput) -> do
    41:49:void writePacket(java.io.DataOutput) -> do
    55:56:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSTrackChunk -> Ijll1LllL1L1llIj:
    int x -> if
    int z -> for
    boolean add -> do
    24:29:void readPacket(java.io.DataInput) -> do
    33:37:void writePacket(java.io.DataOutput) -> do
    41:43:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSWorldBiomes -> L1IjJiiJlliJL1ll:
    int numBiomes -> if
    int[] coordsX -> do
    int[] coordsZ -> if
    byte[] biomes -> do
    34:44:void readPacket(java.io.DataInput) -> do
    48:55:void writePacket(java.io.DataOutput) -> do
    61:63:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSWorldTime -> IjllJijIllIjlliJ:
    long time -> do
    long daylen -> if
    boolean isFixed -> do
    25:29:void readPacket(java.io.DataInput) -> do
    33:37:void writePacket(java.io.DataOutput) -> do
    43:46:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSyncBlocks -> JiiJlljIL1IjJi1L:
    short[] blockIds -> do
    23:32:void readPacket(java.io.DataInput) -> do
    36:39:void writePacket(java.io.DataOutput) -> do
    43:44:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.path.Path -> iJIjIjiJiJL1JiL1:
    nidefawl.qubes.path.PathPoint[] arr -> do
    int curPos -> do
    13:13:boolean isFinished() -> do
    17:17:nidefawl.qubes.path.PathPoint get() -> do
    20:20:nidefawl.qubes.path.PathPoint getEnd() -> if
    30:30:int getLength() -> do
    34:34:int getPos() -> if
    38:38:nidefawl.qubes.path.PathPoint get(int) -> do
    42:46:void setPos(int) -> do
nidefawl.qubes.path.PathFinder -> iJJiJiIjIjL1L1L1:
    nidefawl.qubes.path.PathList path -> do
    java.util.Map block -> do
    nidefawl.qubes.vec.BlockPos size -> do
    nidefawl.qubes.vec.BlockPos blockPos -> if
    nidefawl.qubes.path.PathPoint[] pathOptions -> do
    23:34:nidefawl.qubes.path.Path findPath(nidefawl.qubes.entity.Entity,nidefawl.qubes.vec.Vec3D,float) -> do
    38:77:nidefawl.qubes.path.Path findPath(nidefawl.qubes.entity.Entity,nidefawl.qubes.path.PathPoint,nidefawl.qubes.path.PathPoint,float) -> do
    80:106:int findPathOptions(nidefawl.qubes.entity.Entity,nidefawl.qubes.path.PathPoint,nidefawl.qubes.path.PathPoint,float) -> do
    109:138:nidefawl.qubes.path.PathPoint getPoint(nidefawl.qubes.entity.Entity,int,int,int,int) -> do
    141:160:int getBlockState(nidefawl.qubes.entity.Entity,int,int,int) -> do
    163:175:nidefawl.qubes.path.Path createPath(nidefawl.qubes.path.PathPoint,nidefawl.qubes.path.PathPoint) -> do
    178:191:nidefawl.qubes.path.PathPoint addPoint(int,int,int) -> do
nidefawl.qubes.path.PathList -> llJi1LiJjIllll1L:
    java.util.LinkedList list -> do
    java.util.Comparator comparator -> do
    java.util.List points -> do
    21:22:void reset() -> do
    25:33:void addPoint(nidefawl.qubes.path.PathPoint) -> do
    39:39:boolean isEmpty() -> do
    42:44:nidefawl.qubes.path.PathPoint pop() -> do
    47:51:void updateCost(nidefawl.qubes.path.PathPoint,float) -> do
nidefawl.qubes.path.PathList$1 -> JiL11LiJ1LIjIjJi:
    nidefawl.qubes.path.PathList this$0 -> do
    15:15:int compare(nidefawl.qubes.path.PathPoint,nidefawl.qubes.path.PathPoint) -> do
    11:11:int compare(java.lang.Object,java.lang.Object) -> compare
nidefawl.qubes.path.PathPoint -> jIIjjIlliJL1jIJi:
    int x -> do
    int y -> if
    int z -> for
    float totalPathDistance -> do
    float distanceToNext -> if
    float distanceToTarget -> for
    boolean isFirst -> do
    int pos -> int
    nidefawl.qubes.path.PathPoint previous -> do
    29:30:float distanceTo(nidefawl.qubes.path.PathPoint) -> do
    35:39:boolean equals(java.lang.Object) -> equals
    43:43:int hashCode() -> hashCode
    47:47:boolean inUse() -> do
    51:52:void getPosition(nidefawl.qubes.entity.EntityAI,nidefawl.qubes.vec.Vec3D) -> do
    56:56:java.lang.String toString() -> toString
nidefawl.qubes.path.RandomPosGen -> lljIIj1LL1:
    nidefawl.qubes.vec.BlockPos tmp -> do
    12:36:nidefawl.qubes.vec.BlockPos find(nidefawl.qubes.entity.Entity,nidefawl.qubes.vec.Vec3D,int,int) -> do
nidefawl.qubes.perf.TimingHelper -> L1iJJiJi1L1L1LL1:
    boolean useNanos -> do
    boolean init -> if
    int LEN -> do
    long[] nanos -> do
    long[] millis -> if
    long[] calls -> for
    long[] beginNanos -> int
    long[] beginMillis -> new
    boolean[] on -> do
    java.lang.String[] names -> do
    java.util.HashMap map -> do
    int jObjectIdx -> if
    java.util.Stack stack -> do
    80:83:void startSilent(int) -> do
    195:199:void reset() -> do
nidefawl.qubes.render.AbstractRenderer -> Ij1L1LL1jIll1LIj:
    boolean recompileShaders -> if
    java.util.List resourcesShaders -> if
    java.util.List resourcesShadersNew -> for
    java.util.List resourcesFramebuffers -> int
    25:37:void addResource(nidefawl.qubes.util.IManagedResource) -> do
    41:47:void release() -> try
    53:54:void pushCurrentShaders() -> byte
    60:66:void popNewShaders() -> case
    72:76:void releaseNewShaders() -> char
    81:97:void releaseAll(nidefawl.qubes.util.EResourceType) -> do
nidefawl.qubes.render.AbstractRenderer$1 -> L1IjJijIIjiJJiIj:
    int[] $SwitchMap$nidefawl$qubes$util$EResourceType -> do
nidefawl.qubes.render.BlurRenderer -> JiiJllIjiJL1L1iJ:
    nidefawl.qubes.gl.FrameBuffer fbBlur1 -> do
    nidefawl.qubes.gl.FrameBuffer fbBlur2 -> if
    nidefawl.qubes.gl.FrameBuffer fbSSRBlurredX -> for
    nidefawl.qubes.gl.FrameBuffer fbSSRBlurredY -> int
    nidefawl.qubes.shader.Shader shaderBlurSeperate -> do
    nidefawl.qubes.shader.Shader shaderBlurKawase -> if
    boolean startup -> do
    int[][] kawaseKernelSizePasses -> do
    float w1 -> do
    float h1 -> if
    46:69:void initShaders() -> do
    71:87:int renderBlur1PassDownsample(int) -> do
    90:102:int renderBlurSeperate(int,int) -> do
    105:108:void resize(int,int) -> do
    112:114:void initBlurSepeate(int,int,int) -> do
    116:121:void initBlurKawase(int,int,int) -> if
    124:125:void init() -> if
nidefawl.qubes.render.FinalRenderer -> iJ1LIjJijIJijIJi:
    nidefawl.qubes.shader.Shader shaderBloomCombine -> do
    nidefawl.qubes.shader.Shader shaderFinal -> if
    nidefawl.qubes.shader.Shader shaderDeferred -> for
    nidefawl.qubes.shader.Shader shaderDeferredWater -> int
    nidefawl.qubes.shader.Shader shaderDeferredFirstPerson -> new
    nidefawl.qubes.shader.Shader shaderInterpLum -> try
    nidefawl.qubes.shader.Shader shaderThreshold -> byte
    nidefawl.qubes.shader.Shader shaderSSR -> case
    nidefawl.qubes.shader.Shader shaderSSRCombine -> char
    nidefawl.qubes.shader.Shader shaderDownsample4x -> else
    nidefawl.qubes.shader.Shader shaderDownsample4xLum -> goto
    nidefawl.qubes.shader.Shader shaderNormals -> long
    nidefawl.qubes.gl.FrameBuffer fbScene -> try
    nidefawl.qubes.gl.FrameBuffer fbSSR -> do
    nidefawl.qubes.gl.FrameBuffer fbSSRCombined -> if
    nidefawl.qubes.gl.FrameBuffer fbDeferred -> for
    nidefawl.qubes.gl.FrameBuffer fbSSAO -> int
    nidefawl.qubes.gl.FrameBuffer fbFinal -> new
    nidefawl.qubes.gl.FrameBuffer[] fbLuminanceDownsample -> do
    nidefawl.qubes.gl.FrameBuffer[] fbLuminanceInterp -> if
    int preWaterDepthTex -> do
    boolean startup -> for
    int ssr -> if
    int frame -> for
    nidefawl.qubes.render.post.SMAA smaa -> do
    boolean aoNeedsInit -> do
    java.nio.FloatBuffer scaleMatBuf -> do
    int[] aoSize -> do
    65:125:void renderDeferred(nidefawl.qubes.world.World,float,int) -> do
    127:128:void bindFB() -> do
    130:131:void clearFrameBuffer() -> if
    136:179:void calcLum(nidefawl.qubes.world.World,float) -> do
    186:188:void render(nidefawl.qubes.world.World,float,int) -> if
    190:191:void renderBlur(nidefawl.qubes.world.World,float) -> if
    194:194:int getSsr() -> do
    202:213:void raytraceSSR(nidefawl.qubes.world.World,float) -> for
    224:251:void combineSSR(nidefawl.qubes.world.World,float) -> int
    255:294:void renderFinal(nidefawl.qubes.world.World,float) -> new
    306:310:void copyPreWaterDepth() -> for
    312:318:void copySceneDepthBuffer() -> int
    320:361:void renderBloom(nidefawl.qubes.world.World,float) -> try
    366:527:void initShaders() -> new
    532:559:void initAO() -> else
    569:580:void updateHBAOSettings() -> goto
    582:590:void initAA() -> long
    593:688:void resize(int,int) -> do
    691:695:void aoReinit() -> this
    699:701:void release() -> try
    706:709:void init() -> void
    714:716:void setSSR(int) -> do
nidefawl.qubes.render.FinalRenderer$1 -> JiiJllL1lljIjI:
    nidefawl.qubes.render.FinalRenderer this$0 -> do
    372:376:java.lang.String getDefinition(java.lang.String) -> do
nidefawl.qubes.render.FinalRenderer$2 -> IjjIIjIjiJiJjIll:
    nidefawl.qubes.render.FinalRenderer this$0 -> do
    383:386:java.lang.String getDefinition(java.lang.String) -> do
nidefawl.qubes.render.FinalRenderer$3 -> llIjL1IjjIll1LiJ:
    nidefawl.qubes.render.FinalRenderer this$0 -> do
    392:395:java.lang.String getDefinition(java.lang.String) -> do
nidefawl.qubes.render.FinalRenderer$4 -> IjIjJi1L1LIjllJi:
    nidefawl.qubes.render.FinalRenderer this$0 -> do
    401:404:java.lang.String getDefinition(java.lang.String) -> do
nidefawl.qubes.render.FinalRenderer$5 -> jIIjL1L1IjJijIjI:
    nidefawl.qubes.render.FinalRenderer this$0 -> do
    410:413:java.lang.String getDefinition(java.lang.String) -> do
nidefawl.qubes.render.FinalRenderer$6 -> Jillll1LIj1LIj1L:
    nidefawl.qubes.render.FinalRenderer this$0 -> do
    420:422:java.lang.String getDefinition(java.lang.String) -> do
nidefawl.qubes.render.FinalRenderer$7 -> L11LJiiJll1LJi:
    nidefawl.qubes.render.FinalRenderer this$0 -> do
    433:435:java.lang.String getDefinition(java.lang.String) -> do
nidefawl.qubes.render.LightCompute -> iJL1jIjIJijIJi1L:
    nidefawl.qubes.shader.Shader shaderComputerLight -> do
    int[] lightTiles -> do
    nidefawl.qubes.shader.ShaderBuffer lights -> do
    int lightTilesTex -> do
    boolean startup -> do
    int[] debugResults -> if
    int numLights -> if
    46:67:void initShaders() -> do
    73:75:void init() -> if
    78:88:void resize(int,int) -> do
    91:115:void updateLights(nidefawl.qubes.world.WorldClient,float) -> do
    117:145:void render(nidefawl.qubes.world.WorldClient,float,int) -> do
    149:236:void renderDebug() -> for
    239:239:int getTexture() -> do
nidefawl.qubes.render.ShadowRenderer -> JiJilliJJiL1Ijll:
    nidefawl.qubes.shader.Shader shadowShader -> do
    boolean startup -> do
    int renderMode -> do
    int SHADOW_BUFFER_SIZE -> if
    java.lang.String[] shaderNames -> do
    nidefawl.qubes.gl.FrameBuffer fbShadow -> do
    46:78:void initShaders() -> do
    82:84:void init() -> if
    89:134:void renderMultiPass(nidefawl.qubes.world.World,float) -> do
    139:176:void renderMultiPassTextured(nidefawl.qubes.world.World,float) -> if
    179:184:void renderShadowPass(nidefawl.qubes.world.World,float) -> for
    187:194:void resize(int,int) -> do
    197:197:int getDepthTex() -> do
    201:201:int getDebugTexture() -> if
    205:205:float getTextureSize() -> do
nidefawl.qubes.render.ShadowRenderer$1 -> IjiJL1L1iJjIjIIj:
    nidefawl.qubes.render.ShadowRenderer this$0 -> do
    52:55:java.lang.String getDefinition(java.lang.String) -> do
nidefawl.qubes.render.WorldRenderer -> iJL1L1jI1LIjIj:
    nidefawl.qubes.vec.Vector3f skyColor -> do
    nidefawl.qubes.vec.Vector3f fogColor -> if
    java.util.HashMap debugBBs -> do
    java.util.HashMap debugPaths -> if
    int rendered -> do
    boolean startup -> do
    int texWaterNoise -> if
    nidefawl.qubes.shader.Shader terrainShader -> do
    nidefawl.qubes.shader.Shader terrainShaderFar -> if
    nidefawl.qubes.shader.Shader skyShader -> for
    nidefawl.qubes.shader.Shader waterShader -> int
    nidefawl.qubes.shader.Shader shaderModelVoxel -> new
    nidefawl.qubes.shader.Shader shaderModelfirstPerson -> try
    nidefawl.qubes.gl.TesselatorState skybox1 -> do
    nidefawl.qubes.gl.TesselatorState skybox2 -> if
    nidefawl.qubes.shader.Shader shaderZPre -> byte
    nidefawl.qubes.shader.Shader skyShader2 -> case
    int idx -> for
    int texNoise3D -> int
    nidefawl.qubes.models.qmodel.QModelProperties modelProperties -> do
    nidefawl.qubes.vec.Vector3f mPos -> for
    float modelRot -> do
    float lastModelRot -> if
    55:65:java.lang.String getPassName(int) -> do
    100:174:void initShaders() -> do
    178:248:void reloadModel() -> if
    252:292:void init() -> for
    299:365:void renderWorld(nidefawl.qubes.world.World,float) -> do
    416:431:void renderEntities(nidefawl.qubes.world.World,int,float,nidefawl.qubes.shader.Shader,int) -> do
    434:493:void renderEntitiesBatched(nidefawl.qubes.world.World,int,float,nidefawl.qubes.shader.Shader,int) -> if
    512:519:void renderTransparent(nidefawl.qubes.world.World,float) -> if
    522:585:void renderFirstPerson(nidefawl.qubes.world.World,float) -> for
    588:606:void renderNormals(nidefawl.qubes.world.World,float) -> int
    609:622:void renderTerrainWireFrame(nidefawl.qubes.world.World,float) -> new
    629:698:void renderDebugBB(nidefawl.qubes.world.World,float) -> try
    701:772:void resize(int,int) -> do
    781:782:void setModelPos(float,float,float) -> do
    785:791:void tickUpdate() -> int
nidefawl.qubes.render.WorldRenderer$1 -> jIjIIjL1jIJiL1Ij:
    nidefawl.qubes.render.WorldRenderer this$0 -> do
    107:110:java.lang.String getDefinition(java.lang.String) -> do
nidefawl.qubes.render.WorldRenderer$2 -> Ji1L1LL1iJllJiIj:
    nidefawl.qubes.render.WorldRenderer this$0 -> do
    119:122:java.lang.String getDefinition(java.lang.String) -> do
nidefawl.qubes.render.WorldRenderer$3 -> lliJllIjL1iJiJll:
    nidefawl.qubes.render.WorldRenderer this$0 -> do
    182:182:boolean accept(java.io.File) -> accept
nidefawl.qubes.render.gui.SingleBlockDraw -> Ij1LJiIjL1lliJll:
    nidefawl.qubes.gl.GLVBO vbo -> do
    nidefawl.qubes.gl.GLVBO vboIdx -> if
    nidefawl.qubes.gl.ReallocIntBuffer vboBuf -> do
    nidefawl.qubes.gl.ReallocIntBuffer vboIdxBuf -> if
    nidefawl.qubes.gl.BufferedMatrix modelMatrix -> do
    nidefawl.qubes.gl.BufferedMatrix projMatrix -> if
    float x -> do
    float y -> if
    float z -> for
    float scale -> int
    float rotX -> new
    float rotY -> try
    float rotZ -> byte
    54:60:void init() -> do
    66:107:void drawBlockDefault(nidefawl.qubes.block.Block,int,nidefawl.qubes.item.StackData) -> do
    109:122:void drawBlock(nidefawl.qubes.block.Block,int,nidefawl.qubes.item.StackData) -> if
    125:137:void doRender(nidefawl.qubes.block.Block,int,nidefawl.qubes.item.StackData) -> for
    144:147:void setOffset(float,float,float) -> do
    153:154:void setScale(float) -> do
    163:166:void setRotation(float,float,float) -> if
nidefawl.qubes.render.gui.SingleBlockRenderAtlas -> jIJill1LjIjIiJ1L:
    nidefawl.qubes.render.gui.SingleBlockRenderAtlas instance -> do
    byte[] defaultData -> do
    nidefawl.qubes.render.gui.SingleBlockRenderAtlas$TextureAtlas[] textures -> do
    java.util.Map map -> do
    boolean rendering -> do
    64:64:float getTexW() -> do
    67:67:float getX(int) -> do
    70:70:float getY(int) -> if
    73:73:int getXPx(int) -> do
    76:76:int getYPx(int) -> if
    82:95:nidefawl.qubes.render.gui.SingleBlockRenderAtlas$TextureAtlas getFirstFreeTextureAtlas() -> do
    101:101:nidefawl.qubes.render.gui.SingleBlockRenderAtlas getInstance() -> do
    108:113:boolean needsRender(nidefawl.qubes.block.Block,int,nidefawl.qubes.item.StackData) -> do
    118:126:nidefawl.qubes.render.gui.SingleBlockRenderAtlas$TextureAtlas getAtlas(int,boolean) -> do
    130:149:void preRender(nidefawl.qubes.block.Block,int,nidefawl.qubes.item.StackData,nidefawl.qubes.gl.BufferedMatrix,nidefawl.qubes.gl.BufferedMatrix) -> do
    153:158:void postRender() -> do
    162:162:void init() -> if
    166:174:void setupTextureAtlas(nidefawl.qubes.render.gui.SingleBlockRenderAtlas$TextureAtlas) -> do
    177:185:void reset() -> for
    190:195:int getTexture(nidefawl.qubes.block.Block,int,nidefawl.qubes.item.StackData) -> do
    199:204:int getTextureIdx(nidefawl.qubes.block.Block,int,nidefawl.qubes.item.StackData) -> if
nidefawl.qubes.render.gui.SingleBlockRenderAtlas$TextureAtlas -> JilljIJiL1IjJiiJ:
    int[] hashes -> do
    int idx -> do
    nidefawl.qubes.gl.FrameBuffer frameBuffer -> do
    48:57:int getTextureIdx(int) -> do
    60:60:boolean hasFree() -> do
nidefawl.qubes.render.gui.SingleBlockRenderer -> llIjjIllll1LIj:
    nidefawl.qubes.vec.BlockPos offset -> do
    nidefawl.qubes.util.SingleBlockWorld singleBlockWorld -> do
    nidefawl.qubes.gl.VertexBuffer singleBlockBuffer -> do
    32:46:nidefawl.qubes.gl.VertexBuffer renderSingleBlock(nidefawl.qubes.block.Block,int,nidefawl.qubes.item.StackData) -> do
    51:52:void putBuffer(nidefawl.qubes.block.Block,int) -> do
    54:55:void putSingleVert(nidefawl.qubes.block.Block,int,int) -> do
    57:58:void putTriIndex(nidefawl.qubes.block.Block,int,int[],int,int) -> do
nidefawl.qubes.render.post.HBAOPlus -> nidefawl.qubes.render.post.HBAOPlus:
    boolean hasContext -> hasContext
    boolean needsInit -> needsInit
    void createContext(int,int) -> createContext
    void deleteContext() -> deleteContext
    void renderAO() -> renderAO
    void setProjMatrix(long) -> setProjMatrix
    void setViewMatrix(long) -> setViewMatrix
    void setOutputFBO(int) -> setOutputFBO
    void setDepthTex(int) -> setDepthTex
    void setRenderMask(int) -> setRenderMask
    void setNormalTex(int) -> setNormalTex
    void setBias(float) -> setBias
    void setNormalDecodeScaleBias(float,float) -> setNormalDecodeScaleBias
    void setRadius(float) -> setRadius
    void setDetailAO(float) -> setDetailAO
    void setCoarseAO(float) -> setCoarseAO
    void setPowerExponent(float) -> setPowerExponent
    void setDepthStorage(int) -> setDepthStorage
    void setDepthClampMode(int) -> setDepthClampMode
    void setDepthThreshold(boolean,float,float) -> setDepthThreshold
    void setBlur(boolean,int,float) -> setBlur
    void setBlurSharpen(boolean,float,float,float) -> setBlurSharpen
    void debugControl(int) -> debugControl
    java.lang.String[] getCallStack() -> getCallStack
nidefawl.qubes.render.post.SMAA -> IjL1llL1L1iJIjiJ:
    nidefawl.qubes.util.SimpleResourceManager mgr -> do
    nidefawl.qubes.shader.Shader shaderAAEdge -> do
    nidefawl.qubes.shader.Shader shaderAABlendWeight -> if
    nidefawl.qubes.shader.Shader shaderAANeighborBlend -> for
    nidefawl.qubes.gl.FrameBuffer fbAAEdge -> do
    nidefawl.qubes.gl.FrameBuffer fbAAWeightBlend -> if
    int areaTex -> do
    int searchTex -> if
    java.lang.String[] qualDefines -> do
    java.lang.String[] qualDesc -> if
    91:108:void init(int,int) -> do
    112:145:int makeAATexture(byte[],int,int,int,int,int) -> do
    149:151:void releaseAll(nidefawl.qubes.util.EResourceType) -> do
    158:219:void render(int,int) -> if
nidefawl.qubes.render.post.SMAA$1 -> iJ1LiJllIjjIiJL1:
    int val$quality -> do
    nidefawl.qubes.render.post.SMAA this$0 -> do
    58:61:java.lang.String getDefinition(java.lang.String) -> do
nidefawl.qubes.render.region.MeshedRegion -> IjJiiJIjllL1IjL1:
    int[] vertexCount -> do
    int[] elementCount -> if
    boolean[] hasPass -> do
    int rX -> do
    int rZ -> if
    int rY -> for
    boolean xNeg -> do
    boolean xPos -> if
    boolean zPos -> for
    boolean zNeg -> int
    nidefawl.qubes.vec.AABBInt aabb -> do
    int[] frustumStates -> for
    boolean needsUpdate -> new
    boolean isUpdating -> try
    boolean isRenderable -> byte
    boolean isValid -> case
    int failedCached -> int
    boolean hasAnyPass -> char
    nidefawl.qubes.gl.GLVBO[] vbo -> do
    nidefawl.qubes.gl.GLVBO[] vboIndices -> if
    int shadowDrawMode -> else
    boolean frustumStateChanged -> else
    int occlusionQueryState -> new
    int occlusionResult -> try
    int occlFrameSkips -> byte
    int distance -> case
    nidefawl.qubes.vec.Vector3f queryPos -> do
    long totalBytes -> do
    long[] alloc -> do
    long[] totalBytesPass -> if
    int nextBuffer -> char
    58:62:void renderRegion(float,int) -> do
    67:85:void preUploadBuffers() -> do
    92:122:void uploadBuffer(int,nidefawl.qubes.gl.VertexBuffer,int) -> do
    126:145:void release() -> if
    148:148:int getNumVertices(int) -> do
    152:152:boolean hasPass(int) -> do
    156:167:void updateBB() -> for
    171:171:java.lang.String toString() -> toString
    177:177:boolean hasAnyPass() -> do
    180:180:int getShadowDrawMode() -> do
nidefawl.qubes.render.region.RegionRenderer -> JijIjI1LIjIjL1Ji:
    int RENDER_DISTANCE -> do
    int OFFS_OVER -> if
    int LENGTH_OVER -> for
    int HEIGHT_SLICES -> int
    java.util.Comparator compareUpdateRenderers -> do
    java.util.Comparator compareRenderers -> if
    int rendered -> new
    int occlCulled -> try
    int renderChunkX -> byte
    int renderChunkY -> case
    int renderChunkZ -> char
    java.util.ArrayList renderList -> if
    java.util.ArrayList shadowRenderList -> for
    java.util.ArrayList regionsToUpdate -> int
    boolean needsSortingUpdateRenderers -> do
    int[] occlQueries -> do
    nidefawl.qubes.render.region.MeshedRegion[] occlQueriesRunning -> do
    int queriesRunning -> else
    nidefawl.qubes.shader.Shader occlQueryShader -> do
    boolean startup -> for
    float camX -> do
    float camY -> if
    float camZ -> for
    nidefawl.qubes.render.region.MeshedRegion[][] regions -> do
    int numV -> goto
    nidefawl.qubes.gl.ReallocIntBuffer[] buffers -> do
    nidefawl.qubes.gl.ReallocIntBuffer[] idxShortBuffers -> if
    java.util.ArrayList justrendered -> do
    112:116:void init() -> do
    120:137:void initShaders() -> if
    140:154:nidefawl.qubes.render.region.MeshedRegion[][] create() -> do
    158:201:void reposition(int,int) -> if
    204:215:nidefawl.qubes.render.region.MeshedRegion getByChunkCoord(int,int,int) -> do
    218:224:nidefawl.qubes.render.region.MeshedRegion getByRegionCoord(int,int,int) -> if
    228:244:void resetAll() -> for
    247:251:void setRenderDistance(int) -> do
    254:279:void reRender() -> int
    283:300:void flagBlock(int,int,int) -> do
    303:316:void flagChunk(int,int) -> do
    320:333:void renderMainPost(nidefawl.qubes.world.World,float,nidefawl.qubes.render.WorldRenderer) -> do
    335:401:void renderMainPre(nidefawl.qubes.world.World,float,nidefawl.qubes.render.WorldRenderer) -> if
    404:485:void renderMain(nidefawl.qubes.world.World,float,nidefawl.qubes.render.WorldRenderer) -> for
    488:515:void renderRegions(nidefawl.qubes.world.World,float,int,int,int) -> do
    518:521:void flushRegions() -> new
    523:524:void putRegion(nidefawl.qubes.render.region.MeshedRegion) -> do
    529:656:void update(nidefawl.qubes.world.WorldClient,float,float,float,int,int,float) -> do
    661:680:void updateFrustum(nidefawl.qubes.render.region.MeshedRegion) -> if
    682:703:void tickUpdate() -> else
    706:710:void sortUpdateRenderers() -> goto
    714:715:void sortRenderers() -> long
    720:726:int sortUpdateRenderersCompare(nidefawl.qubes.render.region.MeshedRegion,nidefawl.qubes.render.region.MeshedRegion) -> do
    732:738:int sortRenderersCompare(nidefawl.qubes.render.region.MeshedRegion,nidefawl.qubes.render.region.MeshedRegion) -> if
nidefawl.qubes.render.region.RegionRenderer$1 -> iJllJijIL1llJi1L:
    nidefawl.qubes.render.region.RegionRenderer this$0 -> do
    50:50:int compare(nidefawl.qubes.render.region.MeshedRegion,nidefawl.qubes.render.region.MeshedRegion) -> do
    47:47:int compare(java.lang.Object,java.lang.Object) -> compare
nidefawl.qubes.render.region.RegionRenderer$2 -> iJ1LIj1LJiIjL11L:
    nidefawl.qubes.render.region.RegionRenderer this$0 -> do
    56:56:int compare(nidefawl.qubes.render.region.MeshedRegion,nidefawl.qubes.render.region.MeshedRegion) -> do
    53:53:int compare(java.lang.Object,java.lang.Object) -> compare
nidefawl.qubes.shader.AbstractUniform -> JiIjll1LlljIiJJi:
    java.lang.String name -> do
    int loc -> do
    boolean first -> do
    13:13:boolean validLoc() -> do
    18:18:void release() -> do
nidefawl.qubes.shader.ComputeShader -> L1iJjI1LiJ1L1LiJ:
    int computeShader -> do
    40:47:void attach() -> do
    49:66:void release() -> long
nidefawl.qubes.shader.GraphicShader -> IjlliJjIJiJiJi1L:
    int fragShader -> do
    int vertShader -> if
    int geometryShader -> for
    java.lang.String attr -> if
    98:145:void attach() -> do
    147:172:void release() -> long
nidefawl.qubes.shader.IShaderDef -> iJ1LJiL11Lll1LiJ:
    java.lang.String getDefinition(java.lang.String) -> do
nidefawl.qubes.shader.Shader -> IjJiIjjIllllllL1:
    int SHADERS -> int
    int shader -> new
    java.lang.String name -> do
    java.util.HashMap locations -> do
    java.util.HashMap uniforms -> if
    java.util.HashMap missinglocations -> for
    boolean valid -> do
    nidefawl.qubes.shader.ShaderSourceBundle src -> do
    java.util.HashMap map -> int
    java.nio.IntBuffer buf -> do
    int lastBoundShader -> try
    31:32:void incUniformCalls() -> if
    36:51:int getUniformLocation(java.lang.String) -> do
    61:61:java.lang.String getName() -> do
    77:96:void linkProgram() -> for
    100:102:int getStatus(int,int) -> do
    106:114:java.lang.String getLog(int,int) -> do
    117:129:void enable() -> int
    132:135:void disable() -> new
    139:143:void setProgramUniform1i(java.lang.String,int) -> do
    152:156:void setProgramUniform2f(java.lang.String,float,float) -> do
    158:162:void setProgramUniform1f(java.lang.String,float) -> do
    164:168:void setProgramUniform3f(java.lang.String,float,float,float) -> do
    170:184:nidefawl.qubes.shader.AbstractUniform getUniform(java.lang.String,java.lang.Class) -> do
    188:192:void setProgramUniform4f(java.lang.String,float,float,float,float) -> do
    204:208:void setProgramUniformMatrix4(java.lang.String,boolean,java.nio.FloatBuffer,boolean) -> do
    234:234:nidefawl.qubes.util.EResourceType getType() -> do
    248:249:void setSource(nidefawl.qubes.shader.ShaderSourceBundle) -> do
nidefawl.qubes.shader.ShaderBuffer -> JiiJjIL1L1Ij:
    java.util.List buffers -> do
    int nextIdx -> do
    java.lang.String name -> do
    int buffer -> for
    int len -> if
    int bindingPoint -> int
    java.util.List shaders -> if
    java.nio.ByteBuffer buf -> if
    java.nio.FloatBuffer bufFloat -> if
    java.nio.IntBuffer bufInt -> do
    java.nio.ByteBuffer readBuf -> do
    java.nio.FloatBuffer readBufFloat -> do
    51:52:nidefawl.qubes.shader.ShaderBuffer setSize(int) -> do
    55:80:void update() -> do
    82:97:void setup() -> if
    100:107:void rebindShaders() -> for
    109:114:void init() -> int
    116:129:void bindBuffers(nidefawl.qubes.shader.Shader) -> do
    135:143:void addShader(nidefawl.qubes.shader.Shader) -> if
    145:145:java.nio.FloatBuffer getFloatBuffer() -> do
    152:164:java.nio.ByteBuffer map(boolean) -> do
    168:184:java.nio.ByteBuffer _map(boolean) -> if
    198:199:void unmap() -> new
    201:202:void unbind() -> try
    204:205:void bind() -> byte
nidefawl.qubes.shader.ShaderCompileError -> jIiJJiIj1LIj1LJi:
    java.lang.String name -> do
    java.lang.String log -> if
    nidefawl.qubes.shader.ShaderSource code -> do
    31:31:java.lang.String getName() -> do
    35:35:java.lang.String getLog() -> if
    43:43:nidefawl.qubes.shader.ShaderSource getShaderSource() -> do
nidefawl.qubes.shader.ShaderSource -> L1Ijll1LllIjL1Ij:
    java.util.regex.Pattern patternInclude -> do
    java.util.regex.Pattern patternDefine -> if
    java.util.regex.Pattern patternAttr -> for
    java.util.regex.Pattern lineErrorAMD -> int
    java.util.regex.Pattern lineErrorNVIDIA -> new
    java.util.HashMap sources -> do
    java.util.HashMap sourceNames -> if
    java.lang.String processed -> do
    int nInclude -> do
    java.lang.String attrTypes -> if
    nidefawl.qubes.shader.ShaderSourceBundle shaderSourceBundle -> do
    41:42:void load(nidefawl.qubes.assets.AssetManager,java.lang.String,java.lang.String,nidefawl.qubes.shader.IShaderDef) -> do
    44:149:java.lang.String readParse(nidefawl.qubes.assets.AssetManager,java.lang.String,java.lang.String,nidefawl.qubes.shader.IShaderDef,boolean) -> do
    157:187:java.lang.String getGlobalDef(java.lang.String) -> if
    190:190:boolean isEmpty() -> do
    193:193:java.lang.String getSource() -> do
    196:234:java.lang.String decorateErrors(java.lang.String) -> do
    237:237:java.lang.String getAttrTypes() -> if
nidefawl.qubes.shader.ShaderSourceBundle -> JijIL1ll1LiJjIL1:
    nidefawl.qubes.shader.ShaderSource computeCode -> do
    nidefawl.qubes.shader.ShaderSource vertCode -> if
    nidefawl.qubes.shader.ShaderSource fragCode -> for
    nidefawl.qubes.shader.ShaderSource geomCode -> int
    java.lang.String name -> do
    19:23:void load(nidefawl.qubes.assets.AssetManager,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,nidefawl.qubes.shader.IShaderDef) -> do
    26:30:nidefawl.qubes.shader.Shader compileShader() -> do
nidefawl.qubes.shader.Shaders -> iJ1LiJ1LiJjIll1L:
    nidefawl.qubes.util.SimpleResourceManager shaders -> do
    nidefawl.qubes.util.SimpleResourceManager newshaders -> if
    boolean startup -> do
    nidefawl.qubes.shader.Shader depthBufShader -> do
    nidefawl.qubes.shader.Shader normals -> if
    nidefawl.qubes.shader.Shader wireframe -> for
    nidefawl.qubes.shader.Shader texturedAlphaTest -> int
    nidefawl.qubes.shader.Shader textured -> new
    nidefawl.qubes.shader.Shader colored -> try
    nidefawl.qubes.shader.Shader colored3D -> byte
    nidefawl.qubes.shader.Shader textured3D -> case
    nidefawl.qubes.shader.Shader renderUINT -> char
    nidefawl.qubes.shader.Shader singleblock -> else
    nidefawl.qubes.shader.Shader gui -> goto
    nidefawl.qubes.shader.Shader item -> long
    nidefawl.qubes.shader.Shader tonemap -> this
    17:18:void init() -> do
    37:122:void initShaders() -> if
nidefawl.qubes.shader.Shaders$1 -> JijIiJIjllL1L1jI:
    49:52:java.lang.String getDefinition(java.lang.String) -> do
nidefawl.qubes.shader.Uniform1f -> llL1iJIjiJL1IjIj:
    float lastX -> do
    14:19:boolean set(float) -> do
    24:28:boolean set() -> if
nidefawl.qubes.shader.Uniform1i -> llIj1LjIIjJiIjjI:
    int lastX -> if
    14:21:boolean set(int) -> do
    26:30:boolean set() -> if
nidefawl.qubes.shader.Uniform2f -> JijI1LJiIjJiIjiJ:
    float lastX -> do
    float lastY -> if
    15:23:boolean set(float,float) -> do
    28:32:boolean set() -> if
nidefawl.qubes.shader.Uniform3f -> lllliJ1LL1iJjIiJ:
    float lastX -> do
    float lastY -> if
    float lastZ -> for
    18:27:boolean set(float,float,float) -> do
    32:36:boolean set() -> if
nidefawl.qubes.shader.Uniform4f -> iJJi1LL1JiiJ1LL1:
    float lastX -> do
    float lastY -> if
    float lastZ -> for
    float lastW -> int
    17:27:boolean set(float,float,float,float) -> do
    32:36:boolean set() -> if
nidefawl.qubes.shader.UniformBuffer -> Ji1LJillL1L11Lll:
    int nextIdx -> do
    nidefawl.qubes.shader.UniformBuffer[] buffers -> do
    java.lang.String name -> do
    int buffer -> for
    int len -> if
    java.nio.FloatBuffer floatBuffer -> do
    int bindingPoint -> int
    nidefawl.qubes.shader.UniformBuffer uboMatrix3D -> do
    nidefawl.qubes.shader.UniformBuffer uboMatrix2D -> if
    nidefawl.qubes.shader.UniformBuffer uboMatrixShadow -> for
    nidefawl.qubes.shader.UniformBuffer uboSceneData -> int
    nidefawl.qubes.shader.UniformBuffer LightInfo -> new
    nidefawl.qubes.shader.UniformBuffer VertexDirections -> try
    nidefawl.qubes.shader.UniformBuffer TBNMat -> byte
    java.util.List shaders -> do
    boolean once -> do
    41:42:nidefawl.qubes.shader.UniformBuffer addMat4() -> do
    45:46:nidefawl.qubes.shader.UniformBuffer addVec4() -> if
    49:50:nidefawl.qubes.shader.UniformBuffer addFloat() -> for
    53:54:void setPosition(int) -> do
    56:57:void reset() -> do
    59:60:void put(java.nio.FloatBuffer) -> do
    62:63:void put(float[]) -> do
    68:69:void put(float) -> do
    75:79:void put(float,float,float) -> do
    81:82:void putNeg(float,float,float) -> if
    84:93:void update() -> if
    95:104:void setup() -> for
    106:115:void release() -> else
    156:161:void init() -> int
    163:167:void destroy() -> new
    170:177:void rebindShaders() -> try
    180:193:void bindBuffers(nidefawl.qubes.shader.Shader) -> do
    200:208:void addShader(nidefawl.qubes.shader.Shader) -> if
    217:318:void updateUBO(nidefawl.qubes.world.WorldClient,float) -> do
    324:384:void updateTBNMatrices() -> goto
    389:460:void updateVertDir() -> long
    465:471:void updateOrtho() -> byte
    474:477:void setNormalMat(java.nio.FloatBuffer) -> if
    485:495:void updateSceneMatrices() -> case
    497:503:void updatePxOffset() -> char
nidefawl.qubes.shader.UniformMat4 -> ll1LiJJi1LiJ:
    float[] last -> do
    boolean transpose -> if
    java.nio.FloatBuffer buf -> do
    19:38:boolean set(java.nio.FloatBuffer,boolean) -> do
    56:60:void release() -> do
nidefawl.qubes.texture.PNGDecoder -> L1ll1L1LL1L1L11L:
    byte[] SIGNATURE -> do
    java.io.InputStream input -> do
    java.util.zip.CRC32 crc -> do
    byte[] buffer -> if
    int chunkLength -> do
    int chunkType -> if
    int chunkRemaining -> for
    int width -> int
    int height -> new
    int bitdepth -> try
    int colorType -> byte
    int bytesPerPixel -> case
    byte[] palette -> for
    byte[] paletteA -> int
    byte[] transPixel -> new
    boolean $assertionsDisabled -> do
    109:109:int getBitdepth() -> do
    113:113:int getHeight() -> if
    117:117:int getWidth() -> for
    186:219:nidefawl.qubes.texture.PNGDecoder$Format decideTextureFormat(nidefawl.qubes.texture.PNGDecoder$Format) -> do
    236:350:void decode(java.nio.ByteBuffer,int,nidefawl.qubes.texture.PNGDecoder$Format) -> do
    376:377:void copy(java.nio.ByteBuffer,byte[]) -> do
    380:399:void copyRGBtoABGR(java.nio.ByteBuffer,byte[]) -> if
    402:421:void copyRGBtoRGBA(java.nio.ByteBuffer,byte[]) -> for
    424:443:void copyRGBtoBGRA(java.nio.ByteBuffer,byte[]) -> int
    446:449:void copyRGBAtoABGR(java.nio.ByteBuffer,byte[]) -> new
    452:455:void copyRGBAtoBGRA(java.nio.ByteBuffer,byte[]) -> try
    458:461:void copyRGBAtoRGB(java.nio.ByteBuffer,byte[]) -> byte
    464:468:void copyGreyscaleToARGB(java.nio.ByteBuffer,byte[]) -> case
    472:491:void copyPALtoARGB(java.nio.ByteBuffer,byte[]) -> char
    494:497:void copyRGBAtoARGB(java.nio.ByteBuffer,byte[]) -> else
    499:518:void copyRGBtoARGB(java.nio.ByteBuffer,byte[]) -> goto
    521:540:void copyPALtoABGR(java.nio.ByteBuffer,byte[]) -> long
    543:562:void copyPALtoRGBA(java.nio.ByteBuffer,byte[]) -> this
    565:584:void copyPALtoBGRA(java.nio.ByteBuffer,byte[]) -> void
    587:594:void expand4(byte[],byte[]) -> do
    597:606:void expand2(byte[],byte[]) -> if
    609:622:void expand1(byte[],byte[]) -> for
    624:642:void unfilter(byte[],byte[]) -> int
    645:649:void unfilterSub(byte[]) -> do
    652:656:void unfilterUp(byte[],byte[]) -> new
    659:668:void unfilterAverage(byte[],byte[]) -> try
    671:691:void unfilterPaeth(byte[],byte[]) -> byte
    694:751:void readIHDR() -> do
    754:760:void readPLTE() -> if
    763:785:void readtRNS() -> for
    788:802:void closeChunk() -> int
    805:811:void openChunk() -> new
    814:818:void openChunk(int) -> do
    821:824:void checkChunkLength(int) -> if
    827:833:int readChunk(byte[],int,int) -> do
    837:843:void refillInflater(java.util.zip.Inflater) -> do
    846:867:void readChunkUnzip(java.util.zip.Inflater,byte[],int,int) -> do
    871:878:void readFully(byte[],int,int) -> do
    881:881:int readInt(byte[],int) -> do
    889:896:void skip(long) -> do
    899:904:boolean checkSignature(byte[]) -> do
nidefawl.qubes.texture.PNGDecoder$1 -> iJjIll1LL11LL1Ji:
    int[] $SwitchMap$nidefawl$qubes$texture$PNGDecoder$Format -> do
nidefawl.qubes.texture.PNGDecoder$Format -> llJijIiJllJiJi1L:
    nidefawl.qubes.texture.PNGDecoder$Format ALPHA -> do
    nidefawl.qubes.texture.PNGDecoder$Format LUMINANCE -> if
    nidefawl.qubes.texture.PNGDecoder$Format LUMINANCE_ALPHA -> for
    nidefawl.qubes.texture.PNGDecoder$Format RGB -> int
    nidefawl.qubes.texture.PNGDecoder$Format RGBA -> new
    nidefawl.qubes.texture.PNGDecoder$Format BGRA -> try
    nidefawl.qubes.texture.PNGDecoder$Format ABGR -> byte
    nidefawl.qubes.texture.PNGDecoder$Format ARGB -> case
    int numComponents -> do
    boolean hasAlpha -> do
    nidefawl.qubes.texture.PNGDecoder$Format[] $VALUES -> do
    14:14:nidefawl.qubes.texture.PNGDecoder$Format[] values() -> values
    14:14:nidefawl.qubes.texture.PNGDecoder$Format valueOf(java.lang.String) -> valueOf
    33:33:int getNumComponents() -> do
nidefawl.qubes.texture.TMgr -> iJjIiJIjL1llJiIj:
    11:11:int getNoise() -> do
    15:15:int getBlocks() -> if
    19:19:int getItems() -> for
    27:27:int getEmpty() -> int
    39:39:int getNormals() -> new
nidefawl.qubes.texture.TextureManager -> jI1L1LL1llJijIJi:
    nidefawl.qubes.texture.TextureManager instance -> do
    int texNoise -> do
    int texEmpty -> if
    int texEmptyNormal -> for
    java.nio.ByteBuffer directBuf -> do
    int texEmptyWhite -> int
    41:41:nidefawl.qubes.texture.TextureManager getInstance() -> do
    46:57:void init() -> do
    60:69:void reload() -> if
    77:92:int makeNewTexture(byte[],int,int,boolean,boolean,int) -> do
    96:96:int makeNewTexture(nidefawl.qubes.assets.AssetTexture,boolean,boolean,int) -> do
    106:155:void uploadTexture(byte[],int,int,int,int,int,boolean,boolean,int) -> do
    162:162:void destroy() -> for
nidefawl.qubes.texture.TextureUtil -> JillL11LjIIjL1jI:
    20:28:byte[] genNoise2(int) -> do
    173:191:int getAverageColor(byte[],int,int) -> do
    199:199:int clampRGB(int) -> do
    208:249:byte[] makeMipMap(byte[],int,int,int) -> do
    258:268:void clampAlpha(byte[],int,int) -> do
    271:283:byte[] toBytesRGBA(int[]) -> do
    327:327:float getR(int) -> do
    330:330:float getG(int) -> if
    333:333:float getB(int) -> for
    337:350:int mixRGB(int,int,float) -> do
    354:371:int mix3RGB(int,int,int) -> do
nidefawl.qubes.texture.array.BlockNormalMapArray -> L1L1IjL1iJiJiJ1L:
    nidefawl.qubes.texture.array.BlockNormalMapArray instance -> do
    27:27:nidefawl.qubes.texture.array.BlockNormalMapArray getInstance() -> do
    39:44:void findMaxTileWidth() -> do
    49:74:void collectTextures(nidefawl.qubes.assets.AssetManager) -> do
    77:131:void uploadTextures() -> if
    136:154:void postUpload() -> for
nidefawl.qubes.texture.array.BlockTextureArray -> L1iJ1L1LllL11LL1:
    nidefawl.qubes.texture.array.BlockTextureArray instance -> do
    30:30:nidefawl.qubes.texture.array.BlockTextureArray getInstance() -> do
    38:57:void postUpload() -> for
    60:102:void uploadTextures() -> if
    106:130:void collectTextures(nidefawl.qubes.assets.AssetManager) -> do
nidefawl.qubes.texture.array.ItemTextureArray -> iJJiJilliJiJiJL1:
    nidefawl.qubes.texture.array.ItemTextureArray instance -> do
    30:30:nidefawl.qubes.texture.array.ItemTextureArray getInstance() -> do
    40:84:void uploadTextures() -> if
    88:112:void collectTextures(nidefawl.qubes.assets.AssetManager) -> do
    116:134:void postUpload() -> for
nidefawl.qubes.texture.array.TextureArray -> JiIjiJIjlliJJill:
    java.util.HashMap texNameToAssetMap -> do
    java.util.HashMap blockIDToAssetList -> if
    java.util.HashMap slotTextureMap -> for
    boolean firstInit -> do
    int[] textures -> do
    int glid -> do
    int tileSize -> if
    int numTextures -> for
    int numMipmaps -> int
    int subtypeBits -> new
    boolean report -> if
    float loadprogress -> do
    float uploadprogress -> if
    44:51:void unload() -> int
    53:54:void init() -> new
    57:59:void preUpdate() -> try
    61:70:void _load() -> this
    72:74:void load() -> byte
    77:82:void reload() -> case
    86:92:void postUpdate() -> char
    95:98:void free() -> void
    106:112:java.nio.ByteBuffer put(java.nio.ByteBuffer,byte[]) -> do
    116:116:int getTextureIdx(int,int) -> do
    119:120:void setTexture(int,int,int) -> do
    125:131:void calculateSubtypeBits() -> else
    133:152:void findMaxTileWidth() -> do
    155:160:void upscaleTextures() -> goto
    164:173:void initGLStorage() -> long
    void uploadTextures() -> if
    void collectTextures(nidefawl.qubes.assets.AssetManager) -> do
    void postUpload() -> for
    180:180:float getProgress() -> do
nidefawl.qubes.util.BlockColl -> iJL1llL1jI1LL1iJ:
    int x -> do
    int y -> if
    int z -> for
    int type -> int
    nidefawl.qubes.vec.AABB blockBB -> do
nidefawl.qubes.util.ClipboardHelper -> jI1LjIllJiJiJi:
    10:11:void setClipboardString(java.lang.String) -> do
    14:15:java.lang.String getClipboardString() -> do
nidefawl.qubes.util.CollisionQuery -> L1iJL1IjllIjllL1:
    java.util.ArrayList collisions -> do
    java.util.ArrayList tempList -> if
    nidefawl.qubes.vec.AABBFloat[] tmpBBs -> do
    int numCollisions -> do
    nidefawl.qubes.vec.AABBFloat tmpBB -> do
    23:26:nidefawl.qubes.util.BlockColl get() -> do
    29:66:void query(nidefawl.qubes.world.World,nidefawl.qubes.vec.AABB) -> do
    69:69:int getNumCollisions() -> do
    72:72:nidefawl.qubes.util.BlockColl get(int) -> do
nidefawl.qubes.util.Color -> L1IjIjllL1iJIjiJ:
    5:47:int HSBtoRGB(float,float,float) -> do
    51:83:float[] RGBtoHSB(int,int,int,float[]) -> do
nidefawl.qubes.util.CrashInfo -> nidefawl.qubes.util.CrashInfo:
    java.lang.String title -> title
    java.lang.String desc -> desc
    java.lang.String outBuf -> outBuf
    java.lang.String errBuf -> errBuf
    java.lang.String exc -> exc
    40:42:void setLogBuf(java.lang.String) -> setLogBuf
    48:50:void setErrBuf(java.lang.String) -> setErrBuf
    56:61:void setException(java.lang.Throwable) -> setException
nidefawl.qubes.util.EResourceType -> L1jIL11LIjIjiJL1:
    nidefawl.qubes.util.EResourceType SHADER -> do
    nidefawl.qubes.util.EResourceType FRAMEBUFFER -> if
    nidefawl.qubes.util.EResourceType[] $VALUES -> do
    10:10:nidefawl.qubes.util.EResourceType[] values() -> values
    10:10:nidefawl.qubes.util.EResourceType valueOf(java.lang.String) -> valueOf
nidefawl.qubes.util.GameContext -> JiL1JillL1llIjll:
    java.lang.Thread mainThread -> do
    nidefawl.qubes.util.Side side -> do
    nidefawl.qubes.util.GameError initError -> do
    long startBoot -> do
    23:23:long getTimeSinceStart() -> do
    28:29:void setMainThread(java.lang.Thread) -> do
    37:37:java.lang.Thread getMainThread() -> do
    44:44:nidefawl.qubes.util.Side getSide() -> do
    48:51:void setSideAndPath(nidefawl.qubes.util.Side,java.lang.String) -> do
    58:68:void earlyInit() -> do
    74:74:nidefawl.qubes.util.GameError getInitError() -> do
    81:100:void lateInit() -> if
nidefawl.qubes.util.GameError -> jIjIjIllJilljI1L:
nidefawl.qubes.util.GameMath -> JijI1LL1IjjIIjll:
    float[] m -> do
    float[] inv -> if
    12:12:float cos(float) -> do
    15:15:float sin(float) -> if
    20:20:float atan(float) -> for
    25:25:float atan2(float,float) -> do
    39:40:int floor(double) -> do
    43:43:int ceil(double) -> if
    51:91:void invertMat4x(java.nio.FloatBuffer,java.nio.FloatBuffer) -> do
    120:120:float coTangent(float) -> int
    124:124:float degreesToRadians(float) -> new
    128:128:float sqrtf(float) -> try
    132:135:int randomI(long) -> do
    144:144:int lhToZ(long) -> if
    147:147:int lhToX(long) -> for
    150:150:long toLong(int,int) -> do
    170:176:int log2(int) -> do
    179:179:int signum(float) -> do
    182:182:boolean isNormalFloat(float) -> do
    192:192:float clamp(float,float,float) -> do
    195:198:int distSq3Di(int,int,int,int,int,int) -> do
    237:251:double getAngle(double,double,double,double) -> do
    254:254:float tan(float) -> byte
    259:259:float easeInOutCubic(float) -> case
    262:273:int[] downsample(int,int,int) -> do
    277:277:int round(float) -> if
    280:285:float wrapAngle(float) -> char
nidefawl.qubes.util.Half -> iJL1IjiJiJIjJi:
    41:61:int fromFloat(float) -> do
nidefawl.qubes.util.IManagedResource -> jIiJIjlliJJiJill:
    void release() -> long
    nidefawl.qubes.util.EResourceType getType() -> do
nidefawl.qubes.util.IResourceManager -> IjIjJijIiJ1LIj1L:
    void addResource(nidefawl.qubes.util.IManagedResource) -> do
nidefawl.qubes.util.Project -> Ij1L1L1L1LllJiJi:
    float[] IDENTITY_MATRIX -> do
    java.nio.FloatBuffer finalMatrix -> do
    java.nio.FloatBuffer tempMatrix -> if
    float[] in -> if
    float[] out -> for
    nidefawl.qubes.vec.Vector3f tmp3 -> do
    nidefawl.qubes.vec.Vector3f tmp4 -> if
    nidefawl.qubes.vec.Vector3f tmp5 -> for
    45:78:boolean gluUnProject(float,float,float,java.nio.FloatBuffer,java.nio.FloatBuffer,java.nio.IntBuffer,java.nio.FloatBuffer) -> do
    90:155:boolean __gluInvertMatrixf(java.nio.FloatBuffer,java.nio.FloatBuffer) -> do
    162:165:void __gluMakeIdentityf(java.nio.FloatBuffer) -> do
    172:178:void __gluMultMatricesf(java.nio.FloatBuffer,java.nio.FloatBuffer,java.nio.FloatBuffer) -> do
    188:196:void __gluMultMatrixVecf(java.nio.FloatBuffer,float[],float[]) -> do
    199:210:void fovProjMat(float,float,float,float,nidefawl.qubes.vec.Matrix4f) -> do
    213:221:void orthoMat(float,float,float,float,float,float,nidefawl.qubes.vec.Matrix4f) -> do
    229:261:void lookAt(float,float,float,float,float,float,float,float,float,nidefawl.qubes.vec.Matrix4f) -> do
nidefawl.qubes.util.RayTrace -> IjIjjIIjL11LlljI:
    nidefawl.qubes.vec.Vector3f dirFrac -> do
    nidefawl.qubes.vec.AABBFloat bb -> do
    nidefawl.qubes.util.RayTrace$RayTraceIntersection intersection -> do
    nidefawl.qubes.vec.BlockPos quarter -> do
    boolean quarterMode -> do
    41:42:void reset() -> do
    45:142:void doRaytrace(nidefawl.qubes.world.World,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f,int) -> do
    146:173:boolean callback(nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f) -> do
    185:185:float intbound(float,float) -> do
    190:190:boolean hasHit() -> do
    193:193:nidefawl.qubes.util.RayTrace$RayTraceIntersection getHit() -> do
    201:201:nidefawl.qubes.vec.AABBFloat getTempBB() -> do
    211:222:void setIntersection(nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f,float,int) -> do
nidefawl.qubes.util.RayTrace$HitType -> IjjIL1JijIll1LiJ:
    nidefawl.qubes.util.RayTrace$HitType BLOCK -> do
    nidefawl.qubes.util.RayTrace$HitType NONE -> if
    nidefawl.qubes.util.RayTrace$HitType[] $VALUES -> do
    13:13:nidefawl.qubes.util.RayTrace$HitType[] values() -> values
    13:13:nidefawl.qubes.util.RayTrace$HitType valueOf(java.lang.String) -> valueOf
nidefawl.qubes.util.RayTrace$RayTraceIntersection -> iJIjiJIjiJJiiJiJ:
    nidefawl.qubes.util.RayTrace$HitType hit -> do
    int blockId -> do
    nidefawl.qubes.vec.BlockPos blockPos -> do
    nidefawl.qubes.vec.BlockPos q -> if
    nidefawl.qubes.vec.Vector3f pos -> do
    float distance -> do
    int face -> if
nidefawl.qubes.util.RegionMap -> L1lliJL1iJiJ1LjI:
    com.google.common.collect.Multimap mmap -> do
    byte bits -> do
nidefawl.qubes.util.RenderUtil -> ll1LjIL1IjL1llll:
    133:133:int packNormal(nidefawl.qubes.vec.Vector3f) -> do
    136:140:int packNormal(float,float,float) -> do
    143:143:int packTexCoord(float,float) -> do
nidefawl.qubes.util.Renderable -> L11LJillJiIjIj1L:
    void render(float,double,double) -> do
    void initGui(boolean) -> if
nidefawl.qubes.util.Side -> IjlljIllL1iJlljI:
    nidefawl.qubes.util.Side CLIENT -> do
    nidefawl.qubes.util.Side SERVER -> if
    nidefawl.qubes.util.Side[] $VALUES -> do
    3:3:nidefawl.qubes.util.Side[] values() -> values
    3:3:nidefawl.qubes.util.Side valueOf(java.lang.String) -> valueOf
nidefawl.qubes.util.SimpleResourceManager -> lllliJlljI1LjIiJ:
    java.util.List resources -> do
    20:21:void addResource(nidefawl.qubes.util.IManagedResource) -> do
    25:28:void release() -> do
    32:38:void releaseAll(nidefawl.qubes.util.EResourceType) -> do
nidefawl.qubes.util.SingleBlockWorld -> JiL1jIllJiiJiJiJ:
    int id -> do
    int data -> if
    nidefawl.qubes.vec.BlockPos pos -> do
    int airId -> for
    int airData -> int
    int light -> new
    nidefawl.qubes.chunk.blockdata.BlockData bdata -> do
    nidefawl.qubes.biome.Biome biome -> do
    32:35:void set(int,int,int,int,int) -> do
    47:50:int getType(int,int,int) -> if
    60:60:boolean is(int,int,int) -> do
    80:82:int getData(int,int,int) -> do
    87:90:boolean isNormalBlock(int,int,int,int) -> do
    100:100:int getLight(int,int,int) -> int
    105:105:nidefawl.qubes.chunk.blockdata.BlockData getBlockData(int,int,int) -> do
    112:113:void setBlockData(nidefawl.qubes.chunk.blockdata.BlockData) -> do
    129:129:int getBiomeFaceColor(int,int,int,int,int,nidefawl.qubes.biome.BiomeColor) -> do
    134:134:int getWater(int,int,int) -> for
nidefawl.qubes.util.Stats -> IjjIL1IjjI1Lll:
    int fpsCounter -> do
    int uniformCalls -> if
    float avgFrameTime -> do
    double timeMeshing -> do
    double timeRendering -> if
    double fpsInteval -> for
    int regionUpdates -> for
    float lastFrameTimeD -> if
    int tessDrawCalls -> int
    int modelDrawCalls -> new
    int regionDrawCalls -> try
    int lastFrameDrawCalls -> byte
    int uploadBytes -> case
    19:24:void resetDrawCalls() -> do
nidefawl.qubes.util.StringUtil -> JiiJJilllljIjIll:
    40:42:int parseInt(java.lang.String,int) -> do
nidefawl.qubes.util.SysInfo -> L1iJL1iJ1LIjlljI:
    java.lang.String osName -> do
    boolean isWindows -> do
    boolean is64Bit -> if
    java.lang.String javaVersion -> if
    long memoryMb -> do
    java.lang.String javaMachineVersion -> for
    java.lang.String openGLVersion -> int
    java.lang.String openGLVendor -> new
nidefawl.qubes.util.Timer -> L1Ij1LL1IjjIIjJi:
    int tickspersec -> if
    long ms -> for
    long ns -> int
    long last -> new
    int ticks -> do
    float partialTick -> do
    long el -> do
    long absTime -> if
    25:83:long getTime() -> do
    87:93:void calculate() -> do
nidefawl.qubes.util.TripletIntHash -> lllliJJilliJjIL1:
    6:8:int toHash(int,int,int) -> do
nidefawl.qubes.util.TripletLongHash -> llJiJiL1L1jIiJ1L:
    6:8:long toHash(long,long,long) -> do
nidefawl.qubes.util.TripletShortHash -> llL11LIjlllliJJi:
    9:9:int getX(int) -> do
    12:12:int getZ(int) -> if
    15:15:int getY(int) -> for
nidefawl.qubes.util.UnsafeHelper -> L1Ij1LL1L1L1jIjI:
    long ADDRESS -> do
    long CAPACITY -> if
    sun.misc.Unsafe UNSAFE -> do
    java.nio.ByteBuffer BYTE_BUFFER -> do
    java.nio.ShortBuffer SHORT_BUFFER -> do
    java.nio.CharBuffer CHAR_BUFFER -> do
    java.nio.IntBuffer INT_BUFFER -> do
    java.nio.LongBuffer LONG_BUFFER -> do
    java.nio.FloatBuffer FLOAT_BUFFER -> do
    java.nio.DoubleBuffer DOUBLE_BUFFER -> do
    long PARENT_BYTE -> for
    long PARENT_SHORT -> int
    long PARENT_CHAR -> new
    long PARENT_INT -> try
    long PARENT_LONG -> byte
    long PARENT_FLOAT -> case
    long PARENT_DOUBLE -> char
    71:98:sun.misc.Unsafe getUnsafeInstance() -> do
    102:125:java.lang.reflect.Field getField(java.nio.Buffer,java.lang.Object) -> do
    131:143:java.lang.reflect.Field getDeclaredField(java.lang.Class,java.lang.String) -> do
    154:158:java.nio.ByteBuffer memByteBuffer(long,int) -> do
    162:162:long memAddress0(java.nio.Buffer) -> do
    166:172:java.nio.Buffer setup(java.nio.Buffer,long,int,long) -> do
    177:180:java.nio.ByteBuffer memSetupBuffer(java.nio.ByteBuffer,long,int) -> do
nidefawl.qubes.vec.AABB -> jIjI1L1LL1Ji1LIj:
    double minX -> do
    double minY -> if
    double minZ -> for
    double maxX -> int
    double maxY -> new
    double maxZ -> try
    33:33:double getWidth() -> do
    36:36:double getHeight() -> if
    39:39:double getLength() -> for
    43:49:void offset(double,double,double) -> do
    52:64:void expandTo(double,double,double) -> if
    77:83:void set(double,double,double,double,double,double) -> do
    88:89:void set(nidefawl.qubes.vec.AABB) -> do
    92:93:void set(nidefawl.qubes.vec.AABBFloat) -> do
    97:97:double getCenterX() -> int
    105:105:double getCenterZ() -> new
    109:113:void centerXZ(double,double,double) -> for
    126:142:double getXOffset(nidefawl.qubes.vec.AABB,double) -> do
    146:162:double getZOffset(nidefawl.qubes.vec.AABB,double) -> if
    166:182:double getYOffset(nidefawl.qubes.vec.AABB,double) -> for
    187:187:java.lang.String toString() -> toString
    192:198:void read(java.io.DataInput) -> do
    202:208:void write(java.io.DataOutput) -> do
nidefawl.qubes.vec.AABBFloat -> L1ll1LiJIj1LiJjI:
    float minX -> do
    float minY -> if
    float minZ -> for
    float maxX -> int
    float maxY -> new
    float maxZ -> try
    long negativeZeroFloatBits -> do
    35:41:void offset(float,float,float) -> do
    44:56:void expandBounds(float,float,float) -> if
    69:75:void set(float,float,float,float,float,float) -> do
    80:81:void set(nidefawl.qubes.vec.AABBFloat) -> do
    116:122:boolean intersects(nidefawl.qubes.vec.AABB) -> do
    128:128:java.lang.String toString() -> toString
    144:195:boolean raytrace(nidefawl.qubes.util.RayTrace,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f) -> do
    200:205:boolean min(float,float) -> do
    208:213:boolean max(float,float) -> if
    216:216:boolean isEqual(nidefawl.qubes.vec.AABBFloat) -> do
nidefawl.qubes.vec.AABBInt -> L1iJ1LlljIL1Ijll:
    int minX -> do
    int minY -> if
    int minZ -> for
    int maxX -> int
    int maxY -> new
    int maxZ -> try
    115:115:java.lang.String toString() -> toString
nidefawl.qubes.vec.BlockBoundingBox -> JiJillllIjJiiJiJ:
    int lowX -> do
    int highX -> if
    int lowY -> for
    int highY -> int
    int lowZ -> new
    int highZ -> try
    67:73:void set(int,int,int,int,int,int) -> do
    81:81:int getLength() -> do
    85:85:int getWidth() -> if
    89:89:int getHeight() -> for
    112:113:void reset() -> do
    132:132:java.lang.String toString() -> toString
    154:154:nidefawl.qubes.vec.BlockBoundingBox fromShorts(short,short) -> do
nidefawl.qubes.vec.BlockPos -> IjJillL1jIiJ1Lll:
    int x -> do
    int y -> if
    int z -> for
    24:24:java.lang.String toString() -> toString
    29:33:boolean equals(java.lang.Object) -> equals
    38:38:int hashCode() -> hashCode
    42:42:nidefawl.qubes.vec.BlockPos copy() -> do
    50:53:void set(int,int,int) -> do
    58:61:void offset(int) -> do
    64:67:void read(java.io.DataInput) -> do
    70:73:void write(java.io.DataOutput) -> do
    78:81:void set(nidefawl.qubes.vec.BlockPos) -> do
    95:95:boolean isEqualTo(int,int,int) -> do
nidefawl.qubes.vec.Dir -> llIjjIIjiJL1jIiJ:
    12:12:int getDirX(int) -> do
    16:16:int getDirZ(int) -> if
    20:20:int getDirY(int) -> for
    28:28:boolean isTopBottom(int) -> do
    53:67:java.lang.String asString(int) -> do
nidefawl.qubes.vec.Frustum -> iJL11LllIjjIiJL1:
    nidefawl.qubes.vec.Vector4f[] frustum -> do
    nidefawl.qubes.vec.Vector3f up -> do
    nidefawl.qubes.vec.Vector3f forward -> if
    nidefawl.qubes.vec.Vector3f cam -> for
    nidefawl.qubes.vec.Vector3f tmp -> int
    nidefawl.qubes.vec.Vector3f X -> new
    nidefawl.qubes.vec.Vector3f Y -> try
    nidefawl.qubes.vec.Vector3f Z -> byte
    float znear -> do
    float zfar -> if
    float ratio -> for
    float tang -> int
    float angle -> new
    float sphereFactorY -> try
    float sphereFactorX -> byte
    34:46:void setCamInternals(float,float,float,float) -> do
    81:111:void set(nidefawl.qubes.vec.Matrix4f) -> do
    116:121:void normalize(int) -> do
    124:124:float planeDistance(nidefawl.qubes.vec.Vector4f,float,float,float) -> do
    166:195:int sphereInFrustum(nidefawl.qubes.vec.Vector3f,float) -> do
    246:246:int checkFrustum(nidefawl.qubes.vec.AABBInt,float) -> do
    256:277:int checkFrustum(nidefawl.qubes.vec.AABBInt) -> do
    281:302:void setPos(nidefawl.qubes.vec.Vector3f,nidefawl.qubes.gl.BufferedMatrix) -> do
nidefawl.qubes.vec.Matrix4f -> JilliJiJjIJiJiIj:
    float m00 -> do
    float m01 -> if
    float m02 -> for
    float m03 -> int
    float m10 -> new
    float m11 -> try
    float m12 -> byte
    float m13 -> case
    float m20 -> char
    float m21 -> else
    float m22 -> goto
    float m23 -> long
    float m30 -> this
    float m31 -> void
    float m32 -> break
    float m33 -> catch
    51:56:java.lang.String toString() -> toString
    64:64:nidefawl.qubes.vec.Matrix4f setIdentity() -> if
    73:90:nidefawl.qubes.vec.Matrix4f setIdentity(nidefawl.qubes.vec.Matrix4f) -> do
    98:98:nidefawl.qubes.vec.Matrix4f setZero() -> for
    107:124:nidefawl.qubes.vec.Matrix4f setZero(nidefawl.qubes.vec.Matrix4f) -> if
    133:133:nidefawl.qubes.vec.Matrix4f load(nidefawl.qubes.vec.Matrix4f) -> for
    143:162:nidefawl.qubes.vec.Matrix4f load(nidefawl.qubes.vec.Matrix4f,nidefawl.qubes.vec.Matrix4f) -> do
    198:216:nidefawl.qubes.vec.Matrix4f load(float[]) -> do
    254:270:nidefawl.qubes.vec.Matrix4f store(java.nio.FloatBuffer) -> do
    282:299:nidefawl.qubes.vec.Matrix4f store(float[],int) -> do
    415:452:nidefawl.qubes.vec.Matrix4f mul(nidefawl.qubes.vec.Matrix4f,nidefawl.qubes.vec.Matrix4f,nidefawl.qubes.vec.Matrix4f) -> do
    489:502:nidefawl.qubes.vec.Vector3f transform(nidefawl.qubes.vec.Matrix4f,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f) -> do
    539:551:nidefawl.qubes.vec.Vector3f transformTransposed(nidefawl.qubes.vec.Matrix4f,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f) -> if
    559:559:nidefawl.qubes.vec.Matrix4f transpose() -> int
    568:568:nidefawl.qubes.vec.Matrix4f translate(float,float,float) -> do
    577:577:nidefawl.qubes.vec.Matrix4f translate(nidefawl.qubes.vec.Vector3f) -> do
    586:586:nidefawl.qubes.vec.Matrix4f scale(nidefawl.qubes.vec.Vector3f) -> if
    595:595:nidefawl.qubes.vec.Matrix4f scale(float) -> do
    598:610:nidefawl.qubes.vec.Matrix4f scale(float,float,float) -> if
    621:635:nidefawl.qubes.vec.Matrix4f scale(nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Matrix4f,nidefawl.qubes.vec.Matrix4f) -> do
    645:645:nidefawl.qubes.vec.Matrix4f rotate(float,float,float,float) -> do
    656:656:nidefawl.qubes.vec.Matrix4f rotate(float,float,float,float,nidefawl.qubes.vec.Matrix4f) -> do
    725:769:nidefawl.qubes.vec.Matrix4f rotate(float,float,float,float,nidefawl.qubes.vec.Matrix4f,nidefawl.qubes.vec.Matrix4f) -> do
    779:779:nidefawl.qubes.vec.Matrix4f translate(float,float,float,nidefawl.qubes.vec.Matrix4f) -> do
    790:798:nidefawl.qubes.vec.Matrix4f translate(float,float,float,nidefawl.qubes.vec.Matrix4f,nidefawl.qubes.vec.Matrix4f) -> do
    807:807:nidefawl.qubes.vec.Matrix4f transpose(nidefawl.qubes.vec.Matrix4f) -> int
    817:853:nidefawl.qubes.vec.Matrix4f transpose(nidefawl.qubes.vec.Matrix4f,nidefawl.qubes.vec.Matrix4f) -> if
    860:881:float determinant() -> do
    893:893:float determinant3x3(float,float,float,float,float,float,float,float,float) -> do
    903:903:nidefawl.qubes.vec.Matrix4f invert() -> new
    958:1011:nidefawl.qubes.vec.Matrix4f invert(nidefawl.qubes.vec.Matrix4f,nidefawl.qubes.vec.Matrix4f) -> for
    1072:1120:void mulMat(nidefawl.qubes.vec.Matrix4f) -> do
    1204:1220:void addWeighted(nidefawl.qubes.vec.Matrix4f,float) -> do
    1290:1297:void clearTranslation() -> for
nidefawl.qubes.vec.StackChangeCallBack -> IjiJL1iJJillL1ll:
    void onChange(nidefawl.qubes.vec.Vector3f) -> do
nidefawl.qubes.vec.TransformStack -> JillJiJi1LL1iJIj:
    nidefawl.qubes.vec.Vector3f[] stack -> do
    int stackSize -> do
    nidefawl.qubes.vec.Vector3f tmp -> do
    nidefawl.qubes.vec.StackChangeCallBack cb -> do
    24:34:void translate(float,float,float) -> do
    36:40:void push() -> do
    42:47:void push(float,float,float) -> if
    49:54:void pop() -> if
    56:60:nidefawl.qubes.vec.Vector3f get() -> do
    63:64:void setCallBack(nidefawl.qubes.vec.StackChangeCallBack) -> do
    79:81:void setScissors(int,int,int,int) -> do
nidefawl.qubes.vec.Vec3D -> IjlljIllllJilljI:
    double x -> do
    double y -> if
    double z -> for
    24:24:nidefawl.qubes.vec.BlockPos toBlock() -> do
    28:31:void set(nidefawl.qubes.vec.Vec3D) -> do
    39:42:void set(double,double,double) -> do
    143:152:java.lang.String toString() -> toString
    205:208:double distanceSq(nidefawl.qubes.vec.Vec3D) -> do
nidefawl.qubes.vec.Vector3f -> JiL1L1L1iJiJL1Ji:
    nidefawl.qubes.vec.Vector3f ZERO -> do
    nidefawl.qubes.vec.Vector3f ONE -> if
    float x -> do
    float y -> if
    float z -> for
    56:57:void set(nidefawl.qubes.vec.Vector3f) -> do
    63:66:void set(float,float,float) -> do
    72:72:float lengthSquared() -> do
    85:88:nidefawl.qubes.vec.Vector3f translate(float,float,float) -> do
    103:107:nidefawl.qubes.vec.Vector3f add(nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f) -> do
    123:127:nidefawl.qubes.vec.Vector3f sub(nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f) -> if
    144:149:nidefawl.qubes.vec.Vector3f cross(nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f) -> for
    208:208:float dot(nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f) -> do
    244:248:nidefawl.qubes.vec.Vector3f scale(float) -> do
    257:261:nidefawl.qubes.vec.Vector3f store(java.nio.FloatBuffer) -> do
    268:277:java.lang.String toString() -> toString
    332:332:float length() -> if
    341:346:nidefawl.qubes.vec.Vector3f normalise() -> do
    350:355:nidefawl.qubes.vec.Vector3f normaliseNull() -> if
    373:376:void addVec(nidefawl.qubes.vec.Vector3f) -> if
    385:388:float distanceSq(float,float,float) -> do
    392:395:void write(java.io.DataOutput) -> do
    398:401:void read(java.io.DataInput) -> do
    414:415:void subtract(nidefawl.qubes.vec.Vector3f) -> for
    418:423:void interp(nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f,float,nidefawl.qubes.vec.Vector3f) -> do
nidefawl.qubes.vec.Vector4f -> L1ll1LiJjIIjiJJi:
    float x -> do
    float y -> if
    float z -> for
    float w -> int
    57:61:void set(float,float,float,float) -> do
    67:67:float lengthSquared() -> do
    239:239:java.lang.String toString() -> toString
    308:308:float length() -> if
nidefawl.qubes.world.IBlockWorld -> iJ1LjI1LjIIjiJiJ:
    int getType(int,int,int) -> if
    int getData(int,int,int) -> do
    boolean isNormalBlock(int,int,int,int) -> do
    int getLight(int,int,int) -> int
    nidefawl.qubes.chunk.blockdata.BlockData getBlockData(int,int,int) -> do
    int getBiomeFaceColor(int,int,int,int,int,nidefawl.qubes.biome.BiomeColor) -> do
    int getWater(int,int,int) -> for
nidefawl.qubes.world.IWorldSettings -> iJjIJill1LL1lljI:
    long getSeed() -> do
    java.util.UUID getUUID() -> do
    long getTime() -> if
    int getId() -> do
    java.lang.String getName() -> do
    long getDayLen() -> for
    boolean isFixedTime() -> do
    void setTime(long) -> do
    void setDayLen(long) -> if
    void setFixedTime(boolean) -> do
nidefawl.qubes.world.SunLightModel -> llJiIjIjiJL1JijI:
    float dayLightIntensity -> do
    float nightNoon -> if
    float dayNoon -> for
    float lightAngleUp -> int
    nidefawl.qubes.vec.Matrix4f sunModelView -> do
    nidefawl.qubes.vec.Matrix4f moonModelView -> if
    nidefawl.qubes.vec.Vector3f sunPosition -> do
    nidefawl.qubes.vec.Vector3f moonPosition -> if
    nidefawl.qubes.vec.Vector3f lightPosition -> for
    nidefawl.qubes.vec.Vector3f lightDirection -> int
    nidefawl.qubes.vec.Vector3f tmp1 -> new
    long time -> do
    long dayLen -> if
    float sunPathRotation -> new
    float moonPathRotation -> try
    76:77:void setDayLen(long) -> do
    79:80:void setTime(long) -> if
    116:116:float getLightAngleUp() -> do
    120:120:float getDayLightIntensity() -> if
    124:124:float getDayNoonFloat() -> for
    128:128:float getNightNoonFloat() -> int
nidefawl.qubes.world.World -> llJillJilljIJiiJ:
    java.util.ArrayList lights -> do
    int worldHeight -> do
    int worldHeightMinusOne -> if
    int worldHeightBits -> for
    int worldHeightBitsPlusFour -> int
    int worldSeaLevel -> new
    long seed -> do
    nidefawl.qubes.chunk.ChunkManager chunkMgr -> do
    java.util.Random rand -> do
    java.util.UUID uuid -> do
    int id -> try
    nidefawl.qubes.world.IWorldSettings settings -> do
    nidefawl.qubes.world.biomes.IBiomeManager biomeManager -> do
    java.lang.String name -> do
    nidefawl.qubes.chunk.ChunkManager makeChunkManager() -> do
    73:85:float getSunAngle(float) -> do
    101:101:int getType(nidefawl.qubes.vec.BlockPos) -> do
    111:111:int getData(nidefawl.qubes.vec.BlockPos) -> if
    115:123:nidefawl.qubes.chunk.blockdata.BlockData getBlockData(int,int,int) -> do
    127:135:int getType(int,int,int) -> if
    139:147:int getWater(int,int,int) -> for
    151:159:int getData(int,int,int) -> do
    190:206:boolean setType(int,int,int,int,int) -> do
    253:253:void updateLight(int,int,int) -> do
    void flagBlock(int,int,int) -> if
    258:258:nidefawl.qubes.chunk.Chunk getChunk(int,int) -> do
    263:263:void onLoad() -> do
    266:269:void removeLight(int) -> do
    272:282:void addLight(nidefawl.qubes.vec.Vector3f) -> do
    285:307:void spawnLights(nidefawl.qubes.vec.BlockPos) -> do
    318:318:nidefawl.qubes.chunk.ChunkManager getChunkManager() -> if
    349:349:int getId() -> do
    357:357:void updateLightHeightMap(nidefawl.qubes.chunk.Chunk,int,int,int,int,boolean) -> do
    392:395:int getLight(int,int,int) -> int
    411:411:java.lang.String getName() -> do
    419:419:nidefawl.qubes.world.IWorldSettings getSettings() -> do
    425:428:boolean isNormalBlock(int,int,int,int) -> do
    java.util.List getEntityList() -> do
    441:441:int getBiomeFaceColor(int,int,int,int,int,nidefawl.qubes.biome.BiomeColor) -> do
    445:445:nidefawl.qubes.world.biomes.HexBiome getHex(int,int) -> do
nidefawl.qubes.world.WorldClient -> jIJillIjL1L11LL1:
    float dayLightIntensity -> do
    float nightNoon -> if
    float dayNoon -> for
    float lightAngleUp -> int
    nidefawl.qubes.vec.Matrix4f sunModelView -> do
    nidefawl.qubes.vec.Matrix4f moonModelView -> if
    nidefawl.qubes.vec.Vector3f sunPosition -> do
    nidefawl.qubes.vec.Vector3f moonPosition -> if
    nidefawl.qubes.vec.Vector3f lightPosition -> for
    nidefawl.qubes.vec.Vector3f lightDirection -> int
    nidefawl.qubes.vec.Vector3f tmp1 -> new
    java.util.HashMap entities -> do
    java.util.ArrayList entityList -> if
    java.util.ArrayList entityRemove -> for
    57:60:nidefawl.qubes.world.biomes.IBiomeManager createBiomeManager(int) -> do
    66:66:nidefawl.qubes.chunk.ChunkManager makeChunkManager() -> do
    70:102:void updateFrame(float) -> do
    104:104:nidefawl.qubes.vec.Vector3f getLightPosition() -> do
    107:107:float getLightAngleUp() -> do
    111:111:float getDayLightIntensity() -> if
    115:115:float getDayNoonFloat() -> for
    119:119:float getNightNoonFloat() -> int
    123:124:void flagBlock(int,int,int) -> if
    128:150:void tickUpdate() -> if
    155:157:void onLeave() -> for
    160:167:boolean addEntity(nidefawl.qubes.entity.Entity) -> do
    171:177:boolean removeEntity(nidefawl.qubes.entity.Entity) -> if
    182:182:nidefawl.qubes.entity.Entity getEntity(int) -> do
    186:186:java.util.List getEntityList() -> do
nidefawl.qubes.world.WorldSettingsClient -> llL11L1LJiL1JiiJ:
    java.util.UUID uuid -> do
    long seed -> do
    long time -> if
    int id -> do
    java.lang.String worldName -> do
    long dayLen -> for
    boolean isFixedTime -> do
    21:28:void read(java.io.DataInput) -> do
    32:32:void write(java.io.DataOutput) -> do
    41:41:long getSeed() -> do
    46:46:java.util.UUID getUUID() -> do
    51:51:long getTime() -> if
    56:56:int getId() -> do
    61:61:java.lang.String getName() -> do
    66:66:long getDayLen() -> for
    71:71:boolean isFixedTime() -> do
    76:77:void setTime(long) -> do
    81:82:void setFixedTime(boolean) -> do
    86:87:void setDayLen(long) -> if
nidefawl.qubes.world.biomes.EmptyBiomeManager -> iJiJ1LIjIjJiiJIj:
    32:32:int getBiomeFaceColor(nidefawl.qubes.world.World,int,int,int,int,int,nidefawl.qubes.biome.BiomeColor) -> do
    41:41:void recvData(nidefawl.qubes.network.packet.PacketSWorldBiomes) -> do
    52:52:nidefawl.qubes.world.biomes.HexBiome blockToHex(int,int) -> do
nidefawl.qubes.world.biomes.HexBiome -> JiL1JiiJL1iJIjjI:
    boolean needsSave -> do
    nidefawl.qubes.biome.Biome biome -> do
    nidefawl.qubes.world.structure.StructureMap trees -> do
    nidefawl.qubes.world.structure.StructureMap mines -> if
nidefawl.qubes.world.biomes.HexBiome$1 -> Ijll1L1L1L1L1LIj:
    nidefawl.qubes.world.biomes.HexBiome this$0 -> do
nidefawl.qubes.world.biomes.HexBiome$2 -> JijIjIIjL1JiiJL1:
    nidefawl.qubes.world.biomes.HexBiome this$0 -> do
nidefawl.qubes.world.biomes.HexBiomeEnd -> Ij1LJiiJ1LIjlljI:
nidefawl.qubes.world.biomes.HexBiomes -> Ij1LJiIj1LIjjIIj:
    nidefawl.qubes.world.World world -> do
    40:96:int getBiomeFaceColor(nidefawl.qubes.world.World,int,int,int,int,int,nidefawl.qubes.biome.BiomeColor) -> do
    18:18:nidefawl.qubes.world.biomes.HexBiome blockToHex(int,int) -> do
nidefawl.qubes.world.biomes.HexBiomesClient -> L1JillJijIIjjIiJ:
    22:22:nidefawl.qubes.world.biomes.HexBiome loadCell(int,int) -> if
    26:26:nidefawl.qubes.world.biomes.HexBiome oobCell(int,int) -> for
    35:42:void recvData(nidefawl.qubes.network.packet.PacketSWorldBiomes) -> do
    15:15:java.lang.Object oobCell(int,int) -> for
    15:15:java.lang.Object loadCell(int,int) -> if
nidefawl.qubes.world.biomes.IBiomeManager -> JiJijIL11LL1iJll:
    int getBiomeFaceColor(nidefawl.qubes.world.World,int,int,int,int,int,nidefawl.qubes.biome.BiomeColor) -> do
    void recvData(nidefawl.qubes.network.packet.PacketSWorldBiomes) -> do
    nidefawl.qubes.world.biomes.HexBiome blockToHex(int,int) -> do
nidefawl.qubes.world.structure.StructureFactory -> JillJiJijIIjIjll:
nidefawl.qubes.world.structure.StructureMap -> Ij1L1L1LlliJiJ:
    nidefawl.qubes.world.structure.StructureFactory fac -> do
    nidefawl.qubes.util.RegionMap structures -> do
