nidefawl.qubes.BootClient -> nidefawl.qubes.BootClient:
    int appId -> appId
    18:50:void main(java.lang.String[]) -> main
    53:70:nidefawl.qubes.GameBase getInstance() -> getInstance
nidefawl.qubes.Game -> Ij1LIjL1jIL1iJIj:
    nidefawl.qubes.Game instance -> do
    java.lang.String buildIdentifier -> do
    nidefawl.qubes.PlayerProfile profile -> do
    nidefawl.qubes.config.ClientSettings settings -> do
    nidefawl.qubes.gui.GuiOverlayStats statsOverlay -> do
    nidefawl.qubes.gui.GuiCached statsCached -> do
    nidefawl.qubes.gui.GuiOverlayChat chatOverlay -> do
    nidefawl.qubes.network.client.ThreadConnect connect -> do
    nidefawl.qubes.network.client.NetworkClient client -> do
    nidefawl.qubes.world.WorldClient world -> do
    nidefawl.qubes.entity.PlayerSelf player -> do
    nidefawl.qubes.input.WorldPlayerController worldPlayerController -> do
    nidefawl.qubes.input.DigController dig -> do
    nidefawl.qubes.input.Selection selection -> do
    boolean follow -> do
    nidefawl.qubes.item.BlockStack selBlock -> do
    long lastShaderLoadTime -> do
    nidefawl.qubes.vec.Vector3f vCam -> do
    nidefawl.qubes.vec.Vector3f vPlayer -> if
    nidefawl.qubes.vec.Vector3f vLastCam -> for
    nidefawl.qubes.vec.Vector3f vLastPlayer -> int
    boolean updateRenderers -> if
    boolean showGrid -> for
    boolean thirdPerson -> int
    boolean testMode -> new
    java.lang.String serverAddr -> if
    int skipChars -> do
    nidefawl.qubes.server.LocalGameServer server -> do
    nidefawl.qubes.input.GameMode mode -> do
    int throttleClick -> if
    float lastTpDistance -> do
    nidefawl.qubes.vec.Vector3f t -> new
    nidefawl.qubes.vec.Vector3f t2 -> try
    nidefawl.qubes.util.RayTrace rayTrace -> do
    107:107:nidefawl.qubes.input.GameMode getMode() -> do
    112:124:void connectTo(java.lang.String) -> do
    133:165:void initGame() -> initGame
    168:168:java.lang.String getAppTitle() -> getAppTitle
    173:228:void lateInitGame() -> lateInitGame
    231:241:void toggleGameMode() -> do
    264:265:void reposModel() -> if
    268:278:void setWorld(nidefawl.qubes.world.WorldClient) -> do
    282:286:void shutdown() -> shutdown
    293:307:void onTextInput(long,int) -> onTextInput
    311:353:void onKeyPress(long,int,int,int,int) -> onKeyPress
    357:396:void onWheelScroll(long,double,double) -> onWheelScroll
    399:435:void onMouseClick(long,int,int,int) -> onMouseClick
    438:445:void setGrabbed(boolean) -> setGrabbed
    448:453:boolean needsGrab() -> needsGrab
    460:901:void render(float) -> render
    905:930:void onStatsUpdated() -> onStatsUpdated
    934:935:void postRenderUpdate(float) -> postRenderUpdate
    949:1081:void preRenderUpdate(float) -> preRenderUpdate
    1086:1104:void setRenderResolution(int,int) -> setRenderResolution
    1108:1139:void tick() -> tick
    1142:1149:void returnToMenu() -> for
    1152:1152:boolean isConnected() -> do
    1156:1159:void addDebugOnScreen(java.lang.String) -> if
    1162:1162:nidefawl.qubes.world.World getWorld() -> do
    1166:1176:void setConnection(nidefawl.qubes.network.client.NetworkClient) -> do
    1179:1179:nidefawl.qubes.entity.PlayerSelf getPlayer() -> do
    1183:1184:void setPlayer(nidefawl.qubes.entity.PlayerSelf) -> do
    1187:1190:void sendPacket(nidefawl.qubes.network.packet.Packet) -> do
    1193:1193:nidefawl.qubes.PlayerProfile getProfile() -> do
    1201:1206:void saveSettings() -> int
    1209:1214:void saveProfile() -> new
    1217:1224:void loadProfile() -> try
    1227:1234:void loadSettings() -> byte
    1248:1248:nidefawl.qubes.input.Selection getSelection() -> do
    1252:1253:nidefawl.qubes.network.client.ClientHandler getClientHandler() -> do
    1256:1256:nidefawl.qubes.input.WorldPlayerController getWPCtrl() -> do
    1260:1277:void parseCmdArgs(java.lang.String[]) -> parseCmdArgs
nidefawl.qubes.Game$1 -> jI1LJi1LllJi:
    nidefawl.qubes.texture.array.TextureArray val$arr -> do
    nidefawl.qubes.Game this$0 -> do
    192:196:void pre() -> pre
    199:200:void post() -> post
    204:208:java.lang.Void call() -> do
    212:212:nidefawl.qubes.async.AsyncTask$TaskType getType() -> getType
    188:188:java.lang.Object call() -> call
nidefawl.qubes.Game$2 -> Ij1LL1JiIjIjjI:
    nidefawl.qubes.Game this$0 -> do
    941:943:boolean rayTraceBlock(nidefawl.qubes.block.Block) -> do
nidefawl.qubes.GameBase -> ll1LL1JiiJL1iJL1:
    java.lang.String appName -> appName
    int windowWidth -> windowWidth
    int windowHeight -> windowHeight
    int displayWidth -> displayWidth
    int displayHeight -> displayHeight
    boolean GL_ERROR_CHECKS -> GL_ERROR_CHECKS
    long windowId -> windowId
    int initWidth -> initWidth
    int initHeight -> initHeight
    int TICKS_PER_SEC -> TICKS_PER_SEC
    org.lwjgl.glfw.GLFWErrorCallback errorCallback -> errorCallback
    org.lwjgl.glfw.GLFWWindowSizeCallback cbWindowSize -> cbWindowSize
    org.lwjgl.glfw.GLFWKeyCallback cbKeyboard -> cbKeyboard
    org.lwjgl.glfw.GLFWMouseButtonCallback cbMouseButton -> cbMouseButton
    org.lwjgl.glfw.GLFWScrollCallback cbScrollCallback -> cbScrollCallback
    org.lwjgl.glfw.GLFWWindowFocusCallback cbWindowFocus -> cbWindowFocus
    org.lwjgl.glfw.GLFWCursorPosCallback cbCursorPos -> cbCursorPos
    org.lwjgl.glfw.GLFWCharCallback cbText -> cbText
    boolean hasTextHook -> hasTextHook
    boolean toggleTiming -> toggleTiming
    boolean DO_TIMING -> DO_TIMING
    float renderTime -> renderTime
    float absTime -> absTime
    int ticksran -> ticksran
    int lastFPS -> lastFPS
    long timeLastFPS -> timeLastFPS
    long timeLastFrame -> timeLastFrame
    nidefawl.qubes.util.Timer timer -> timer
    int tick -> tick
    boolean startRender -> startRender
    nidefawl.qubes.util.GameError showError -> showError
    nidefawl.qubes.logging.LogBufferStream outStream -> outStream
    nidefawl.qubes.logging.LogBufferStream errStream -> errStream
    long frameTime -> frameTime
    boolean vsync -> vsync
    boolean running -> running
    boolean wasrunning -> wasrunning
    boolean sysExit -> sysExit
    boolean minimized -> minimized
    boolean hasWindowFocus -> hasWindowFocus
    boolean useWindowSizeAsRenderResolution -> useWindowSizeAsRenderResolution
    boolean isStarting -> isStarting
    java.lang.Thread thread -> thread
    int newWidth -> newWidth
    int newHeight -> newHeight
    nidefawl.qubes.gl.GPUVendor vendor -> vendor
    nidefawl.qubes.GameBase baseInstance -> baseInstance
    nidefawl.qubes.gui.LoadingScreen loadingScreen -> loadingScreen
    nidefawl.qubes.input.KeybindManager movement -> movement
    nidefawl.qubes.gui.Gui gui -> gui
    boolean reinittexthook -> reinittexthook
    boolean wasGrabbed -> wasGrabbed
    java.util.ArrayList glProfileResults -> glProfileResults
    int throttleClick -> throttleClick
    boolean needsGrab -> needsGrab
    98:101:void startGame() -> startGame
    117:117:boolean isRunning() -> isRunning
    121:121:nidefawl.qubes.gl.GPUVendor getVendor() -> getVendor
    127:180:void run() -> run
    183:259:void initCallbacks() -> initCallbacks
    264:336:void initDisplay(boolean) -> initDisplay
    339:339:java.lang.String getAppTitle() -> getAppTitle
    343:353:void destroyContext() -> destroyContext
    356:359:void onDestroy() -> onDestroy
    362:365:void shutdown() -> shutdown
    368:400:void checkResize() -> checkResize
    void onStatsUpdated() -> onStatsUpdated
    405:407:void setVSync(boolean) -> setVSync
    410:410:boolean getVSync() -> getVSync
    414:414:java.lang.Thread getMainThread() -> getMainThread
    418:423:boolean _checkGLError(java.lang.String) -> _checkGLError
    427:447:java.lang.String getGlErrorString(int) -> getGlErrorString
    452:453:void updateDisplay() -> updateDisplay
    456:456:boolean isCloseRequested() -> isCloseRequested
    460:470:void setVSync_impl(boolean) -> setVSync_impl
    475:485:void updateInput() -> updateInput
    488:489:void setTitle(java.lang.String) -> setTitle
    492:505:void limitFpsTo(int) -> limitFpsTo
    508:623:void runFrame() -> runFrame
    626:626:boolean needsGrab() -> needsGrab
    634:690:void mainLoop() -> mainLoop
    693:750:void initGLContext() -> initGLContext
    753:761:void updateTime() -> updateTime
    765:881:void showErrorScreen(java.lang.String,java.util.List,java.lang.Throwable,boolean) -> showErrorScreen
    884:885:void setException(nidefawl.qubes.util.GameError) -> setException
    888:888:long getTime() -> getTime
    892:892:boolean hasTextHook() -> hasTextHook
    895:901:void setTextHook(boolean) -> setTextHook
    void onTextInput(long,int) -> onTextInput
    void onKeyPress(long,int,int,int,int) -> onKeyPress
    void onWheelScroll(long,double,double) -> onWheelScroll
    void render(float) -> render
    void preRenderUpdate(float) -> preRenderUpdate
    void postRenderUpdate(float) -> postRenderUpdate
    void setRenderResolution(int,int) -> setRenderResolution
    919:920:void onWindowResize(int,int) -> onWindowResize
    void tick() -> tick
    void initGame() -> initGame
    void lateInitGame() -> lateInitGame
    931:957:void showGUI(nidefawl.qubes.gui.Gui) -> showGUI
    962:1003:void onMouseClick(long,int,int,int) -> onMouseClick
    1005:1010:void setGrabbed(boolean) -> setGrabbed
    1013:1013:boolean isGrabbed() -> isGrabbed
    1017:1024:void input(float) -> input
    1027:1027:nidefawl.qubes.gui.Gui getGui() -> getGui
    1031:1047:java.lang.String getValue(java.lang.String[],int,java.lang.String) -> getValue
    1050:1050:void parseCmdArgs(java.lang.String[]) -> parseCmdArgs
    40:40:int access$002(nidefawl.qubes.GameBase,int) -> access$002
    40:40:int access$102(nidefawl.qubes.GameBase,int) -> access$102
nidefawl.qubes.GameBase$1 -> jI1LJi1L1LJiiJll:
    nidefawl.qubes.GameBase this$0 -> do
    188:190:void invoke(long,int,int) -> invoke
nidefawl.qubes.GameBase$2 -> IjllL1JiJiiJJiJi:
    nidefawl.qubes.GameBase this$0 -> do
    196:200:void invoke(long,int,int,int,int) -> invoke
nidefawl.qubes.GameBase$3 -> JiL1lljI1Lll1LL1:
    nidefawl.qubes.GameBase this$0 -> do
    207:211:void invoke(long,int,int,int) -> invoke
nidefawl.qubes.GameBase$4 -> Ij1LIjiJllL11LJi:
    nidefawl.qubes.GameBase this$0 -> do
    217:223:void invoke(long,double,double) -> invoke
nidefawl.qubes.GameBase$5 -> iJlljI1LiJiJiJJi:
    nidefawl.qubes.GameBase this$0 -> do
    231:237:void invoke(long,int) -> invoke
nidefawl.qubes.GameBase$6 -> iJll1LjIL1IjJiIj:
    nidefawl.qubes.GameBase this$0 -> do
    243:247:void invoke(long,double,double) -> invoke
nidefawl.qubes.GameBase$7 -> IjJillL1ll1LJiL1:
    nidefawl.qubes.GameBase this$0 -> do
    253:257:void invoke(long,int) -> invoke
nidefawl.qubes.GameRegistry -> L1JiJiiJ1L1LJiJi:
    java.util.Map terrainGenerators -> do
    java.util.Map terrainPopulators -> if
    37:47:nidefawl.qubes.worldgen.WorldGenInit newGenerator(nidefawl.qubes.world.WorldServer,nidefawl.qubes.world.WorldSettings) -> do
    56:56:java.lang.Class getTerrainGen(java.lang.String) -> do
    64:64:java.lang.Class getTerrainPop(java.lang.String) -> if
    68:73:void registerChunkPopulator(java.lang.String,java.lang.Class) -> do
    75:81:void registerTerrainGenerator(java.lang.String,java.lang.Class) -> if
nidefawl.qubes.NativeClassLoader -> nidefawl.qubes.NativeClassLoader:
    nidefawl.qubes.NativeClassLoader instance -> instance
    byte[] cppLoadClass(java.lang.String) -> cppLoadClass
    byte[] cppLoadResource(java.lang.String) -> cppLoadResource
    19:19:java.lang.Class loadClassRedirect(java.lang.String) -> loadClassRedirect
    24:31:java.lang.Class findClass(java.lang.String) -> findClass
    34:36:byte[] loadGameResource(java.lang.String) -> loadGameResource
    40:46:void setLoader() -> setLoader
    52:52:nidefawl.qubes.NativeClassLoader getInstance() -> getInstance
nidefawl.qubes.NativeInterface -> nidefawl.qubes.NativeInterface:
    nidefawl.qubes.NativeInterface instance -> instance
    boolean isPresent -> isPresent
    16:16:nidefawl.qubes.NativeInterface getInstance() -> getInstance
    20:31:void start(int) -> start
    33:33:boolean isPresent() -> isPresent
    void gameCrashed(nidefawl.qubes.util.CrashInfo) -> gameCrashed
    void gameAlive() -> gameAlive
nidefawl.qubes.PlayerProfile -> JiL1JiiJIjiJiJ1L:
    java.util.UUID uuid -> do
    java.lang.String name -> do
    22:25:void setDefaults() -> do
    36:37:void setName(java.lang.String) -> do
    43:43:java.lang.String getName() -> do
    48:50:void load() -> if
    54:56:void save() -> for
nidefawl.qubes.assets.Asset -> ll1LIjjIIjL1IjIj:
    nidefawl.qubes.assets.AssetPack pack -> do
    6:7:void setPack(nidefawl.qubes.assets.AssetPack) -> do
    12:12:nidefawl.qubes.assets.AssetPack getPack() -> do
nidefawl.qubes.assets.AssetBinary -> jIL1Ij1LIjiJIj:
    byte[] data -> do
    java.lang.String name -> do
    21:34:void load(nidefawl.qubes.assets.AssetInputStream) -> do
    36:36:byte[] getData() -> do
    43:43:java.lang.String getName() -> do
nidefawl.qubes.assets.AssetInputStream -> jI1LiJlliJ1LiJjI:
    nidefawl.qubes.assets.AssetPack source -> do
    java.io.InputStream inputStream -> do
    30:32:void close() -> do
nidefawl.qubes.assets.AssetManager -> JiIjjIiJL1jIiJiJ:
    nidefawl.qubes.assets.AssetManager instance -> do
    java.util.ArrayList assetPacks -> do
    java.io.File folder -> do
    14:14:nidefawl.qubes.assets.AssetManager getInstance() -> do
    23:29:void init() -> do
    void _init() -> if
    void toggleExternalResources() -> for
    boolean isExternalResources() -> do
    nidefawl.qubes.shader.Shader loadShader(nidefawl.qubes.util.IResourceManager,java.lang.String) -> do
    nidefawl.qubes.shader.Shader loadShader(nidefawl.qubes.util.IResourceManager,java.lang.String,nidefawl.qubes.shader.IShaderDef) -> do
    nidefawl.qubes.shader.Shader loadShader(nidefawl.qubes.util.IResourceManager,java.lang.String,java.lang.String,java.lang.String,java.lang.String,nidefawl.qubes.shader.IShaderDef) -> do
    nidefawl.qubes.shader.ShaderSource getLastFailedShaderSource() -> do
    48:49:java.io.InputStream getInputStream(java.lang.String) -> do
    53:72:nidefawl.qubes.assets.AssetBinary loadBin(java.lang.String) -> do
    84:106:nidefawl.qubes.assets.AssetInputStream findResource(java.lang.String,boolean) -> do
    136:136:nidefawl.qubes.assets.AssetTexture loadPNGAsset(java.lang.String) -> do
    139:163:nidefawl.qubes.assets.AssetTexture loadPNGAsset(java.lang.String,boolean) -> do
nidefawl.qubes.assets.AssetManagerClient -> IjIjJiJiiJjIjIJi:
    nidefawl.qubes.shader.ShaderSource lastFailedShader -> do
    boolean externalResources -> do
    18:20:void toggleExternalResources() -> for
    23:23:boolean isExternalResources() -> do
    51:51:nidefawl.qubes.shader.Shader loadShader(nidefawl.qubes.util.IResourceManager,java.lang.String) -> do
    55:55:nidefawl.qubes.shader.Shader loadShader(nidefawl.qubes.util.IResourceManager,java.lang.String,nidefawl.qubes.shader.IShaderDef) -> do
    61:69:java.lang.String[] splitPath(java.lang.String) -> do
    73:106:nidefawl.qubes.shader.Shader loadShader(nidefawl.qubes.util.IResourceManager,java.lang.String,java.lang.String,java.lang.String,java.lang.String,nidefawl.qubes.shader.IShaderDef) -> do
    111:111:nidefawl.qubes.shader.ShaderSource getLastFailedShaderSource() -> do
    116:148:void _init() -> if
nidefawl.qubes.assets.AssetManagerServer -> IjIjjIJiL1iJ1LJi:
    16:16:void toggleExternalResources() -> for
    20:20:boolean isExternalResources() -> do
    30:30:nidefawl.qubes.shader.Shader loadShader(nidefawl.qubes.util.IResourceManager,java.lang.String) -> do
    35:35:nidefawl.qubes.shader.Shader loadShader(nidefawl.qubes.util.IResourceManager,java.lang.String,nidefawl.qubes.shader.IShaderDef) -> do
    40:40:nidefawl.qubes.shader.ShaderSource getLastFailedShaderSource() -> do
    45:51:void _init() -> if
    55:55:nidefawl.qubes.shader.Shader loadShader(nidefawl.qubes.util.IResourceManager,java.lang.String,java.lang.String,java.lang.String,java.lang.String,nidefawl.qubes.shader.IShaderDef) -> do
nidefawl.qubes.assets.AssetPack -> iJiJ1LllL1L1jI1L:
    nidefawl.qubes.assets.AssetInputStream getInputStream(java.lang.String) -> do
nidefawl.qubes.assets.AssetPackClassPath -> lliJiJJiJill1L1L:
    22:25:nidefawl.qubes.assets.AssetInputStream getInputStream(java.lang.String) -> do
    33:33:java.lang.String toString() -> toString
nidefawl.qubes.assets.AssetPackFolder -> iJIjiJiJlliJ:
    java.io.File directory -> do
    27:33:nidefawl.qubes.assets.AssetInputStream getInputStream(java.lang.String) -> do
    38:38:java.lang.String toString() -> toString
nidefawl.qubes.assets.AssetTexture -> L1llJi1LJiL1jIiJ:
    int width -> if
    int height -> for
    byte[] data -> do
    int slot -> do
    java.lang.String name -> do
    int bits -> int
    int colorComps -> new
    short[] shortData -> do
    33:61:boolean loadImageIO(nidefawl.qubes.assets.AssetInputStream) -> do
    66:85:boolean loadPNGDecoder(nidefawl.qubes.assets.AssetInputStream) -> if
    88:88:int getBits() -> do
    91:91:int getComponents() -> if
    94:94:int getWidth() -> for
    97:97:int getHeight() -> int
    100:100:byte[] getData() -> do
    107:129:void rescale(int) -> do
    135:146:void cutH() -> do
    149:150:void setSlot(int) -> if
    153:153:int getSlot() -> new
    160:160:java.lang.String getName() -> do
    171:171:short[] getUShortData() -> do
nidefawl.qubes.async.AsyncTask -> L1Ij1LIjJijIjI1L:
    java.util.concurrent.Future future -> future
    nidefawl.qubes.async.AsyncTask$TaskType getType() -> getType
    16:16:void pre() -> pre
    19:19:void post() -> post
    21:22:void setFuture(java.util.concurrent.Future) -> setFuture
    24:24:boolean isDone() -> isDone
    27:27:boolean isCancelled() -> isCancelled
nidefawl.qubes.async.AsyncTask$TaskType -> iJIjiJllll1LlliJ:
    nidefawl.qubes.async.AsyncTask$TaskType CHUNK_DECOMPRESS -> do
    nidefawl.qubes.async.AsyncTask$TaskType LOAD_TEXTURES -> if
    nidefawl.qubes.async.AsyncTask$TaskType[] $VALUES -> do
    9:9:nidefawl.qubes.async.AsyncTask$TaskType[] values() -> values
    9:9:nidefawl.qubes.async.AsyncTask$TaskType valueOf(java.lang.String) -> valueOf
nidefawl.qubes.async.AsyncTaskThread -> Ij1L1LL1JillIjJi:
    java.util.zip.Inflater inflate -> do
    int i10Meg -> do
    byte[] tmpBuffer -> do
    18:28:byte[] inflate(byte[]) -> do
nidefawl.qubes.async.AsyncTasks -> JiJillL1llIjL1jI:
    java.util.ArrayList tasks -> do
    java.util.concurrent.ExecutorService service -> do
    16:34:void init() -> do
    37:51:void submit(nidefawl.qubes.async.AsyncTask) -> do
    53:73:boolean completeTasks() -> do
    76:80:void shutdown() -> if
nidefawl.qubes.async.AsyncTasks$1 -> iJ1LiJlljIllIj:
    30:30:java.lang.Thread newThread(java.lang.Runnable) -> newThread
nidefawl.qubes.async.AsyncTasks$2 -> JiIjL1IjiJJi1L1L:
    25:26:void uncaughtException(java.lang.Thread,java.lang.Throwable) -> uncaughtException
nidefawl.qubes.biome.Biome -> JiJiJiJiL11LJi1L:
    nidefawl.qubes.biome.Biome[] biomes -> do
    int maxBiome -> do
    nidefawl.qubes.biome.Biome MEADOW_GREEN -> do
    nidefawl.qubes.biome.Biome MEADOW_BLUE -> if
    nidefawl.qubes.biome.Biome MEADOW_RED -> for
    nidefawl.qubes.biome.Biome DESERT -> int
    nidefawl.qubes.biome.Biome DESERT_RED -> new
    nidefawl.qubes.biome.Biome ICE -> try
    nidefawl.qubes.biome.Biome MEADOW_GREEN2 -> byte
    int color -> if
    int colorFoliage -> for
    int colorFoliage2 -> int
    int colorLeaves -> new
    int colorGrass -> try
    int id -> byte
    83:99:nidefawl.qubes.biome.Biome setColor(nidefawl.qubes.biome.BiomeColor,int) -> do
    107:108:nidefawl.qubes.biome.Biome setDebugColor(int) -> do
    116:121:nidefawl.qubes.biome.Biome get(int) -> if
    129:145:int getFaceColor(nidefawl.qubes.biome.BiomeColor) -> do
    150:173:int getStone(nidefawl.qubes.world.WorldServer,int,int,int,nidefawl.qubes.world.biomes.HexBiome,java.util.Random) -> do
    177:177:int getOre(nidefawl.qubes.world.WorldServer,int,int,int,nidefawl.qubes.world.biomes.HexBiome,java.util.Random) -> if
    204:204:nidefawl.qubes.block.Block getStone() -> do
    207:207:nidefawl.qubes.block.Block getTopBlock() -> if
    210:210:nidefawl.qubes.block.Block getSoilBlock() -> for
nidefawl.qubes.biome.Biome$1 -> L1IjjIL1jI1LL1L1:
    int[] $SwitchMap$nidefawl$qubes$biome$BiomeColor -> do
nidefawl.qubes.biome.BiomeColor -> lllljIJiL1iJIjIj:
    nidefawl.qubes.biome.BiomeColor GRASS -> do
    nidefawl.qubes.biome.BiomeColor LEAVES -> if
    nidefawl.qubes.biome.BiomeColor FOLIAGE -> for
    nidefawl.qubes.biome.BiomeColor FOLIAGE2 -> int
    nidefawl.qubes.biome.BiomeColor[] $VALUES -> do
    10:10:nidefawl.qubes.biome.BiomeColor[] values() -> values
    10:10:nidefawl.qubes.biome.BiomeColor valueOf(java.lang.String) -> valueOf
nidefawl.qubes.biome.BiomeDesert -> IjjIL1jIJijIJijI:
    22:22:nidefawl.qubes.block.Block getStone() -> do
    25:25:nidefawl.qubes.block.Block getTopBlock() -> if
    28:28:nidefawl.qubes.block.Block getSoilBlock() -> for
nidefawl.qubes.biome.BiomeDesertRed -> Ji1LjIL1JiiJjI1L:
    22:22:nidefawl.qubes.block.Block getStone() -> do
    25:25:nidefawl.qubes.block.Block getTopBlock() -> if
    28:28:nidefawl.qubes.block.Block getSoilBlock() -> for
nidefawl.qubes.biome.BiomeIce -> Ijll1L1LjIL1Jill:
    20:20:nidefawl.qubes.block.Block getStone() -> do
    24:24:nidefawl.qubes.block.Block getTopBlock() -> if
    28:28:nidefawl.qubes.block.Block getSoilBlock() -> for
nidefawl.qubes.biome.BiomeMeadow -> jIllIjjIJiiJJiIj:
nidefawl.qubes.block.Block -> iJL1llIj1LJi1LIj:
    nidefawl.qubes.block.Block[] registeredblocks -> if
    short[] registeredblockIds -> do
    nidefawl.qubes.block.Block[] block -> do
    java.lang.String[] NO_TEXTURES -> do
    nidefawl.qubes.block.Block air -> do
    nidefawl.qubes.block.Block grass -> if
    nidefawl.qubes.block.Block dirt -> for
    nidefawl.qubes.block.BlockGroupStones stones -> do
    nidefawl.qubes.block.Block water -> int
    nidefawl.qubes.block.Block sand -> new
    nidefawl.qubes.block.Block sand_red -> try
    nidefawl.qubes.block.Block snow -> byte
    nidefawl.qubes.block.Block ice -> case
    nidefawl.qubes.block.Block gravel -> char
    nidefawl.qubes.block.BlockGroupLogs logs -> do
    nidefawl.qubes.block.BlockGroup wood -> do
    nidefawl.qubes.block.BlockGroupLeaves leaves -> do
    nidefawl.qubes.block.Block grassbush -> else
    nidefawl.qubes.block.Block heath -> goto
    nidefawl.qubes.block.Block aloe_vera -> long
    nidefawl.qubes.block.Block nasturtium -> this
    nidefawl.qubes.block.Block thingrass -> void
    nidefawl.qubes.block.Block vines -> break
    nidefawl.qubes.block.Block treemoss -> catch
    nidefawl.qubes.block.Block quarter -> class
    nidefawl.qubes.block.BlockGroupOres ores -> do
    nidefawl.qubes.block.BlockGroup bricks -> if
    nidefawl.qubes.block.BlockGroup stonebricks -> for
    nidefawl.qubes.block.BlockGroup smoothstones -> int
    nidefawl.qubes.block.BlockGroup stonepath -> new
    nidefawl.qubes.block.BlockGroup cobblestones -> try
    nidefawl.qubes.block.BlockGroup slabs -> byte
    nidefawl.qubes.block.BlockGroup stairs -> case
    nidefawl.qubes.block.BlockGroup walls -> char
    nidefawl.qubes.block.BlockGroup fences -> else
    nidefawl.qubes.block.BlockGroup parquets -> goto
    nidefawl.qubes.block.Block flower_fmn_black -> const
    nidefawl.qubes.block.Block flower_fmn_blue -> final
    nidefawl.qubes.block.Block flower_compositae_camille -> float
    nidefawl.qubes.block.Block flower_compositae_milkspice -> short
    nidefawl.qubes.block.Block flower_compositae_pinkpanther -> super
    nidefawl.qubes.block.Block flower_compositae_tigerteeth -> throw
    nidefawl.qubes.block.Block flower_violet -> while
    nidefawl.qubes.block.Block flower_rose -> double
    nidefawl.qubes.block.Block flower_poppy1 -> import
    nidefawl.qubes.block.Block flower_poppy2 -> native
    nidefawl.qubes.block.Block flower_poppy3 -> public
    nidefawl.qubes.block.Block flower_oxmorina_blue -> return
    nidefawl.qubes.block.Block flower_cup_0 -> static
    nidefawl.qubes.block.Block flower_cup_1 -> switch
    nidefawl.qubes.block.Block flower_cup_2 -> throws
    nidefawl.qubes.block.Block flower_cup_3 -> boolean
    nidefawl.qubes.block.Block flower_cup_4 -> default
    nidefawl.qubes.block.Block flower_cup_5 -> extends
    nidefawl.qubes.block.Block flower_cup_6 -> finally
    nidefawl.qubes.block.Block flower_cup_7 -> package
    nidefawl.qubes.block.Block flower_star_frost -> private
    nidefawl.qubes.block.Block flower_star_sundown -> abstract
    nidefawl.qubes.block.Block flower_dandelion -> continue
    nidefawl.qubes.block.Block flower_lotus -> strictfp
    nidefawl.qubes.block.Block flower_lavender -> volatile
    nidefawl.qubes.block.Block flower_tulip1 -> interface
    nidefawl.qubes.block.Block flower_tulip2 -> protected
    nidefawl.qubes.block.Block flower_tulip3 -> transient
    nidefawl.qubes.block.Block flower_tulip4 -> implements
    nidefawl.qubes.block.Block flower_tulip5 -> instanceof
    nidefawl.qubes.block.Block flower_tulip6 -> synchronized
    nidefawl.qubes.block.Block flower_nomades -> ZssZSS2zz2SSZssZ
    nidefawl.qubes.block.Block flower_sheeps_meal -> z22zZsSSSS2zZsSS
    nidefawl.qubes.block.Block rhubarb -> Zsz22z2z2zZsZs
    nidefawl.qubes.block.Block fern1 -> sZz2SSZssZz2z2z2
    nidefawl.qubes.block.Block fern2 -> SSZsZs2zsZsZ2zsZ
    nidefawl.qubes.block.Block fern3 -> z2ZsZs2zZsZs2zsZ
    nidefawl.qubes.block.Block fern4 -> ZssZZsz2sZsZ2zz2
    nidefawl.qubes.block.Block double_heath -> sZSSZsZsz2ZsZssZ
    nidefawl.qubes.block.Block tallgrass1 -> SSZsz2ZssZsZz2
    nidefawl.qubes.block.Block tallgrass2 -> z2z22zSSZs2z2z2z
    nidefawl.qubes.block.Block cattail -> sZZsZsZsSSsZ
    nidefawl.qubes.block.Block waterlily -> sZ2zsZSSZssZsZ2z
    nidefawl.qubes.block.Block pad -> Zs2z2zSSz2Zsz2
    nidefawl.qubes.block.BlockGroup modelled -> long
    nidefawl.qubes.block.Block torch -> z2SS2zsZSSZs
    int id -> do
    java.lang.String name -> do
    boolean transparent -> do
    java.lang.String[] textures -> if
    java.lang.String[] normalMaps -> for
    nidefawl.qubes.vec.AABBFloat blockBounds -> do
    nidefawl.qubes.block.BlockTextureMode textureMode -> do
    nidefawl.qubes.block.BlockCategory blockCategory -> do
    nidefawl.qubes.models.qmodel.ModelBlock[] loadedModels -> do
    java.lang.String[] models -> int
    nidefawl.qubes.block.BlockGroup blockGroup -> this
    141:141:void preInit() -> do
    143:166:void postInit() -> if
    195:196:nidefawl.qubes.block.Block setBlockGroup(nidefawl.qubes.block.BlockGroup) -> do
    200:201:nidefawl.qubes.block.Block setCategory(nidefawl.qubes.block.BlockCategory) -> do
    204:204:nidefawl.qubes.block.BlockCategory getBlockCategory() -> do
    208:208:void init() -> for
    218:218:java.lang.String[] getTextures() -> do
    221:221:java.lang.String[] getNormalMaps() -> if
    225:229:nidefawl.qubes.block.Block setTextures(java.lang.String[]) -> do
    232:236:nidefawl.qubes.block.Block setNormalMaps(java.lang.String[]) -> if
    240:241:nidefawl.qubes.block.Block setModels(java.lang.String[]) -> for
    244:244:java.lang.String[] getModels() -> for
    253:253:java.lang.String getName() -> do
    257:257:boolean isTransparent() -> do
    260:260:int getFaceColor(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int) -> do
    263:264:nidefawl.qubes.block.Block setTextureMode(nidefawl.qubes.block.BlockTextureMode) -> do
    267:267:int getTexturePasses() -> do
    285:296:int getTexture(int,int,int) -> do
    299:299:int getLODPass() -> if
    302:302:int getRenderPass() -> for
    305:305:int getRenderType() -> int
    308:308:boolean isValid(int) -> do
    311:311:nidefawl.qubes.block.Block get(int) -> do
    314:314:boolean applyAO() -> if
    317:317:boolean isOccluding() -> for
    321:324:int getBBs(nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.AABBFloat[]) -> do
    327:327:float getAlpha() -> do
    330:330:int getLightValue() -> new
    333:333:boolean isOpaque(int) -> if
    337:338:nidefawl.qubes.vec.AABBFloat getRenderBlockBounds(nidefawl.qubes.world.IBlockWorld,int,int,int,nidefawl.qubes.vec.AABBFloat) -> do
    341:365:boolean isVisibleBounds(nidefawl.qubes.world.IBlockWorld,int,int,nidefawl.qubes.vec.AABBFloat) -> do
    369:372:boolean isFaceVisible(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int,nidefawl.qubes.block.Block,nidefawl.qubes.vec.AABBFloat) -> do
    382:382:boolean isNormalBlock(nidefawl.qubes.world.IBlockWorld,int,int,int) -> do
    388:388:boolean isSlab() -> int
    394:394:boolean isStairs() -> new
    408:408:boolean canPlaceAt(nidefawl.qubes.world.BlockPlacer,nidefawl.qubes.vec.BlockPos,nidefawl.qubes.vec.BlockPos,nidefawl.qubes.vec.Vector3f,int,int,int) -> do
    420:420:int prePlace(nidefawl.qubes.world.BlockPlacer,nidefawl.qubes.vec.BlockPos,nidefawl.qubes.vec.Vector3f,int,int,int) -> do
    431:431:void postPlace(nidefawl.qubes.world.BlockPlacer,nidefawl.qubes.vec.BlockPos,nidefawl.qubes.vec.Vector3f,int,int,int) -> do
    442:443:void place(nidefawl.qubes.world.BlockPlacer,nidefawl.qubes.vec.BlockPos,nidefawl.qubes.vec.Vector3f,int,int,int) -> if
    448:448:boolean isReplaceable() -> try
    451:454:int placeOffset(nidefawl.qubes.world.BlockPlacer,nidefawl.qubes.vec.BlockPos,nidefawl.qubes.vec.Vector3f,int,int,int) -> if
    468:473:boolean raytrace(nidefawl.qubes.util.RayTrace,nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f) -> do
    476:476:boolean isFullBB() -> byte
    479:479:boolean isOccludingBlock(nidefawl.qubes.world.IBlockWorld,int,int,int) -> if
    485:485:short[] getRegisteredIDs() -> do
    492:492:nidefawl.qubes.block.Block[] getRegisteredBlocks() -> do
    496:499:void getQuarters(nidefawl.qubes.world.IBlockWorld,int,int,int,int[]) -> do
    506:506:int getRenderShadow() -> try
    511:513:java.lang.String toString() -> toString
    517:521:int setSelectionBB(nidefawl.qubes.world.World,nidefawl.qubes.util.RayTrace$RayTraceIntersection,nidefawl.qubes.vec.BlockPos,nidefawl.qubes.vec.AABBFloat) -> do
    525:525:boolean canBlockConnect(nidefawl.qubes.world.IBlockWorld,int,int,int,nidefawl.qubes.block.BlockConnect,int,int) -> do
    529:537:int getItems(java.util.List) -> do
    541:541:int getMeshedColor(nidefawl.qubes.meshing.BlockSurface) -> do
    545:545:int getTextureByIdx(int) -> do
    549:549:int getLightLoss(nidefawl.qubes.blocklight.LightChunkCache,int,int,int,int) -> do
    579:579:boolean skipTexturePassSide(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int,int) -> do
    587:587:int getInvRenderData(nidefawl.qubes.item.BlockStack) -> do
    593:593:float getInvRenderRotation() -> if
    596:596:boolean canMineWith(nidefawl.qubes.world.BlockPlacer,nidefawl.qubes.world.World,nidefawl.qubes.vec.BlockPos,nidefawl.qubes.entity.PlayerServer,nidefawl.qubes.item.ItemStack) -> do
    599:599:void onBlockMine(nidefawl.qubes.world.BlockPlacer,nidefawl.qubes.world.World,nidefawl.qubes.vec.BlockPos,nidefawl.qubes.entity.PlayerServer,nidefawl.qubes.item.ItemStack) -> do
    602:602:void onUpdate(nidefawl.qubes.world.World,int,int,int,int) -> do
    604:604:nidefawl.qubes.models.qmodel.ModelBlock getBlockModel(nidefawl.qubes.world.IBlockWorld,int,int,int,int) -> do
    607:610:int getNormalMap(int) -> if
    613:613:float getRoughness(int) -> do
    616:616:nidefawl.qubes.block.Block getBaseBlock() -> do
    619:619:boolean canWalkThru(nidefawl.qubes.world.IBlockWorld,int,int,int,nidefawl.qubes.entity.Entity) -> do
    622:622:boolean renderMeshedAndNormal() -> case
nidefawl.qubes.block.Block$1 -> L1ll1L1LJillIjL1:
    int[] $SwitchMap$nidefawl$qubes$block$BlockTextureMode -> do
nidefawl.qubes.block.BlockAir -> lliJlliJL1JijIjI:
    33:33:nidefawl.qubes.block.Block setTextures(java.lang.String[]) -> do
    41:41:int getTexture(int,int,int) -> do
    45:45:int getRenderPass() -> for
    48:48:int getRenderType() -> int
    52:52:boolean applyAO() -> if
    55:55:boolean isOccluding() -> for
    59:59:int getBBs(nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.AABBFloat[]) -> do
    62:62:float getAlpha() -> do
    65:65:int getLightValue() -> new
    70:70:boolean isVisibleBounds(nidefawl.qubes.world.IBlockWorld,int,int,nidefawl.qubes.vec.AABBFloat) -> do
    74:74:boolean isFaceVisible(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int,nidefawl.qubes.block.Block,nidefawl.qubes.vec.AABBFloat) -> do
    78:78:boolean isNormalBlock(nidefawl.qubes.world.IBlockWorld,int,int,int) -> do
    82:82:boolean isReplaceable() -> try
    87:87:boolean raytrace(nidefawl.qubes.util.RayTrace,nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f) -> do
    90:90:boolean isFullBB() -> byte
    95:95:int setSelectionBB(nidefawl.qubes.world.World,nidefawl.qubes.util.RayTrace$RayTraceIntersection,nidefawl.qubes.vec.BlockPos,nidefawl.qubes.vec.AABBFloat) -> do
    99:99:int getItems(java.util.List) -> do
    104:104:boolean canBlockConnect(nidefawl.qubes.world.IBlockWorld,int,int,int,nidefawl.qubes.block.BlockConnect,int,int) -> do
nidefawl.qubes.block.BlockCategory -> IjIjllIjJiIjJiL1:
    nidefawl.qubes.block.BlockCategory GROUND -> do
    nidefawl.qubes.block.BlockCategory ROCK -> if
    nidefawl.qubes.block.BlockCategory LEAVES -> for
    nidefawl.qubes.block.BlockCategory STONE -> int
    nidefawl.qubes.block.BlockCategory LOG -> new
    nidefawl.qubes.block.BlockCategory FLOWER -> try
    nidefawl.qubes.block.BlockCategory VINE -> byte
    nidefawl.qubes.block.BlockCategory PLANT -> case
    nidefawl.qubes.block.BlockCategory UNASSIGNED -> char
    nidefawl.qubes.block.BlockCategory[] $VALUES -> do
    10:10:nidefawl.qubes.block.BlockCategory[] values() -> values
    10:10:nidefawl.qubes.block.BlockCategory valueOf(java.lang.String) -> valueOf
nidefawl.qubes.block.BlockConnect -> llllL1IjJiIjjIll:
    nidefawl.qubes.block.BlockConnect FENCE -> do
    nidefawl.qubes.block.BlockConnect WALL -> if
    nidefawl.qubes.block.BlockConnect PANE -> for
    nidefawl.qubes.block.BlockConnect[] $VALUES -> do
    10:10:nidefawl.qubes.block.BlockConnect[] values() -> values
    10:10:nidefawl.qubes.block.BlockConnect valueOf(java.lang.String) -> valueOf
nidefawl.qubes.block.BlockDoubleCatTail -> llJill1LjIiJjIIj:
    13:13:int getTexturePasses() -> do
    17:20:int getTexture(int,int,int) -> do
nidefawl.qubes.block.BlockDoublePlant -> iJjIllJiL1L1Ji:
    30:30:int getFaceColor(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int) -> do
    34:37:void postPlace(nidefawl.qubes.world.BlockPlacer,nidefawl.qubes.vec.BlockPos,nidefawl.qubes.vec.Vector3f,int,int,int) -> do
    40:40:int getRenderType() -> int
    45:45:boolean applyAO() -> if
    50:50:boolean isOccluding() -> for
    58:58:int getBBs(nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.AABBFloat[]) -> do
    62:62:boolean isReplaceable() -> try
    66:66:boolean isFullBB() -> byte
    73:76:nidefawl.qubes.vec.AABBFloat getRenderBlockBounds(nidefawl.qubes.world.IBlockWorld,int,int,int,nidefawl.qubes.vec.AABBFloat) -> do
    81:86:int getTexture(int,int,int) -> do
    91:91:int getRenderShadow() -> try
    98:101:void onUpdate(nidefawl.qubes.world.World,int,int,int,int) -> do
    103:108:boolean canStayOn(nidefawl.qubes.world.World,int,int,int) -> do
nidefawl.qubes.block.BlockFence -> lliJJiIjL1llL1L1:
    nidefawl.qubes.block.Block baseBlock -> sZ2zsZsZsZZsz2SS
    19:19:nidefawl.qubes.block.Block getBaseBlock() -> do
    23:32:int setFenceConnections(nidefawl.qubes.world.IBlockWorld,int,int,int,boolean[]) -> do
    36:42:boolean canConnectTo(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int) -> do
    46:46:boolean canBlockConnect(nidefawl.qubes.world.IBlockWorld,int,int,int,nidefawl.qubes.block.BlockConnect,int,int) -> do
    59:59:int getLightValue() -> new
    64:64:int getFaceColor(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int) -> do
    69:69:float getAlpha() -> do
    73:79:int getTexture(int,int,int) -> do
    83:83:int getRenderType() -> int
    88:88:boolean isOccluding() -> for
    93:93:boolean isFullBB() -> byte
    98:98:boolean isFaceVisible(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int,nidefawl.qubes.block.Block,nidefawl.qubes.vec.AABBFloat) -> do
    103:103:int getRenderShadow() -> try
    108:124:nidefawl.qubes.vec.AABBFloat getRenderBlockBounds(nidefawl.qubes.world.IBlockWorld,int,int,int,nidefawl.qubes.vec.AABBFloat) -> do
    129:181:int getBBs(nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.AABBFloat[]) -> do
nidefawl.qubes.block.BlockFlowerFMN -> L1jIL11LjIL1llIj:
    29:32:int getFaceColor(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int) -> do
    35:35:int getTexturePasses() -> do
    39:42:int getTexture(int,int,int) -> do
nidefawl.qubes.block.BlockGrass -> jIllL1JiJilliJll:
    19:21:int getFaceColor(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int) -> do
    25:34:int getTexture(int,int,int) -> do
    37:37:int getMeshedColor(nidefawl.qubes.meshing.BlockSurface) -> do
    41:41:int getTexturePasses() -> do
    45:45:boolean skipTexturePassSide(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int,int) -> do
    49:54:int getNormalMap(int) -> if
nidefawl.qubes.block.BlockGrassBush -> L1JiL1jIjIlljIJi:
    27:27:boolean applyRandomOffset() -> char
    31:31:int getLODPass() -> if
    35:35:int getFaceColor(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int) -> do
nidefawl.qubes.block.BlockGravel -> iJL1jIIjjIjIiJ1L:
nidefawl.qubes.block.BlockGroup -> Ji1LL11Lll1LJiiJ:
    int NEXT_GROUP_ID -> do
    int id -> if
    java.util.List blocks -> do
    24:26:void addBlock(nidefawl.qubes.block.Block) -> do
    java.util.List getNames() -> do
    31:31:java.util.List getBlocks() -> if
    34:34:nidefawl.qubes.block.Block getFirst() -> do
nidefawl.qubes.block.BlockGroupBricks -> llL1IjiJJiJiiJ:
    java.util.List stoneNames -> do
    27:27:java.util.List getNames() -> do
nidefawl.qubes.block.BlockGroupCobbleStones -> iJL1JilllliJJiiJ:
    java.util.List stoneNames -> do
    29:29:java.util.List getNames() -> do
nidefawl.qubes.block.BlockGroupFences -> iJ1LiJiJllL1Ji1L:
    java.util.List stoneNames -> do
    44:44:java.util.List getNames() -> do
nidefawl.qubes.block.BlockGroupLeaves -> jIiJL1JiJiiJL1iJ:
    java.util.List leaveNames -> do
    nidefawl.qubes.block.Block acacia -> do
    nidefawl.qubes.block.Block birch -> if
    nidefawl.qubes.block.Block oak -> for
    29:29:java.util.List getNames() -> do
nidefawl.qubes.block.BlockGroupLogs -> ll1L1LIj1LL1jI1L:
    java.util.List logNames -> do
    nidefawl.qubes.block.Block oak -> do
    35:35:java.util.List getNames() -> do
nidefawl.qubes.block.BlockGroupModelledStones -> iJ1LllL1iJJillL1:
    java.util.List stoneNames -> do
    53:53:java.util.List getNames() -> do
nidefawl.qubes.block.BlockGroupOres -> lliJL1JiL1L11LIj:
    java.util.List stoneNames -> do
    35:35:java.util.List getNames() -> do
nidefawl.qubes.block.BlockGroupParquets -> jI1LIjjIiJlljIll:
    28:28:java.util.List getNames() -> do
nidefawl.qubes.block.BlockGroupSlabs -> L1L1jIJiiJIjiJjI:
    java.util.List stoneNames -> do
    42:42:java.util.List getNames() -> do
nidefawl.qubes.block.BlockGroupSmoothStones -> llL1IjjIJiiJlljI:
    java.util.List stoneNames -> do
    30:30:java.util.List getNames() -> do
nidefawl.qubes.block.BlockGroupStairs -> jIjIJi1LIjlliJL1:
    java.util.List stoneNames -> do
    44:44:java.util.List getNames() -> do
nidefawl.qubes.block.BlockGroupStoneBricks -> jIiJJiL11LiJL1:
    java.util.List stoneNames -> do
    34:34:java.util.List getNames() -> do
nidefawl.qubes.block.BlockGroupStonePath -> IjiJ1LIj1L1LIjIj:
    java.util.List stoneNames -> do
    29:29:java.util.List getNames() -> do
nidefawl.qubes.block.BlockGroupStones -> Ji1LJilliJjI1LJi:
    java.util.List stoneNames -> do
    nidefawl.qubes.block.Block granite -> do
    nidefawl.qubes.block.Block basalt -> if
    nidefawl.qubes.block.Block diorite -> for
    nidefawl.qubes.block.Block marble -> int
    nidefawl.qubes.block.Block obsidian -> new
    nidefawl.qubes.block.Block sandstone -> try
    nidefawl.qubes.block.Block sandstone_red -> byte
    44:44:java.util.List getNames() -> do
nidefawl.qubes.block.BlockGroupWalls -> L11LjIllL11LIjJi:
    java.util.List stoneNames -> do
    43:43:java.util.List getNames() -> do
nidefawl.qubes.block.BlockGroupWood -> jIJi1LiJL11Lll1L:
    26:26:java.util.List getNames() -> do
nidefawl.qubes.block.BlockIce -> lljIIjL1JiL1llIj:
    20:20:int getRenderPass() -> for
    25:25:boolean applyAO() -> if
    30:30:float getAlpha() -> do
    35:35:boolean isOccluding() -> for
    40:40:int getRenderShadow() -> try
    44:44:int getLightLoss(nidefawl.qubes.blocklight.LightChunkCache,int,int,int,int) -> do
    48:52:nidefawl.qubes.vec.AABBFloat getRenderBlockBounds(nidefawl.qubes.world.IBlockWorld,int,int,int,nidefawl.qubes.vec.AABBFloat) -> do
    56:56:int getLODPass() -> if
    59:67:boolean isFaceVisible(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int,nidefawl.qubes.block.Block,nidefawl.qubes.vec.AABBFloat) -> do
    71:76:int getBBs(nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.AABBFloat[]) -> do
    81:81:boolean isFullBB() -> byte
    85:85:int getRenderType() -> int
nidefawl.qubes.block.BlockLeaves -> IjlljIIjllJillL1:
    int leavesColor -> if
    33:33:int getFaceColor(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int) -> do
    38:38:boolean applyAO() -> if
    43:43:boolean isOccluding() -> for
    47:47:int getLightLoss(nidefawl.qubes.blocklight.LightChunkCache,int,int,int,int) -> do
    52:52:boolean renderMeshedAndNormal() -> case
    56:56:int getRenderType() -> int
    59:61:int getTexture(int,int,int) -> do
nidefawl.qubes.block.BlockLog -> Ijll1LjIJiJiJiL1:
    int index -> if
    35:35:int getIndex() -> byte
    40:66:int getTexture(int,int,int) -> do
    71:71:int getTexturePasses() -> do
    76:81:void onBlockMine(nidefawl.qubes.world.BlockPlacer,nidefawl.qubes.world.World,nidefawl.qubes.vec.BlockPos,nidefawl.qubes.entity.PlayerServer,nidefawl.qubes.item.ItemStack) -> do
    85:89:boolean skipTexturePassSide(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int,int) -> do
    94:94:int getRenderType() -> int
nidefawl.qubes.block.BlockModelled -> jIlliJjIlliJ1Lll:
    18:18:nidefawl.qubes.vec.AABBFloat getRenderBlockBounds(nidefawl.qubes.world.IBlockWorld,int,int,int,nidefawl.qubes.vec.AABBFloat) -> do
    23:23:boolean isFullBB() -> byte
    27:27:boolean isTransparent() -> do
    31:31:int getLODPass() -> if
    35:35:int getRenderPass() -> for
    39:39:int getRenderShadow() -> try
    43:43:boolean isOccluding() -> for
    48:48:int getRenderType() -> int
nidefawl.qubes.block.BlockOre -> JillIjlljIIjjIjI:
    nidefawl.qubes.block.Block baseBlock -> sZ2zsZsZsZZsz2SS
    26:26:int getLightValue() -> new
    31:31:int getFaceColor(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int) -> do
    36:40:int getTexture(int,int,int) -> do
    45:45:int getTexturePasses() -> do
    50:57:void onBlockMine(nidefawl.qubes.world.BlockPlacer,nidefawl.qubes.world.World,nidefawl.qubes.vec.BlockPos,nidefawl.qubes.entity.PlayerServer,nidefawl.qubes.item.ItemStack) -> do
    61:65:boolean skipTexturePassSide(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int,int) -> do
    69:69:int getNormalMap(int) -> if
    73:73:int getRenderType() -> int
nidefawl.qubes.block.BlockPane -> iJJiJilliJ1LjI:
    18:27:int setPaneConnections(nidefawl.qubes.world.IBlockWorld,int,int,int,int[]) -> do
    31:31:boolean canConnectTo(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int) -> do
    35:41:int getConnect(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int) -> if
    45:45:boolean canBlockConnect(nidefawl.qubes.world.IBlockWorld,int,int,int,nidefawl.qubes.block.BlockConnect,int,int) -> do
    53:53:int getRenderType() -> int
    59:59:int getRenderShadow() -> try
    64:64:boolean isOccluding() -> for
    69:69:boolean isFullBB() -> byte
    74:74:boolean isFaceVisible(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int,nidefawl.qubes.block.Block,nidefawl.qubes.vec.AABBFloat) -> do
    80:109:nidefawl.qubes.vec.AABBFloat getRenderBlockBounds(nidefawl.qubes.world.IBlockWorld,int,int,int,nidefawl.qubes.vec.AABBFloat) -> do
    114:166:int getBBs(nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.AABBFloat[]) -> do
nidefawl.qubes.block.BlockPlantCrossedSquares -> IjL1jI1LL1jIIj:
    boolean multipass -> do
    38:41:int getFaceColor(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int) -> do
    45:45:int getRenderType() -> int
    50:50:boolean isOccluding() -> for
    58:58:int getBBs(nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.AABBFloat[]) -> do
    62:62:boolean isReplaceable() -> try
    66:66:boolean isFullBB() -> byte
    69:69:boolean applyRandomOffset() -> char
    73:76:nidefawl.qubes.vec.AABBFloat getRenderBlockBounds(nidefawl.qubes.world.IBlockWorld,int,int,int,nidefawl.qubes.vec.AABBFloat) -> do
    81:81:int getRenderShadow() -> try
    84:84:int getTexturePasses() -> do
    88:91:int getTexture(int,int,int) -> do
    97:97:int getLODPass() -> if
    104:107:void onUpdate(nidefawl.qubes.world.World,int,int,int,int) -> do
    109:110:boolean canStayOn(nidefawl.qubes.world.World,int,int,int) -> do
nidefawl.qubes.block.BlockPlantFlat -> lllliJL1IjiJL1L1:
    32:32:int getFaceColor(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int) -> do
    36:36:int getRenderType() -> int
    41:41:boolean isOccluding() -> for
    46:46:int getBBs(nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.AABBFloat[]) -> do
    50:50:boolean isReplaceable() -> try
    54:54:boolean isFullBB() -> byte
    61:68:nidefawl.qubes.vec.AABBFloat getRenderBlockBounds(nidefawl.qubes.world.IBlockWorld,int,int,int,nidefawl.qubes.vec.AABBFloat) -> do
    73:73:int getRenderShadow() -> try
    79:79:int getLODPass() -> if
nidefawl.qubes.block.BlockQuarterBlock -> L1lliJIjjI1LiJJi:
    short[] readOnly -> do
    36:40:short[] getSafeRead(nidefawl.qubes.world.IBlockWorld,int,int,int) -> do
    45:49:nidefawl.qubes.chunk.blockdata.BlockDataQuarterBlock getSafeCast(nidefawl.qubes.world.IBlockWorld,int,int,int) -> do
    54:60:void getQuarters(nidefawl.qubes.world.IBlockWorld,int,int,int,int[]) -> do
    63:69:boolean isOccludingBlock(nidefawl.qubes.world.IBlockWorld,int,int,int) -> if
    73:98:int getBBs(nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.AABBFloat[]) -> do
    102:106:int setSelectionBB(nidefawl.qubes.world.World,nidefawl.qubes.util.RayTrace$RayTraceIntersection,nidefawl.qubes.vec.BlockPos,nidefawl.qubes.vec.AABBFloat) -> do
    111:128:boolean raytrace(nidefawl.qubes.util.RayTrace,nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f) -> do
    132:138:boolean isNormalBlock(nidefawl.qubes.world.IBlockWorld,int,int,int) -> do
    144:197:int getItems(java.util.List) -> do
    201:205:void postPlace(nidefawl.qubes.world.BlockPlacer,nidefawl.qubes.vec.BlockPos,nidefawl.qubes.vec.Vector3f,int,int,int) -> do
nidefawl.qubes.block.BlockSand -> iJiJ1LL1IjIjiJll:
nidefawl.qubes.block.BlockSlab -> jIL1IjjIL1llIj:
    nidefawl.qubes.block.Block baseBlock -> sZ2zsZsZsZZsz2SS
    int overrideTextureIdx -> if
    27:27:nidefawl.qubes.block.Block getBaseBlock() -> do
    42:42:boolean isOccluding() -> for
    48:48:int getLightValue() -> new
    53:53:int getFaceColor(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int) -> do
    58:58:float getAlpha() -> do
    63:63:boolean applyAO() -> if
    68:68:boolean isTransparent() -> do
    73:82:int getBBs(nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.AABBFloat[]) -> do
    87:87:java.lang.String getName() -> do
    92:99:nidefawl.qubes.vec.AABBFloat getRenderBlockBounds(nidefawl.qubes.world.IBlockWorld,int,int,int,nidefawl.qubes.vec.AABBFloat) -> do
    104:104:boolean canPlaceAt(nidefawl.qubes.world.BlockPlacer,nidefawl.qubes.vec.BlockPos,nidefawl.qubes.vec.BlockPos,nidefawl.qubes.vec.Vector3f,int,int,int) -> do
    108:120:int prePlace(nidefawl.qubes.world.BlockPlacer,nidefawl.qubes.vec.BlockPos,nidefawl.qubes.vec.Vector3f,int,int,int) -> do
    124:131:int placeOffset(nidefawl.qubes.world.BlockPlacer,nidefawl.qubes.vec.BlockPos,nidefawl.qubes.vec.Vector3f,int,int,int) -> if
    136:171:boolean isFaceVisible(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int,nidefawl.qubes.block.Block,nidefawl.qubes.vec.AABBFloat) -> do
    175:176:boolean isNormalBlock(nidefawl.qubes.world.IBlockWorld,int,int,int) -> do
    183:183:boolean isSlab() -> int
    188:194:int getTexture(int,int,int) -> do
    197:197:boolean isFullBB() -> byte
    200:200:boolean isOccludingBlock(nidefawl.qubes.world.IBlockWorld,int,int,int) -> if
    205:215:void getQuarters(nidefawl.qubes.world.IBlockWorld,int,int,int,int[]) -> do
    219:220:int getItems(java.util.List) -> do
nidefawl.qubes.block.BlockSliced -> iJ1LL1L1llL1lliJ:
    13:13:int getRenderType() -> int
nidefawl.qubes.block.BlockStairs -> Ij1LL1IjIjL1IjjI:
    nidefawl.qubes.block.Block baseBlock -> sZ2zsZsZsZZsz2SS
    int overrideTextureIdx -> if
    int[] offsetXZ -> do
    int[] offsetXZ2 -> if
    27:27:nidefawl.qubes.block.Block getBaseBlock() -> do
    31:31:boolean isUpsideDown(int) -> for
    45:45:boolean isOccluding() -> for
    51:51:int getLightValue() -> new
    56:56:boolean applyAO() -> if
    61:61:boolean isTransparent() -> do
    66:85:int getBBs(nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.AABBFloat[]) -> do
    89:108:boolean raytrace(nidefawl.qubes.util.RayTrace,nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f) -> do
    113:113:java.lang.String getName() -> do
    118:118:int getFaceColor(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int) -> do
    123:123:float getAlpha() -> do
    128:135:nidefawl.qubes.vec.AABBFloat getRenderBlockBounds(nidefawl.qubes.world.IBlockWorld,int,int,int,nidefawl.qubes.vec.AABBFloat) -> do
    141:160:int prePlace(nidefawl.qubes.world.BlockPlacer,nidefawl.qubes.vec.BlockPos,nidefawl.qubes.vec.Vector3f,int,int,int) -> do
    165:186:boolean isFaceVisible(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int,nidefawl.qubes.block.Block,nidefawl.qubes.vec.AABBFloat) -> do
    192:192:boolean isNormalBlock(nidefawl.qubes.world.IBlockWorld,int,int,int) -> do
    198:198:boolean isStairs() -> new
    203:209:int getTexture(int,int,int) -> do
    212:212:boolean isFullBB() -> byte
    228:261:int stairTypeAt(nidefawl.qubes.world.IBlockWorld,int,int,int) -> do
    265:322:void getQuarters(nidefawl.qubes.world.IBlockWorld,int,int,int,int[]) -> do
    330:389:void setStairBB(nidefawl.qubes.vec.AABBFloat,int,int,int,int) -> do
    391:391:boolean isOccludingBlock(nidefawl.qubes.world.IBlockWorld,int,int,int) -> if
nidefawl.qubes.block.BlockStone -> lllljIL1L1iJ1LJi:
    15:15:float getRoughness(int) -> do
nidefawl.qubes.block.BlockStoneModelled -> jIJiL1jIjIiJiJJi:
    nidefawl.qubes.block.Block baseBlock -> sZ2zsZsZsZZsz2SS
    int overrideTextureIdx -> if
    22:28:int getTexture(int,int,int) -> do
nidefawl.qubes.block.BlockTextureMode -> jIiJL1Ij1LL1L1Ji:
    nidefawl.qubes.block.BlockTextureMode DEFAULT -> do
    nidefawl.qubes.block.BlockTextureMode TOP -> if
    nidefawl.qubes.block.BlockTextureMode TOP_BOTTOM -> for
    nidefawl.qubes.block.BlockTextureMode SUBTYPED_TEX_PER_TYPE -> int
    nidefawl.qubes.block.BlockTextureMode[] $VALUES -> do
    10:10:nidefawl.qubes.block.BlockTextureMode[] values() -> values
    10:10:nidefawl.qubes.block.BlockTextureMode valueOf(java.lang.String) -> valueOf
nidefawl.qubes.block.BlockTorch -> L1IjIjlliJiJIjL1:
    25:25:int getRenderType() -> int
    29:29:int getLightValue() -> new
    36:36:boolean applyAO() -> if
    41:41:boolean isOccluding() -> for
    45:45:boolean isFullBB() -> byte
    49:49:int getRenderShadow() -> try
    53:74:nidefawl.qubes.vec.AABBFloat getRenderBlockBounds(nidefawl.qubes.world.IBlockWorld,int,int,int,nidefawl.qubes.vec.AABBFloat) -> do
    79:79:int getBBs(nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.AABBFloat[]) -> do
    82:85:void onUpdate(nidefawl.qubes.world.World,int,int,int,int) -> do
    87:88:boolean canStayOn(nidefawl.qubes.world.World,int,int,int) -> do
nidefawl.qubes.block.BlockVine -> iJlliJJiL1iJJi:
    34:34:int getRenderType() -> int
    39:39:int getLODPass() -> if
    45:48:boolean canPlaceAt(nidefawl.qubes.world.BlockPlacer,nidefawl.qubes.vec.BlockPos,nidefawl.qubes.vec.BlockPos,nidefawl.qubes.vec.Vector3f,int,int,int) -> do
    53:88:int prePlace(nidefawl.qubes.world.BlockPlacer,nidefawl.qubes.vec.BlockPos,nidefawl.qubes.vec.Vector3f,int,int,int) -> do
    94:94:boolean isOccluding() -> for
    99:99:boolean isFullBB() -> byte
    104:104:boolean isFaceVisible(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int,nidefawl.qubes.block.Block,nidefawl.qubes.vec.AABBFloat) -> do
    109:109:int getRenderShadow() -> try
    114:114:boolean isReplaceable() -> try
    119:125:boolean raytrace(nidefawl.qubes.util.RayTrace,nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f) -> do
    130:130:int getBBs(nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.AABBFloat[]) -> do
    135:135:int setSelectionBB(nidefawl.qubes.world.World,nidefawl.qubes.util.RayTrace$RayTraceIntersection,nidefawl.qubes.vec.BlockPos,nidefawl.qubes.vec.AABBFloat) -> do
    139:171:int setSelectionBB(nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.AABBFloat) -> do
    176:176:int getFaceColor(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int) -> do
    180:180:int getInvRenderData(nidefawl.qubes.item.BlockStack) -> do
    186:186:float getInvRenderRotation() -> if
    189:204:void onUpdate(nidefawl.qubes.world.World,int,int,int,int) -> do
nidefawl.qubes.block.BlockWall -> JiL1lliJ1LL1jIll:
    nidefawl.qubes.block.Block baseBlock -> sZ2zsZsZsZZsz2SS
    int overrideTextureIdx -> if
    23:23:nidefawl.qubes.block.Block getBaseBlock() -> do
    27:40:int setWallConnections(nidefawl.qubes.world.IBlockWorld,int,int,int,boolean[]) -> do
    44:50:boolean canConnectTo(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int) -> do
    55:55:boolean canBlockConnect(nidefawl.qubes.world.IBlockWorld,int,int,int,nidefawl.qubes.block.BlockConnect,int,int) -> do
    73:73:int getLightValue() -> new
    78:78:int getFaceColor(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int) -> do
    83:83:float getAlpha() -> do
    87:93:int getTexture(int,int,int) -> do
    97:97:int getRenderType() -> int
    103:103:boolean isOccluding() -> for
    108:108:boolean isFullBB() -> byte
    113:113:boolean isFaceVisible(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int,nidefawl.qubes.block.Block,nidefawl.qubes.vec.AABBFloat) -> do
    118:118:int getRenderShadow() -> try
    123:135:nidefawl.qubes.vec.AABBFloat getRenderBlockBounds(nidefawl.qubes.world.IBlockWorld,int,int,int,nidefawl.qubes.vec.AABBFloat) -> do
    140:192:int getBBs(nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.AABBFloat[]) -> do
    197:198:int getItems(java.util.List) -> do
nidefawl.qubes.block.BlockWater -> jIiJJiL11L1LlliJ:
    13:13:int getRenderPass() -> for
    18:18:boolean applyAO() -> if
    23:23:float getAlpha() -> do
    28:28:boolean isOccluding() -> for
    33:33:boolean isReplaceable() -> try
    38:38:int getBBs(nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.AABBFloat[]) -> do
    43:43:int getRenderShadow() -> try
    47:47:int getLightLoss(nidefawl.qubes.blocklight.LightChunkCache,int,int,int,int) -> do
    50:50:float getRoughness(int) -> do
nidefawl.qubes.block.BlockWaterLily -> iJiJIjllIjll1LL1:
    24:24:int getRenderType() -> int
    27:30:void onUpdate(nidefawl.qubes.world.World,int,int,int,int) -> do
    32:32:boolean canStayOn(nidefawl.qubes.world.World,int,int,int) -> do
nidefawl.qubes.block.BlockWood -> IjjIiJ1LllIjiJ:
    int index -> if
    12:12:int getIndex() -> byte
nidefawl.qubes.block.IDMappingBlocks -> llJijI1LIjiJIjiJ:
    boolean CHANGED -> do
    boolean LOADED -> if
    int HIGHEST_BLOCK_ID -> do
    com.google.common.collect.ImmutableBiMap map -> do
    java.lang.Object sync -> do
    33:72:void load() -> do
    74:115:void save() -> if
    117:149:int get(java.lang.String) -> do
nidefawl.qubes.blocklight.BlockLightThread -> iJllL1L1JiIjjIjI:
    long sleepTime -> do
    java.util.concurrent.LinkedBlockingQueue queue -> do
    nidefawl.qubes.blocklight.LightChunkCache[] caches -> do
    int misses -> do
    int hits -> if
    boolean isRunning -> do
    nidefawl.qubes.world.WorldServer world -> do
    boolean finished -> if
    nidefawl.qubes.blocklight.BlockLightUpdate lightUpdater -> do
    46:121:void run() -> run
    130:149:nidefawl.qubes.blocklight.LightChunkCache getCache(nidefawl.qubes.world.WorldServer,int,int) -> do
    154:172:void halt() -> do
    175:177:long toHash(long,long,long,long) -> do
    181:181:int getX(long) -> do
    185:185:int getZ(long) -> if
    189:189:int getY(long) -> for
    193:193:int getFlags(long) -> int
    197:200:void queueBlock(int,int,int,int) -> do
    203:205:void queueChunk(int,int,int) -> do
    211:213:void ensureEmpty() -> if
nidefawl.qubes.blocklight.BlockLightUpdate -> ll1LL1jIllIjIjJi:
    long[] stackRemove -> do
    long[] stackAdd -> if
    int[] stackRemoveLight -> do
    int numBlocksUpdate -> do
    25:59:void updateChunk(nidefawl.qubes.blocklight.LightChunkCache,int,int,int) -> do
    64:185:void updateBlock(nidefawl.qubes.blocklight.LightChunkCache,int,int,int,int) -> do
    188:190:void setLight(nidefawl.qubes.blocklight.LightChunkCache,int,int,int,int,int,int) -> do
    194:228:int getNewLightLevel(nidefawl.qubes.blocklight.LightChunkCache,int,int,int,int) -> do
nidefawl.qubes.blocklight.LightChunkCache -> L1jIllJiL1iJ1LiJ:
    nidefawl.qubes.chunk.Chunk[] chunks -> do
    int lastX -> do
    int lastZ -> if
    boolean isValid -> do
    int[] flaggedNumBlocks -> do
    nidefawl.qubes.vec.BlockBoundingBox[] flaggedBlocks -> do
    int worldHeightMin1 -> for
    int nUse -> new
    int drainedChunks -> int
    47:51:void resetFlaggedBlocks() -> do
    54:56:void invalidate() -> if
    59:64:int idx(int,int) -> do
    68:68:nidefawl.qubes.chunk.Chunk get(int,int) -> do
    72:73:boolean canSeeSky(int,int,int) -> do
    77:78:boolean isTransparent(int,int,int) -> if
    82:83:int getHeight(int,int) -> if
    87:90:int getLight(int,int,int,int) -> do
    93:96:int getWater(int,int,int) -> do
    103:107:int getTypeId(int,int,int) -> if
    119:134:boolean setLight(int,int,int,int,int,int) -> do
    138:147:boolean isValid(nidefawl.qubes.world.WorldServer,int,int) -> do
    150:165:boolean cache(nidefawl.qubes.world.WorldServer,int,int) -> if
    176:188:void drainFlagged(nidefawl.qubes.server.PlayerChunkTracker) -> do
    196:200:boolean hasBlock(int,int) -> do
    207:208:void flagUsed() -> for
    217:217:int getNumUses() -> do
nidefawl.qubes.chat.ChannelManager -> jIjIIjJiiJjIL11L:
    java.util.Map channels -> do
    nidefawl.qubes.chat.channel.GlobalChannel global -> do
    nidefawl.qubes.server.GameServer server -> do
    42:42:nidefawl.qubes.server.GameServer getServer() -> do
    49:50:void registerChannel(nidefawl.qubes.chat.channel.AbstractChannel) -> do
    53:53:nidefawl.qubes.chat.channel.AbstractChannel getChannel(java.lang.String) -> do
    64:71:void addUser(nidefawl.qubes.chat.ChatUser) -> do
    77:84:void removeUser(nidefawl.qubes.entity.PlayerServer) -> do
    92:96:void handlePlayerChat(nidefawl.qubes.chat.ChatUser,java.lang.String,java.lang.String) -> do
nidefawl.qubes.chat.ChatUser -> JiL1jIJillll1LjI:
    java.util.Collection getJoinedChannels() -> do
    java.lang.String getChatName() -> do
    void sendMessage(java.lang.String,java.lang.String) -> do
nidefawl.qubes.chat.channel.AbstractChannel -> JiiJL1iJjIllJill:
    java.lang.String name -> do
    java.lang.String tag -> if
    nidefawl.qubes.chat.ChannelManager channelManager -> do
    31:31:java.lang.String getTag() -> do
    java.util.Collection getUsers() -> do
    void addUser(nidefawl.qubes.chat.ChatUser) -> do
    void removeUser(nidefawl.qubes.chat.ChatUser) -> if
    56:56:boolean containsUser(nidefawl.qubes.chat.ChatUser) -> do
    64:66:void onChat(nidefawl.qubes.chat.ChatUser,java.lang.String) -> do
    73:76:void broadcastUserMessage(nidefawl.qubes.chat.ChatUser,java.lang.String) -> if
    93:94:java.lang.String formatMessage(nidefawl.qubes.chat.ChatUser,java.lang.String) -> do
nidefawl.qubes.chat.channel.GlobalChannel -> L1iJIjIjIjJiJiJi:
    29:29:java.util.Collection getUsers() -> do
    34:34:void addUser(nidefawl.qubes.chat.ChatUser) -> do
    38:38:void removeUser(nidefawl.qubes.chat.ChatUser) -> if
nidefawl.qubes.chat.client.ChatLine -> L1IjIjll1LJiIjJi:
    java.lang.String rawMessage -> do
    long receiveTime -> do
    25:25:java.lang.String getLine() -> do
    31:31:long getTime() -> do
nidefawl.qubes.chat.client.ChatManager -> iJJiJi1L1LjIiJjI:
    java.util.ArrayList line -> do
    java.util.ArrayList hist -> if
    boolean saveHistory -> do
    nidefawl.qubes.chat.client.ChatManager instance -> do
    37:37:nidefawl.qubes.chat.client.ChatManager getInstance() -> do
    45:46:void receiveMessage(java.lang.String,java.lang.String) -> do
    52:52:java.util.List getLines() -> do
    59:65:int getNumNewLines() -> do
    69:69:void syncChannels(java.util.ArrayList) -> do
    75:87:void loadInputHistory() -> do
    93:106:void saveInputHistory() -> if
    109:111:void addHistory(java.lang.String) -> do
    115:115:int getHistorySize() -> if
    120:120:java.lang.String getHistory(int) -> do
    125:125:int indexOfHistory(java.lang.String) -> do
    130:132:void removeHistory(int) -> do
    137:139:void addHistory(int,java.lang.String) -> do
nidefawl.qubes.chunk.Chunk -> JiL1Ij1LjIllJi1L:
    nidefawl.qubes.world.World world -> do
    int x -> do
    int z -> if
    int worldHeightBits -> for
    int height -> int
    short[] blocks -> do
    nidefawl.qubes.chunk.ChunkDataSliced2 blockMetadata -> do
    nidefawl.qubes.chunk.blockdata.BlockDataSliced blockData -> do
    byte[] blockLight -> do
    int[] heightMap -> do
    byte[] biomes -> if
    byte[] waterMask -> for
    long loadTime -> do
    boolean updateHeightMap -> do
    boolean needsSave -> if
    boolean isEmpty -> for
    boolean isLit -> int
    boolean isValid -> new
    boolean isUnloading -> try
    boolean isPopulated -> byte
    53:61:void checkIsEmtpy() -> do
    68:68:int getBlockX() -> do
    72:72:int getBlockZ() -> if
    76:76:int getWater(int,int,int) -> do
    80:80:int getTypeId(int,int,int) -> if
    89:89:nidefawl.qubes.biome.Biome getBiome(int,int) -> do
    93:93:nidefawl.qubes.chunk.blockdata.BlockData getBlockData(int,int,int) -> do
    96:96:int getData(int,int,int) -> for
    106:106:short getFullData(int,int,int) -> do
    110:110:boolean setFullData(int,int,int,short) -> do
    114:114:boolean setData(int,int,int,int) -> do
    117:117:boolean setBlockData(int,int,int,nidefawl.qubes.chunk.blockdata.BlockData) -> do
    121:133:int getTopBlock(int,int) -> do
    144:168:boolean setTypeData(int,int,int,int,int) -> do
    172:185:boolean setType(int,int,int,int) -> if
    189:191:void flagModified() -> if
    216:216:boolean justLoaded() -> do
    220:220:short[] getBlocks() -> do
    224:224:byte[] getBlockLight() -> do
    228:239:int getLight(int,int,int,int) -> do
    244:252:int getLight(int,int,int) -> int
    256:274:boolean setLight(int,int,int,int,int) -> if
    278:279:int getHeightMap(int,int) -> if
    285:314:void updateHeightMap(int,int) -> do
    318:330:void initLight() -> for
    334:353:void initHeightMap() -> int
    363:368:void postLoad() -> new
    371:372:void postGenerate() -> try
    379:396:byte[] getLights(nidefawl.qubes.vec.BlockBoundingBox) -> do
    405:425:boolean setLights(byte[],nidefawl.qubes.vec.BlockBoundingBox) -> do
    433:433:java.lang.String toString() -> toString
    440:440:byte[] getWaterMask() -> if
nidefawl.qubes.chunk.ChunkData -> L1JiL1jI1LiJL1Ji:
    boolean setByte(int,int,int,boolean,int) -> do
    21:21:boolean setLower(int,int,int,int) -> do
    27:27:nidefawl.qubes.nbt.Tag$Compound writeToTag() -> do
    33:33:void readFromTag(nidefawl.qubes.nbt.Tag$Compound) -> do
nidefawl.qubes.chunk.ChunkDataSliced2 -> L1L1lliJiJL1llIj:
    short[][] array -> do
    28:31:short get(int,int,int) -> do
    35:42:boolean set(int,int,int,short) -> do
    45:58:boolean setByte(int,int,int,boolean,int) -> do
    62:69:short[] getArray(int,boolean) -> do
    76:96:nidefawl.qubes.nbt.Tag$Compound writeToTag() -> do
    103:121:void readFromTag(nidefawl.qubes.nbt.Tag$Compound) -> do
    127:131:short[][] getArrays() -> do
nidefawl.qubes.chunk.ChunkManager -> jIJiL1llllIjjIIj:
    nidefawl.qubes.world.World world -> do
    nidefawl.qubes.chunk.ChunkTable table -> do
    nidefawl.qubes.chunk.ChunkTable makeChunkTable() -> do
    27:27:nidefawl.qubes.chunk.Chunk get(int,int) -> do
    31:31:int getChunksLoaded() -> do
    35:35:void saveAll() -> do
    38:38:void queueLoadChecked(long) -> do
    45:45:int deleteAllChunks() -> if
    48:48:int regenChunks(java.util.Collection) -> do
nidefawl.qubes.chunk.ChunkTable -> JiJillllJiL1jIiJ:
    nidefawl.qubes.chunk.Chunk[][] values -> do
    int size -> do
    int halfSize -> if
    int approxLoaded -> byte
    int mswLow -> for
    int mswHigh -> int
    int lswLow -> new
    int lswHigh -> try
    36:50:boolean put(int,int,nidefawl.qubes.chunk.Chunk) -> do
    55:59:void updateBounds(int,int) -> do
    62:62:nidefawl.qubes.chunk.Chunk get(long) -> do
    66:71:nidefawl.qubes.chunk.Chunk get(int,int) -> do
    76:83:nidefawl.qubes.chunk.Chunk remove(int,int) -> if
    98:111:int size() -> do
    150:152:nidefawl.qubes.chunk.Chunk[][] clear() -> do
    156:156:nidefawl.qubes.chunk.Chunk remove(long) -> if
    161:173:java.util.List asList() -> do
    234:234:java.util.Iterator iterator() -> iterator
nidefawl.qubes.chunk.ChunkTable$ChunkRegionTableIterator -> iJ1LJiIjIjiJjIIj:
    nidefawl.qubes.chunk.Chunk value -> do
    int msw -> do
    int lsw -> if
    nidefawl.qubes.chunk.ChunkTable table -> if
    nidefawl.qubes.chunk.ChunkTable this$0 -> do
    190:204:boolean hasNext() -> hasNext
    209:211:nidefawl.qubes.chunk.Chunk next() -> do
    216:216:void remove() -> remove
    177:177:java.lang.Object next() -> next
nidefawl.qubes.chunk.blockdata.BlockData -> IjlljIJiIj1Lllll:
    20:26:boolean isEqual(nidefawl.qubes.chunk.blockdata.BlockData,nidefawl.qubes.chunk.blockdata.BlockData) -> do
    33:33:boolean compareTo(nidefawl.qubes.chunk.blockdata.BlockData) -> do
    boolean compareData(nidefawl.qubes.chunk.blockdata.BlockData) -> if
    int getTypeId() -> do
    int getLength() -> if
    42:46:nidefawl.qubes.chunk.blockdata.BlockData fromType(int) -> do
    50:57:int writeHeader(byte[],int) -> do
    int writeData(byte[],int) -> if
    int readData(byte[],int) -> for
    63:66:int writeDataToStream(java.io.DataOutput) -> do
    74:77:void readDataFromStream(java.io.DataInput) -> do
    nidefawl.qubes.chunk.blockdata.BlockData copy() -> do
nidefawl.qubes.chunk.blockdata.BlockDataQuarterBlock -> iJ1LJiL1lliJjIL1:
    short[] blockIDs -> do
    byte[] blockMeta -> do
    21:28:boolean compareData(nidefawl.qubes.chunk.blockdata.BlockData) -> if
    33:33:int getTypeId() -> do
    38:38:int getLength() -> if
    43:48:int writeData(byte[],int) -> if
    53:57:int readData(byte[],int) -> for
    61:64:void fillIntArr(int[]) -> do
    67:72:void setTypeAndData(int,int,int,int,int) -> do
    74:79:void setType(int,int,int,int) -> do
    86:87:int getType(int,int,int) -> do
    90:91:int getData(int,int,int) -> if
    97:100:int idx(int,int,int) -> for
    105:110:nidefawl.qubes.chunk.blockdata.BlockData copy() -> do
nidefawl.qubes.chunk.blockdata.BlockDataSliced -> L1llJijI1LL1lljI:
    nidefawl.qubes.chunk.blockdata.BlockData[][] array -> do
    30:33:nidefawl.qubes.chunk.blockdata.BlockData get(int,int,int) -> do
    37:44:boolean set(int,int,int,nidefawl.qubes.chunk.blockdata.BlockData) -> do
    48:55:nidefawl.qubes.chunk.blockdata.BlockData[] getArray(int,boolean) -> do
    63:85:nidefawl.qubes.nbt.Tag$Compound writeToTag() -> do
    92:113:byte[] sliceToBytes(nidefawl.qubes.chunk.blockdata.BlockData[],byte[],int) -> do
    121:136:void readFromTag(nidefawl.qubes.nbt.Tag$Compound) -> do
    143:161:void sliceFromBytes(byte[],nidefawl.qubes.chunk.blockdata.BlockData[]) -> do
    167:171:nidefawl.qubes.chunk.blockdata.BlockData[][] getArrays() -> do
nidefawl.qubes.chunk.client.ChunkManagerClient -> iJIjllIj1LiJIjiJ:
    15:15:nidefawl.qubes.chunk.ChunkTable makeChunkTable() -> do
    19:25:nidefawl.qubes.chunk.Chunk getOrMake(int,int) -> if
    33:37:void remove(int,int) -> do
nidefawl.qubes.chunk.server.ChunkLoadThread -> L1L1jI1LlliJiJjI:
    java.util.concurrent.LinkedBlockingQueue queue -> do
    nidefawl.qubes.chunk.server.ChunkManagerServer mgr -> do
    nidefawl.qubes.chunk.server.ChunkLoadThread$LoadThread[] threads -> do
    81:84:void startThreads() -> do
    91:93:void ensureEmpty() -> if
    96:101:boolean isRunning() -> do
    109:112:void queueLoadChecked(long) -> do
    115:119:void halt() -> for
    10:10:nidefawl.qubes.chunk.server.ChunkManagerServer access$000(nidefawl.qubes.chunk.server.ChunkLoadThread) -> do
    10:10:java.util.concurrent.LinkedBlockingQueue access$100(nidefawl.qubes.chunk.server.ChunkLoadThread) -> do
nidefawl.qubes.chunk.server.ChunkLoadThread$LoadThread -> JijI1LJiL1Ij1LIj:
    boolean isRunning -> do
    boolean finished -> if
    nidefawl.qubes.chunk.server.ChunkManagerServer mgr -> do
    java.util.concurrent.LinkedBlockingQueue queue -> do
    29:51:void run() -> run
    54:69:void halt() -> do
nidefawl.qubes.chunk.server.ChunkManagerServer -> JiIjJiiJ1LiJiJIj:
    nidefawl.qubes.chunk.server.ChunkLoadThread thread -> do
    nidefawl.qubes.chunk.server.ChunkUnloadThread unloadThread -> do
    nidefawl.qubes.chunk.server.ChunkReader reader -> do
    nidefawl.qubes.chunk.server.RegionFileCache regionFileCache -> do
    java.lang.Object syncObj -> do
    java.lang.Object syncObj2 -> if
    nidefawl.qubes.world.WorldServer worldServer -> do
    java.util.Iterator it -> do
    34:36:void startThreads() -> if
    38:46:void onWorldUnload() -> for
    50:50:nidefawl.qubes.chunk.ChunkTable makeChunkTable() -> do
    54:81:void loadOrGenerate(int,int) -> do
    86:87:void queueLoadChecked(int,int) -> if
    89:93:void queueLoadChecked(long) -> do
    97:116:void saveAndUnloadChunks(int) -> do
    118:123:void unloadChunk(int,int) -> for
    125:128:void saveChunk(nidefawl.qubes.chunk.Chunk) -> do
    135:147:void saveAll() -> do
    149:149:boolean isRunning() -> do
    155:155:java.util.Iterator newUpdateIterator() -> do
    162:178:int deleteAllChunks() -> if
    181:205:int regenChunks(java.util.Collection) -> do
nidefawl.qubes.chunk.server.ChunkReader -> iJ1LIj1LL11Lll:
    nidefawl.qubes.chunk.server.ChunkManagerServer mgr -> do
    nidefawl.qubes.chunk.server.RegionFileCache fileCache -> do
    22:33:nidefawl.qubes.chunk.Chunk loadChunk(nidefawl.qubes.world.World,int,int) -> do
    37:45:void saveChunk(nidefawl.qubes.chunk.Chunk) -> do
    48:72:nidefawl.qubes.nbt.Tag$Compound writeChunk(nidefawl.qubes.chunk.Chunk) -> do
    76:102:nidefawl.qubes.chunk.Chunk readChunk(nidefawl.qubes.world.World,int,int,nidefawl.qubes.nbt.Tag$Compound) -> do
    106:115:void readBlocks(byte[],short[]) -> do
nidefawl.qubes.chunk.server.ChunkUnloadThread -> JiIjjIIjjI1LJi1L:
    long sleepTime -> do
    java.util.concurrent.LinkedBlockingQueue queue -> do
    boolean isRunning -> do
    nidefawl.qubes.chunk.server.ChunkManagerServer mgr -> do
    boolean finished -> if
    33:64:void run() -> run
    70:72:void ensureEmpty() -> do
    76:84:void queueUnloadChecked(java.lang.Long) -> do
    87:105:void halt() -> if
nidefawl.qubes.chunk.server.RegionFile -> jIiJjIJiL1jIJi:
    java.io.RandomAccessFile randomAccess -> do
    java.lang.String name -> do
    nidefawl.qubes.chunk.server.RegionFile$RegionFileHeader header -> do
    long timeWrite -> do
    long timeSeek -> if
    long timeSetSec -> for
    long timeFindSec -> int
    long timeWriteHeader -> new
    105:120:int deleteChunks() -> do
    124:136:byte[] readChunk(int,int) -> do
    146:195:void writeChunk(int,int,byte[]) -> do
    198:210:void writeAtOffset(nidefawl.qubes.chunk.server.RegionFile$DataChunkMeta,byte[]) -> do
    213:218:void setSectors(int,int,boolean) -> do
    221:221:int toBytes(int) -> do
    225:225:int toSectors(int) -> if
    229:229:nidefawl.qubes.chunk.server.RegionFile$DataChunkMeta getMeta(int) -> do
    233:235:void writeHeader() -> if
    238:244:boolean readHeader() -> do
    248:248:java.lang.String getName(int,int) -> do
    252:256:void close() -> do
    259:264:int getLastUsedSec() -> if
    268:273:int getLastFreeSec() -> for
    277:277:java.lang.String getFileName() -> do
nidefawl.qubes.chunk.server.RegionFile$DataChunkMeta -> JiIjllL1JiL1JiiJ:
    long byteOffset -> do
    int offset -> do
    int size -> if
    int writetime -> for
    54:57:void read(java.io.RandomAccessFile) -> do
    60:63:void write(java.io.RandomAccessFile) -> if
nidefawl.qubes.chunk.server.RegionFile$RegionFileHeader -> JijIllL1JilliJll:
    int version -> do
    nidefawl.qubes.chunk.server.RegionFile$DataChunkMeta[] chunks -> do
    java.util.ArrayList usedSectors -> do
    20:33:void read(java.io.RandomAccessFile) -> do
    36:41:void write(java.io.RandomAccessFile) -> if
nidefawl.qubes.chunk.server.RegionFileCache -> IjL1L1JiiJiJL11L:
    java.util.regex.Pattern FILE_PATTERN -> do
    java.io.File dir -> do
    java.util.HashMap map -> do
    30:30:long toLong(int,int) -> do
    36:36:nidefawl.qubes.chunk.server.RegionFile getRegionFileChunk(int,int) -> do
    40:56:nidefawl.qubes.chunk.server.RegionFile getRegionFile(int,int) -> if
    60:61:java.io.File getFile(java.io.File,int,int) -> do
    65:76:void closeAll() -> do
    79:103:int deleteChunks() -> do
nidefawl.qubes.chunk.server.RegionFileCache$1 -> ll1LjIL1JiiJll1L:
    nidefawl.qubes.chunk.server.RegionFileCache this$0 -> do
    84:84:boolean accept(java.io.File) -> accept
nidefawl.qubes.config.AbstractYMLConfig -> llJilljIiJllJiIj:
    java.util.Map map -> do
    25:42:void write(java.io.File) -> do
    45:71:void save(java.io.OutputStream) -> do
    74:86:void load(java.io.File) -> if
    89:96:void load(java.io.InputStream) -> do
    99:102:java.lang.String getString(java.lang.String,java.lang.String) -> do
    106:109:java.lang.Boolean getBoolean(java.lang.String,boolean) -> do
    113:116:int getInt(java.lang.String,int) -> do
    120:123:long getLong(java.lang.String,long) -> do
    127:130:float getFloat(java.lang.String,float) -> do
    141:142:void setString(java.lang.String,java.lang.String) -> do
    148:149:void setBoolean(java.lang.String,boolean) -> do
    152:153:void setInt(java.lang.String,int) -> do
    157:158:void setFloat(java.lang.String,float) -> do
    161:162:void setLong(java.lang.String,long) -> do
    void setDefaults() -> do
    void load() -> if
    void save() -> for
nidefawl.qubes.config.ClientSettings -> L1IjL1IjlliJIj1L:
    int chunkLoadDistance -> do
    int shadowDrawMode -> if
    int ssr -> for
    int aa -> int
    int smaaQuality -> new
    float thirdpersonDistance -> do
    boolean dirty -> do
    int saveTicks -> byte
    int ao -> try
    java.lang.String lastserver -> do
    28:35:void setDefaults() -> do
    39:47:void load() -> if
    51:59:void save() -> for
    66:72:boolean lazySave() -> do
nidefawl.qubes.config.InvalidConfigException -> lliJll1LjIL1jIiJ:
nidefawl.qubes.config.ServerConfig -> L1iJL11LJiiJlljI:
    int port -> do
    java.lang.String listenAddr -> do
    int packetTimeout -> if
    int chunkCompressionLevel -> for
    15:19:void setDefaults() -> do
    23:27:void load() -> if
    31:35:void save() -> for
nidefawl.qubes.config.WorkingEnv -> jIjIL1llL1jIll1L:
    java.io.File workingDir -> do
    java.io.File assetDir -> if
    java.io.File packsDir -> for
    java.io.File worlds -> int
    java.io.File config -> new
    java.io.File playerdata -> try
    19:34:void init(java.lang.String) -> do
    37:37:java.io.File getAssetFolder() -> do
    43:43:java.io.File getConfigFolder() -> if
    46:46:java.io.File getWorldsFolder() -> for
    50:50:java.io.File getPlayerData() -> int
nidefawl.qubes.crafting.CraftingCategory -> llllllJill1L1LjI:
    nidefawl.qubes.crafting.CraftingCategory[] categories -> do
    nidefawl.qubes.crafting.CraftingCategory tools -> do
    nidefawl.qubes.crafting.CraftingCategory wood -> if
    nidefawl.qubes.crafting.CraftingCategory stone -> for
    nidefawl.qubes.crafting.CraftingCategory blocks -> int
    java.lang.String name -> do
    int id -> do
    java.util.ArrayList recipes -> do
    java.util.HashMap map -> do
    19:19:nidefawl.qubes.crafting.CraftingCategory getCatId(int) -> do
    31:31:int getId() -> do
    38:46:void addRecipe(java.lang.String,nidefawl.qubes.crafting.recipes.CraftingRecipe) -> do
nidefawl.qubes.crafting.CraftingManager -> iJjIJilljIjIJi1L:
    nidefawl.qubes.entity.PlayerServer player -> do
    31:50:int handleRequest(nidefawl.qubes.crafting.CraftingCategory,nidefawl.qubes.crafting.recipes.CraftingRecipe,int,int) -> do
    54:59:void reset() -> do
    62:94:int craft(nidefawl.qubes.crafting.CraftingCategory,nidefawl.qubes.crafting.recipes.CraftingRecipe,int) -> do
    98:133:boolean update() -> do
    137:192:int findInputs(nidefawl.qubes.crafting.recipes.CraftingRecipe,nidefawl.qubes.inventory.slots.SlotsInventoryBase,nidefawl.qubes.inventory.slots.SlotsCrafting,int) -> do
    196:207:nidefawl.qubes.network.packet.PacketSCraftingProgress getStatePacket(int) -> do
nidefawl.qubes.crafting.CraftingManagerBase -> JiiJiJiJL1IjL1ll:
    int id -> do
    int amount -> if
    long startTime -> do
    long endTime -> if
    boolean finished -> do
    nidefawl.qubes.crafting.recipes.CraftingRecipe recipe -> do
    22:30:nidefawl.qubes.nbt.Tag$Compound save() -> do
    33:38:void load(nidefawl.qubes.nbt.Tag$Compound) -> do
    41:54:int calcMaxAmount(nidefawl.qubes.crafting.recipes.CraftingRecipe,nidefawl.qubes.inventory.slots.SlotsInventoryBase) -> do
    57:57:int getAmount() -> do
    60:60:int getId() -> if
    63:63:long getStartTime() -> do
    66:66:long getEndTime() -> if
    69:69:nidefawl.qubes.crafting.recipes.CraftingRecipe getRecipe() -> do
    72:72:boolean isRunning() -> if
    75:75:boolean isFinished() -> for
nidefawl.qubes.crafting.CraftingManagerClient -> L1lljIjIiJIjjIIj:
    nidefawl.qubes.gui.crafting.GuiCraftingProgressEntry guiElement -> do
    nidefawl.qubes.entity.PlayerSelf player -> do
    long recvTime -> for
    int state -> for
    23:23:nidefawl.qubes.gui.crafting.GuiCraftingProgressEntry getGuiElement() -> do
    32:46:void handleRequest(int,nidefawl.qubes.network.packet.PacketSCraftingProgress) -> do
nidefawl.qubes.crafting.recipes.CraftingRecipe -> iJIjiJll1LjIllL1:
    int NEXT_ID -> do
    nidefawl.qubes.item.BaseStack[] in -> do
    nidefawl.qubes.item.BaseStack[] out -> if
    int id -> if
    nidefawl.qubes.item.BaseStack preview -> do
    nidefawl.qubes.crafting.CraftingCategory category -> do
    java.lang.String subCat -> do
    27:27:int getId() -> do
    30:30:nidefawl.qubes.item.BaseStack[] getIn() -> do
    33:33:nidefawl.qubes.item.BaseStack[] getOut() -> if
    36:36:nidefawl.qubes.item.BaseStack getPreview() -> do
    58:58:long getTime() -> do
    61:61:nidefawl.qubes.crafting.CraftingCategory getCategory() -> do
    64:70:void setInput(nidefawl.qubes.item.BaseStack[]) -> do
    72:81:void setOutput(nidefawl.qubes.item.BaseStack[]) -> if
    83:85:void setCategory(nidefawl.qubes.crafting.CraftingCategory,java.lang.String) -> do
nidefawl.qubes.crafting.recipes.CraftingRecipes -> iJjIJillJill1LjI:
    java.util.ArrayList all -> do
    nidefawl.qubes.crafting.recipes.CraftingRecipe[] recipesArray -> do
    22:23:void add(nidefawl.qubes.crafting.recipes.CraftingRecipe) -> do
    27:117:void init() -> do
    120:120:nidefawl.qubes.crafting.recipes.CraftingRecipe getRecipeId(int) -> do
nidefawl.qubes.entity.Entity -> jIiJ1LjIJijIjI:
    int NEXT_ENT_ID -> do
    int id -> if
    nidefawl.qubes.world.World world -> do
    nidefawl.qubes.vec.Vec3D pos -> do
    nidefawl.qubes.vec.Vec3D lastPos -> if
    nidefawl.qubes.vec.Vec3D mot -> for
    nidefawl.qubes.vec.Vec3D lastMot -> int
    float yaw -> do
    float lastYaw -> if
    float yawBodyOffset -> for
    float lastYawBodyOffset -> int
    float pitch -> new
    float lastPitch -> try
    boolean noclip -> do
    boolean hitGround -> if
    nidefawl.qubes.vec.AABB aabb -> do
    nidefawl.qubes.vec.AABB aabb2 -> if
    nidefawl.qubes.vec.AABB aabb3 -> for
    nidefawl.qubes.vec.AABB aabb4 -> int
    nidefawl.qubes.vec.AABB dbg -> new
    nidefawl.qubes.util.CollisionQuery coll -> do
    nidefawl.qubes.vec.Vector3f renderPos -> do
    nidefawl.qubes.vec.Vector3f renderRot -> if
    nidefawl.qubes.vec.Vec3D remotePos -> new
    nidefawl.qubes.vec.Vector3f remoteRotation -> for
    int rotticks -> for
    int posticks -> int
    double width -> do
    double height -> if
    double length -> for
    int ticks1 -> new
    float timeJump -> byte
    float timePunch -> case
    boolean flagRemove -> for
    java.util.Random random -> do
    nidefawl.qubes.entity.EntityProperties properties -> do
    nidefawl.qubes.item.BaseStack[] equipment -> do
    int swingAnim -> try
    int swingProgress -> byte
    float swingProgressF -> char
    float prevSwingProgressF -> else
    float distanceMoved -> goto
    float prevDistanceMoved -> long
    72:72:int hashCode() -> hashCode
    77:77:boolean equals(java.lang.Object) -> equals
    81:85:void tickUpdate() -> do
    88:88:boolean doesFall() -> do
    91:91:boolean doesFly() -> if
    94:132:void postStep() -> if
    134:143:void preStep() -> for
    145:302:void step() -> int
    305:305:boolean findEdge() -> for
    309:309:float getGravity() -> do
    313:314:void move(nidefawl.qubes.vec.Vec3D) -> do
    317:318:void move(nidefawl.qubes.vec.Vector3f) -> do
    320:325:void move(double,double,double) -> do
    331:334:void setYawPitch(float,float) -> do
    340:345:nidefawl.qubes.nbt.Tag writeClientData(boolean) -> do
    350:357:void readClientData(nidefawl.qubes.nbt.Tag) -> do
    359:363:void readProperties(nidefawl.qubes.nbt.Tag) -> if
    nidefawl.qubes.entity.EntityType getEntityType() -> do
    372:380:int getLookDir() -> do
    389:393:nidefawl.qubes.vec.Vector3f getRenderPos(float) -> do
    402:417:nidefawl.qubes.vec.Vector3f getRenderRot(float) -> if
    424:426:void setRemotePos(nidefawl.qubes.vec.Vec3D) -> if
    434:460:void setRemoteRotation(float,float,float) -> do
    463:464:void remove() -> new
    467:467:java.util.Random getRandom() -> do
    471:471:float getPathWeight(int,int,int) -> do
    474:474:nidefawl.qubes.vec.AABB getAabb() -> do
    478:482:void adjustRenderProps(nidefawl.qubes.models.qmodel.QModelProperties,float) -> do
    485:485:nidefawl.qubes.models.EntityModel getEntityModel() -> do
    488:488:nidefawl.qubes.entity.EntityProperties getEntityProperties() -> do
    491:494:nidefawl.qubes.item.BaseStack getActiveItem(int) -> do
    499:500:void setEquipment(nidefawl.qubes.item.BaseStack[]) -> do
    503:503:int getSwinglen() -> if
    506:519:void animUpdate() -> byte
    521:527:void swing() -> try
    531:533:float getSwingProgress(float) -> do
nidefawl.qubes.entity.EntityAI -> JiJiIj1LL1IjJi:
    nidefawl.qubes.entity.ai.TaskManager taskManager -> do
    nidefawl.qubes.entity.ai.AINav nav -> do
    nidefawl.qubes.entity.ai.AIMove move -> do
    float moveForward -> this
    boolean jump -> int
    float landMovementFactor -> void
    float airMovementFactor -> break
    22:57:void tickUpdate() -> do
    61:71:void preStep() -> for
    74:86:void setMotion(float,float,float) -> if
    90:90:nidefawl.qubes.entity.ai.AINav getNav() -> do
    95:95:nidefawl.qubes.entity.ai.AIMove getMove() -> do
    101:102:void setMoveForward(float) -> do
nidefawl.qubes.entity.EntityAnimal -> iJ1LIjjIjIIjjIIj:
nidefawl.qubes.entity.EntityArcher -> jIL1iJjI1LL1jI1L:
    19:19:nidefawl.qubes.entity.EntityType getEntityType() -> do
    24:24:nidefawl.qubes.models.EntityModel getEntityModel() -> do
nidefawl.qubes.entity.EntityCat -> jI1L1L1LiJjIIjJi:
    14:14:nidefawl.qubes.entity.EntityType getEntityType() -> do
    19:19:nidefawl.qubes.models.EntityModel getEntityModel() -> do
nidefawl.qubes.entity.EntityChicken -> iJllL11LL1L1lliJ:
    15:15:nidefawl.qubes.entity.EntityType getEntityType() -> do
    20:20:nidefawl.qubes.models.EntityModel getEntityModel() -> do
nidefawl.qubes.entity.EntityDemon -> JiIjJiJiIjjIL11L:
    17:17:nidefawl.qubes.entity.EntityType getEntityType() -> do
    22:22:nidefawl.qubes.models.EntityModel getEntityModel() -> do
nidefawl.qubes.entity.EntityDog -> lljIL1llIjJiIjiJ:
    15:15:nidefawl.qubes.entity.EntityType getEntityType() -> do
    20:20:nidefawl.qubes.models.EntityModel getEntityModel() -> do
nidefawl.qubes.entity.EntityDuck -> iJJill1L1LjI1Lll:
    15:15:nidefawl.qubes.entity.EntityType getEntityType() -> do
    20:20:nidefawl.qubes.models.EntityModel getEntityModel() -> do
nidefawl.qubes.entity.EntityGoat -> iJJilljIiJIjlliJ:
    15:15:nidefawl.qubes.entity.EntityType getEntityType() -> do
    20:20:nidefawl.qubes.models.EntityModel getEntityModel() -> do
nidefawl.qubes.entity.EntityMob -> IjJiIjiJll1LiJll:
nidefawl.qubes.entity.EntityPig -> llL1iJjIlliJllL1:
    15:15:nidefawl.qubes.entity.EntityType getEntityType() -> do
    20:20:nidefawl.qubes.models.EntityModel getEntityModel() -> do
nidefawl.qubes.entity.EntityPony -> jIiJjIll1LlljIiJ:
    15:15:nidefawl.qubes.entity.EntityType getEntityType() -> do
    20:20:nidefawl.qubes.models.EntityModel getEntityModel() -> do
nidefawl.qubes.entity.EntityProperties -> IjJijIJiiJjIIjjI:
    int[] properties -> do
    11:11:int getOption(int,int) -> do
    15:23:nidefawl.qubes.nbt.Tag$Compound save() -> do
    26:35:void load(nidefawl.qubes.nbt.Tag$Compound) -> do
    38:42:void setOption(int,int) -> do
nidefawl.qubes.entity.EntityPuppy -> IjiJIj1LiJL1IjjI:
    15:15:nidefawl.qubes.entity.EntityType getEntityType() -> do
    20:20:nidefawl.qubes.models.EntityModel getEntityModel() -> do
nidefawl.qubes.entity.EntitySheep -> iJjI1LjIiJJijIiJ:
    15:15:nidefawl.qubes.entity.EntityType getEntityType() -> do
    20:20:nidefawl.qubes.models.EntityModel getEntityModel() -> do
nidefawl.qubes.entity.EntitySkeleton -> L1IjIjIjIjjIL11L:
    18:18:nidefawl.qubes.entity.EntityType getEntityType() -> do
    23:23:nidefawl.qubes.models.EntityModel getEntityModel() -> do
nidefawl.qubes.entity.EntityType -> iJL1iJ1L1LJi1LjI:
    nidefawl.qubes.entity.EntityType[] mapping -> do
    nidefawl.qubes.entity.EntityType PLAYER -> do
    nidefawl.qubes.entity.EntityType PLAYER_SERVER -> if
    nidefawl.qubes.entity.EntityType CAT -> for
    nidefawl.qubes.entity.EntityType CHICKEN -> int
    nidefawl.qubes.entity.EntityType DOG -> new
    nidefawl.qubes.entity.EntityType DUCK -> try
    nidefawl.qubes.entity.EntityType GOAT -> byte
    nidefawl.qubes.entity.EntityType PIG -> case
    nidefawl.qubes.entity.EntityType PONY -> char
    nidefawl.qubes.entity.EntityType PUPPY -> else
    nidefawl.qubes.entity.EntityType SHEEP -> goto
    nidefawl.qubes.entity.EntityType SKELETON -> long
    nidefawl.qubes.entity.EntityType ZOMBIE -> this
    nidefawl.qubes.entity.EntityType ARCHER -> void
    nidefawl.qubes.entity.EntityType WARRIOR -> break
    nidefawl.qubes.entity.EntityType DEMON -> catch
    int id -> do
    java.lang.Class clazz -> do
    double width -> do
    double length -> if
    double height -> for
    33:49:void load() -> do
    70:74:nidefawl.qubes.entity.Entity newById(int) -> do
    79:81:nidefawl.qubes.entity.Entity newInstance() -> do
    86:86:double getWidth() -> do
    89:89:double getHeight() -> if
    92:92:double getLength() -> for
    97:97:boolean isValid(int) -> do
nidefawl.qubes.entity.EntityWarrior -> iJL1L11LIjlljIll:
    19:19:nidefawl.qubes.entity.EntityType getEntityType() -> do
    24:24:nidefawl.qubes.models.EntityModel getEntityModel() -> do
nidefawl.qubes.entity.EntityZombie -> iJ1Lllll1LiJIjll:
    18:18:nidefawl.qubes.entity.EntityType getEntityType() -> do
    23:23:nidefawl.qubes.models.EntityModel getEntityModel() -> do
nidefawl.qubes.entity.Player -> JiIjIjL1jIL1JijI:
    java.lang.String name -> do
    int punchTicks -> case
    nidefawl.qubes.inventory.PlayerInventory inventory -> do
    nidefawl.qubes.inventory.slots.SlotsInventory slotsInventory -> do
    nidefawl.qubes.inventory.slots.SlotsCrafting[] slotsCrafting -> do
    nidefawl.qubes.inventory.PlayerInventoryCrafting[] inventoryCraft -> do
    float armOffsetPitchPrev -> this
    float armOffsetYawPrev -> void
    float armOffsetPitch -> break
    float armOffsetYaw -> catch
    36:36:java.lang.String getName() -> if
    41:59:void tickUpdate() -> do
    61:64:void updateTicks() -> byte
    68:68:nidefawl.qubes.inventory.PlayerInventory getInventory() -> do
    72:84:nidefawl.qubes.inventory.BaseInventory getInv(int) -> do
    88:100:nidefawl.qubes.inventory.slots.Slots getSlots(int) -> do
    104:111:nidefawl.qubes.models.EntityModel getEntityModel() -> do
nidefawl.qubes.entity.PlayerRemote -> jIiJiJiJllllJiL1:
    27:34:void readClientData(nidefawl.qubes.nbt.Tag) -> do
    37:63:void preStep() -> for
    66:66:void step() -> int
    69:69:void postStep() -> if
    73:74:void tickUpdate() -> do
    77:77:nidefawl.qubes.entity.EntityType getEntityType() -> do
nidefawl.qubes.entity.PlayerSelf -> jIIjL1JijIJiL1Ij:
    float forward -> super
    float strafe -> throw
    float maxSpeed -> while
    boolean fly -> int
    boolean jumped -> new
    boolean sneak -> try
    float jump -> double
    float eyeHeight -> class
    nidefawl.qubes.PlayerProfile profile -> do
    nidefawl.qubes.network.client.ClientHandler clientHandler -> do
    nidefawl.qubes.crafting.CraftingManagerClient[] crafting -> do
    float cameraYaw -> const
    float cameraPitch -> final
    float prevCameraPitch -> float
    float prevCameraYaw -> short
    55:55:nidefawl.qubes.crafting.CraftingManagerClient getCrafting(int) -> do
    59:95:void updateInputDirect(nidefawl.qubes.input.KeybindManager) -> do
    99:191:void tickUpdate() -> do
    193:193:boolean isDead() -> int
    196:196:boolean doesFly() -> if
    201:201:float getGravity() -> do
    205:206:void toggleFly() -> case
    209:210:void setFly(boolean) -> do
    214:214:nidefawl.qubes.entity.EntityType getEntityType() -> do
    222:226:void clicked(int,boolean) -> do
    230:232:nidefawl.qubes.item.BaseStack getActiveItem(int) -> do
    235:235:boolean findEdge() -> for
nidefawl.qubes.entity.PlayerServer -> Ij1LIjjIJiiJ1L:
    nidefawl.qubes.network.server.ServerHandlerPlay netHandler -> do
    boolean flying -> int
    int chunkX -> char
    int chunkZ -> else
    boolean chunkTracked -> new
    java.util.Set chunks -> do
    java.util.Set sendChunks -> if
    int lastLight -> goto
    java.util.UUID spawnWorld -> do
    int chunkLoadDistance -> long
    java.util.Set joinedChannels -> for
    nidefawl.qubes.world.BlockPlacer blockPlace -> do
    java.util.HashMap worldPositions -> do
    nidefawl.qubes.server.PlayerEntityTracker entTracker -> do
    nidefawl.qubes.crafting.CraftingManager[] crafting -> do
    77:77:nidefawl.qubes.crafting.CraftingManager getCrafting(int) -> do
    82:173:void tickUpdate() -> do
    176:194:void load(nidefawl.qubes.player.EntityData) -> do
    197:212:nidefawl.qubes.player.EntityData save() -> do
    217:217:int getChunkLoadDistance() -> for
    221:225:void watchingChunk(long,int,int) -> do
    228:235:void unwatchingChunk(long,int,int) -> if
    238:239:void kick(java.lang.String) -> do
    245:249:void setChunkLoadDistance(int) -> do
    254:254:java.util.Collection getJoinedChannels() -> do
    260:260:void preExecuteCommand(nidefawl.qubes.server.commands.Command) -> do
    265:271:void onError(nidefawl.qubes.server.commands.Command,nidefawl.qubes.server.commands.CommandException) -> do
    275:276:void onUnknownCommand(java.lang.String,java.lang.String) -> if
    280:280:nidefawl.qubes.server.GameServer getServer() -> do
    285:286:void sendMessage(java.lang.String) -> if
    290:290:java.lang.String getChatName() -> do
    295:296:void sendMessage(java.lang.String,java.lang.String) -> do
    299:300:void sendPacket(nidefawl.qubes.network.packet.Packet) -> do
    307:309:void move(double,double,double) -> do
    313:319:nidefawl.qubes.nbt.Tag writeClientData(boolean) -> do
    324:325:nidefawl.qubes.item.BaseStack recvItem(nidefawl.qubes.item.BaseStack) -> do
    329:330:void onWorldLeave() -> case
    333:339:void syncInventory() -> char
    342:355:void updatePostTick() -> else
    358:358:nidefawl.qubes.world.WorldServer getWorld() -> do
    362:362:nidefawl.qubes.entity.EntityType getEntityType() -> do
nidefawl.qubes.entity.ai.AIMove -> iJlliJiJIjllIjll:
    nidefawl.qubes.entity.EntityAI entity -> do
    double x -> do
    double y -> if
    double z -> for
    float speed -> do
    boolean needsUpdate -> do
    18:23:void moveTowards(double,double,double,float) -> do
    25:44:void update() -> do
    47:49:float clampAngle(float,float,float) -> do
nidefawl.qubes.entity.ai.AINav -> jIlliJ1LJiL11LIj:
    nidefawl.qubes.path.PathFinder finder -> do
    nidefawl.qubes.vec.Vec3D goalPos -> do
    nidefawl.qubes.vec.Vec3D tmp -> if
    nidefawl.qubes.path.Path path -> do
    int ticks -> do
    float speed -> do
    nidefawl.qubes.entity.EntityAI entity -> do
    26:32:nidefawl.qubes.path.Path tryMoveTo(int,int,int,float) -> do
    35:52:nidefawl.qubes.path.Path setPath(nidefawl.qubes.path.Path) -> do
    55:82:void update() -> do
    84:84:boolean hasPath() -> do
    87:106:void updatePath() -> if
    108:108:boolean canUpdatePath() -> if
    111:111:nidefawl.qubes.path.Path getPath() -> do
nidefawl.qubes.entity.ai.AITask -> iJjIL11L1Lll:
    nidefawl.qubes.entity.EntityAI entity -> do
    14:14:boolean shouldExecute() -> do
    18:18:boolean keepExecuting() -> if
    22:22:void stop() -> do
    25:25:void start() -> if
    28:28:void update() -> for
nidefawl.qubes.entity.ai.AITaskWander -> IjllJijIjI1LJiIj:
    int ticks -> do
    nidefawl.qubes.path.RandomPosGen gen -> do
    nidefawl.qubes.vec.BlockPos pos -> do
    nidefawl.qubes.path.Path p -> do
    19:25:boolean keepExecuting() -> if
    29:34:boolean shouldExecute() -> do
    38:39:void update() -> for
    42:44:void start() -> if
    47:49:void stop() -> do
nidefawl.qubes.entity.ai.TaskEntry -> Ji1LjIIjL1JiIjjI:
    nidefawl.qubes.entity.ai.AITask task -> do
    int priority -> do
    int mask -> if
    boolean running -> do
    boolean enabled -> if
    16:17:void setPriority(int) -> do
    23:23:int getMask() -> do
    29:30:void setRunning(boolean) -> do
    32:32:int getPriority() -> if
    35:35:boolean isEnabled() -> do
    38:39:void setEnabled(boolean) -> if
    42:42:boolean isExecuting() -> if
    46:46:boolean shouldExecute() -> for
    50:50:boolean keepExecuting() -> int
    54:56:void stop() -> do
    59:61:void start() -> if
    64:65:void update() -> for
nidefawl.qubes.entity.ai.TaskManager -> JillIjjIIjllIj1L:
    nidefawl.qubes.entity.EntityAI entity -> do
    java.util.List tasks -> do
    19:22:nidefawl.qubes.entity.ai.TaskEntry add(nidefawl.qubes.entity.ai.AITask) -> do
    26:43:void update() -> do
    46:58:boolean canSchedule(nidefawl.qubes.entity.ai.TaskEntry,java.util.List) -> do
nidefawl.qubes.font.FontRenderer -> JijIiJIjlljIL1ll:
    java.util.HashMap fonts -> do
    nidefawl.qubes.font.TrueTypeFont trueTypeFont -> do
    float size -> for
    int style -> if
    int font -> for
    int maxWidth -> do
    float drawedHeight -> do
    float shadowOffset -> if
    java.lang.String[] fontNames -> do
    18:22:void destroy() -> do
    25:27:void free() -> for
    38:44:nidefawl.qubes.font.FontRenderer get(int,float,int) -> do
    59:59:void init() -> if
    80:89:void setupFont() -> int
    93:93:float drawString(java.lang.String,float,float,int,boolean,float) -> do
    97:115:float drawString(java.lang.String,float,float,int,boolean,float,int) -> do
    123:123:float getStringWidth(java.lang.String) -> do
    131:131:float getCharHeight() -> do
    140:140:float getLineHeight() -> if
    144:144:boolean isValid(char) -> do
    147:147:int centerY(int) -> do
nidefawl.qubes.font.IStringHistory -> L1L1iJjI1L1LIjll:
    void addHistory(java.lang.String) -> do
    int getHistorySize() -> if
    java.lang.String getHistory(int) -> do
    int indexOfHistory(java.lang.String) -> do
    void removeHistory(int) -> do
    void addHistory(int,java.lang.String) -> do
nidefawl.qubes.font.ITextEdit -> jIjIiJIjL1jIJiJi:
    void submit(nidefawl.qubes.font.TextInput) -> submit
    void onEscape(nidefawl.qubes.font.TextInput) -> onEscape
nidefawl.qubes.font.TextInput -> jIjIiJ1LJiL11L1L:
    nidefawl.qubes.font.TrueTypeFont trueType -> do
    java.lang.String editText -> do
    java.lang.String searchPattern -> if
    boolean mouseDown -> do
    boolean rightMouseDown -> if
    boolean did -> for
    int selStart -> do
    int selEnd -> if
    float shiftPX -> do
    int mpos -> for
    int tick -> int
    java.lang.String prevText -> for
    nidefawl.qubes.font.IStringHistory history -> do
    int commandScroll -> new
    boolean focused -> int
    boolean multiline -> new
    nidefawl.qubes.font.FontRenderer font -> do
    int xPos -> try
    int yPos -> byte
    int width -> case
    int height -> char
    nidefawl.qubes.font.ITextEdit itextedit -> do
    boolean use17 -> try
    67:68:void clearPreview() -> do
    71:95:void calculatePreview() -> if
    99:115:void onTextInput(int) -> do
    117:126:void saveHistory() -> for
    128:132:void resetInput() -> int
    134:310:boolean onKeyPress(int,int,int,int) -> do
    314:316:void onSubmit() -> try
    319:329:void makeCursorVisible() -> new
    332:332:boolean hasSelection() -> do
    337:342:java.lang.String getSelection() -> do
    347:361:java.lang.String replaceSelection(java.lang.String) -> do
    365:383:void insertTextAtCursor(java.lang.String) -> do
    393:589:void drawStringWithCursor(double,double,boolean) -> do
    592:596:void checkCursor() -> byte
    599:600:void onEscape() -> case
    603:603:int getLeft() -> do
    606:606:int getTop() -> if
    609:609:int getWidth() -> for
    612:612:int getHeight() -> int
    615:615:int getRight() -> new
    618:618:int getBottom() -> try
    625:626:void setHistory(nidefawl.qubes.font.IStringHistory) -> do
nidefawl.qubes.font.TrueTypeFont -> jI1LL1jIjIjI1Lll:
    int[] colorMap -> do
    int texW -> do
    int correctL -> if
    org.lwjgl.stb.STBTTPackedchar$Buffer chardata -> do
    int font_tex -> new
    org.lwjgl.stb.STBTTAlignedQuad q -> do
    org.lwjgl.stb.STBTTAlignedQuad q2 -> if
    java.nio.FloatBuffer xb -> do
    java.nio.FloatBuffer yb -> if
    java.nio.FloatBuffer xb2 -> for
    java.nio.FloatBuffer yb2 -> int
    int rangeStart -> for
    int numChars -> int
    org.lwjgl.stb.STBTTFontinfo info -> do
    float ascent -> do
    float descent -> if
    float lineGap -> for
    float drawedHeight -> int
    float spaceWidth -> new
    float lineOffset -> try
    float size -> byte
    52:55:int getControlChar(int) -> do
    148:153:float getCharWidth(int) -> do
    158:187:float getWidthAtLine(java.lang.String) -> do
    190:214:float getWidth(java.lang.String) -> if
    217:219:void start(float,float) -> do
    221:221:float getXPos() -> do
    227:229:void readQuad(int) -> do
    231:235:void renderQuad(nidefawl.qubes.gl.Tess,float,float) -> do
    238:263:int getCharPositionFromXCoord(java.lang.String,double,float) -> do
    272:272:boolean isValid() -> do
    277:286:void release() -> do
    290:290:float getLineHeight() -> if
    295:295:int getTexture() -> do
    300:300:float getCharHeight() -> for
    306:425:float drawString(nidefawl.qubes.gl.Tess,float,float,java.lang.String,int,boolean,float,int,int,float) -> do
    429:432:int getIndex(int) -> if
    447:447:float getLastDrawHeight() -> int
    453:453:boolean hasCharacter(char) -> do
nidefawl.qubes.gl.AbstractTesselatorState -> iJIjjIjIiJiJ1L:
    int vertexcount -> do
    boolean useColorPtr -> do
    boolean useTexturePtr -> if
    boolean useNormalPtr -> for
    boolean useUINTPtr -> int
    19:24:void copyTo(nidefawl.qubes.gl.AbstractTesselatorState) -> do
    nidefawl.qubes.gl.GLVBO getVBO() -> do
    29:29:int getIdx(int) -> do
    33:42:int getVSize() -> do
    80:83:void drawVBO(int) -> do
    86:87:void drawQuads() -> do
    90:94:void bindAndDraw(int) -> if
    96:105:int getSetting() -> if
nidefawl.qubes.gl.BufferedMatrix -> L1JiJijIllllL11L:
    nidefawl.qubes.vec.Matrix4f inv -> do
    boolean needInv -> do
    java.nio.FloatBuffer cur -> do
    java.nio.FloatBuffer curInv -> if
    26:34:void update() -> do
    37:38:java.nio.FloatBuffer get() -> do
    42:46:java.nio.FloatBuffer getInv() -> if
    49:52:nidefawl.qubes.vec.Matrix4f getInvMat4() -> do
    56:61:void createInv() -> int
    67:71:void free() -> if
nidefawl.qubes.gl.Camera -> iJlljIIjIjJillIj:
    float pitchAngle -> do
    float bearingAngle -> if
    nidefawl.qubes.vec.Vector3f position -> do
    nidefawl.qubes.vec.Vector3f prevposition -> if
    nidefawl.qubes.vec.Matrix4f viewMatrix -> do
    nidefawl.qubes.vec.Matrix4f thirdPersonMat -> if
    nidefawl.qubes.vec.Vector3f thirdPersonOffset -> for
    boolean changed -> do
    float xshake -> for
    float yshake -> int
    float xshakeRot -> new
    float zshakeRot -> try
    float yshakeRot -> byte
    39:40:void setPosition(nidefawl.qubes.vec.Vector3f) -> do
    44:48:void setPosition(float,float,float) -> do
    53:57:void setPosition(nidefawl.qubes.vec.Vec3D) -> do
    60:77:void setOrientation(float,float,boolean,float) -> do
    81:85:void addCameraShake(nidefawl.qubes.vec.Matrix4f) -> do
    91:91:nidefawl.qubes.vec.Vector3f getPosition() -> do
    98:98:nidefawl.qubes.vec.Vector3f getPrevPosition() -> if
    107:107:nidefawl.qubes.vec.Matrix4f getViewMatrix() -> do
    114:114:nidefawl.qubes.vec.Vector3f getCameraOffset() -> for
    118:125:void calcViewShake(float,float,float,float) -> do
nidefawl.qubes.gl.CubeMapCamera -> L1IjjIJiJillJiiJ:
    nidefawl.qubes.gl.BufferedMatrix projection -> do
    nidefawl.qubes.gl.BufferedMatrix view -> if
    nidefawl.qubes.gl.BufferedMatrix viewprojection -> for
    nidefawl.qubes.gl.BufferedMatrix modelviewprojection -> int
    nidefawl.qubes.vec.Matrix4f modelviewprojectionInv -> do
    nidefawl.qubes.gl.BufferedMatrix modelview -> new
    nidefawl.qubes.gl.BufferedMatrix normalMatrix -> try
    nidefawl.qubes.gl.BufferedMatrix identity -> byte
    20:32:void init() -> do
    35:96:void setupScene(int,nidefawl.qubes.vec.Vector3f) -> do
nidefawl.qubes.gl.Engine -> lljI1LIjIjllL1L1:
    nidefawl.qubes.vec.BlockPos GLOBAL_OFFSET -> do
    nidefawl.qubes.vec.BlockPos LAST_REPOS -> if
    java.util.Map bufferBindingPoints -> do
    int NEXT_BUFFER_BINDING_POINT -> do
    boolean initRenderers -> do
    java.nio.IntBuffer viewportBuf -> do
    java.nio.FloatBuffer position -> do
    java.nio.IntBuffer allocBuffer -> if
    nidefawl.qubes.gl.BufferedMatrix projection -> do
    nidefawl.qubes.gl.BufferedMatrix _projection -> if
    nidefawl.qubes.gl.BufferedMatrix view -> for
    nidefawl.qubes.gl.BufferedMatrix viewInvYZ -> int
    nidefawl.qubes.gl.BufferedMatrix viewprojection -> new
    nidefawl.qubes.gl.BufferedMatrix modelviewprojection -> try
    nidefawl.qubes.vec.Matrix4f modelviewprojectionInv -> if
    nidefawl.qubes.gl.BufferedMatrix modelview -> byte
    nidefawl.qubes.gl.BufferedMatrix normalMatrix -> case
    nidefawl.qubes.gl.BufferedMatrix orthoP -> char
    nidefawl.qubes.gl.BufferedMatrix orthoMV -> else
    nidefawl.qubes.gl.BufferedMatrix orthoMVP -> goto
    nidefawl.qubes.gl.BufferedMatrix ortho3DP -> long
    nidefawl.qubes.gl.BufferedMatrix ortho3DMV -> this
    nidefawl.qubes.gl.BufferedMatrix tempMatrix -> void
    nidefawl.qubes.gl.BufferedMatrix tempMatrix2 -> break
    nidefawl.qubes.gl.BufferedMatrix identity -> catch
    nidefawl.qubes.vec.Vector3f pxOffset -> do
    nidefawl.qubes.vec.TransformStack pxStack -> do
    nidefawl.qubes.vec.Matrix4f invertYZ -> do
    nidefawl.qubes.gl.FrameBuffer fbScene -> do
    nidefawl.qubes.gl.FrameBuffer fbDbg -> if
    float znear -> do
    float zfar -> if
    nidefawl.qubes.gl.TesselatorState fullscreenquad -> do
    nidefawl.qubes.gl.TesselatorState quad -> if
    nidefawl.qubes.vec.Frustum camFrustum -> do
    nidefawl.qubes.vec.Vector3f up -> if
    nidefawl.qubes.vec.Vector4f back -> do
    nidefawl.qubes.vec.Vector3f lightPosition -> for
    nidefawl.qubes.vec.Vector3f lightDirection -> int
    float sunAngle -> for
    nidefawl.qubes.gl.Camera camera -> do
    nidefawl.qubes.gl.ShadowProjector shadowProj -> do
    nidefawl.qubes.render.WorldRenderer worldRenderer -> do
    nidefawl.qubes.render.SkyRenderer skyRenderer -> do
    nidefawl.qubes.render.ShadowRenderer shadowRenderer -> do
    nidefawl.qubes.render.BlurRenderer blurRenderer -> do
    nidefawl.qubes.render.FinalRenderer outRenderer -> do
    nidefawl.qubes.render.region.RegionRenderer regionRenderer -> do
    nidefawl.qubes.particle.CubeParticleRenderer particleRenderer -> do
    nidefawl.qubes.render.LightCompute lightCompute -> do
    nidefawl.qubes.meshing.MeshThread regionRenderThread -> do
    nidefawl.qubes.models.render.QModelBatchedRender renderBatched -> do
    float aspectRatio -> int
    int fieldOfView -> if
    boolean renderWireFrame -> if
    boolean isDepthMask -> char
    boolean isScissors -> for
    boolean updateRenderOffset -> int
    nidefawl.qubes.render.gui.SingleBlockRenderer blockRender -> do
    nidefawl.qubes.render.gui.SingleBlockDraw blockDraw -> do
    nidefawl.qubes.item.ItemRenderer itemRender -> do
    nidefawl.qubes.gl.GLVAO active -> do
    int[] viewport -> do
    nidefawl.qubes.shader.ShaderBuffer debugOutput -> do
    nidefawl.qubes.shader.ShaderBuffer ssbo_lights -> if
    nidefawl.qubes.shader.ShaderBuffer ssbo_model_modelmat -> for
    nidefawl.qubes.shader.ShaderBuffer ssbo_model_normalmat -> int
    nidefawl.qubes.shader.ShaderBuffer ssbo_model_bonemat -> new
    nidefawl.qubes.world.SunLightModel sunlightmodel -> do
    nidefawl.qubes.gl.ReallocIntBuffer[] buffers -> do
    boolean userSettingUseBindless -> new
    boolean isVAOSupportingBindless -> try
    boolean clientStateBindlessElement -> byte
    boolean clientStateBindlessAttrib -> case
    nidefawl.qubes.vec.Vector3f vOrigin -> new
    nidefawl.qubes.vec.Vector3f vDir -> try
    nidefawl.qubes.vec.Vector3f vDirTmp -> byte
    nidefawl.qubes.vec.Vector3f vTarget -> case
    nidefawl.qubes.vec.Vector3f t -> char
    137:138:void bindVAO(nidefawl.qubes.gl.GLVAO) -> do
    140:151:void bindVAO(nidefawl.qubes.gl.GLVAO,boolean) -> do
    153:161:void enableBindless() -> do
    163:171:void disableBindless() -> if
    174:186:void bindIndexBuffer(nidefawl.qubes.gl.GLVBO) -> do
    189:206:void bindBuffer(nidefawl.qubes.gl.GLVBO) -> if
    214:219:boolean checkGLError(java.lang.String) -> do
    223:268:void baseInit() -> for
    271:298:void init() -> int
    301:381:void resize(int,int) -> do
    383:397:void updateOrthoMatrix(float,float) -> do
    400:401:void drawFullscreenQuad() -> new
    404:405:void drawQuad() -> try
    409:409:nidefawl.qubes.gl.BufferedMatrix getMatSceneP_internal() -> do
    412:412:nidefawl.qubes.gl.BufferedMatrix getMatSceneP() -> if
    415:415:nidefawl.qubes.gl.BufferedMatrix getMatSceneV() -> for
    418:418:nidefawl.qubes.gl.BufferedMatrix getMatSceneV_YZ_Inv() -> int
    421:421:nidefawl.qubes.gl.BufferedMatrix getMatSceneVP() -> new
    425:425:nidefawl.qubes.gl.BufferedMatrix getMatSceneMV() -> try
    428:428:nidefawl.qubes.gl.BufferedMatrix getMatSceneMVP() -> byte
    432:432:nidefawl.qubes.gl.BufferedMatrix getMatSceneNormal() -> case
    442:442:nidefawl.qubes.gl.BufferedMatrix getMatOrthoMVP() -> char
    445:445:nidefawl.qubes.gl.BufferedMatrix getMatOrtho3DMV() -> else
    449:449:nidefawl.qubes.gl.BufferedMatrix getMatOrtho3DP() -> goto
    453:453:nidefawl.qubes.gl.BufferedMatrix getTempMatrix() -> long
    457:457:nidefawl.qubes.gl.BufferedMatrix getTempMatrix2() -> this
    460:460:nidefawl.qubes.gl.BufferedMatrix getIdentityMatrix() -> void
    464:465:void updateCamera() -> byte
    467:470:void updateCamera(nidefawl.qubes.gl.Camera) -> do
    473:501:void updateCamera(nidefawl.qubes.vec.Matrix4f,nidefawl.qubes.vec.Vector3f) -> do
    505:527:boolean updateGlobalRenderOffset(float,float,float) -> do
    531:531:nidefawl.qubes.gl.FrameBuffer getSceneFB() -> do
    537:548:void flushRenderTasks() -> case
    568:571:void setLightPosition(nidefawl.qubes.vec.Vector3f) -> do
    574:577:void updateShadowProjections(float) -> do
    580:585:void stop() -> char
    596:629:void updateMouseOverView(float,float,boolean) -> do
    632:661:void reloadRenderer(boolean) -> do
    664:665:void setSceneFB(nidefawl.qubes.gl.FrameBuffer) -> do
    668:677:java.nio.IntBuffer glGenBuffers(int) -> do
    681:685:void deleteBuffers(int[]) -> do
    689:691:void toggleWireFrame() -> else
    722:727:int getBindingPoint(java.lang.String) -> do
    731:733:void enableDepthMask(boolean) -> if
    736:738:void enableScissors() -> goto
    740:742:void disableScissors() -> long
    744:749:void setOverrideScissorTest(boolean) -> for
    751:756:void restoreScissorTest() -> this
    758:759:void restoreDepthMask() -> void
    762:763:void setOverrideDepthMask(boolean) -> int
    766:773:void setViewport(int,int,int,int) -> do
    776:777:void setDefaultViewport() -> break
    780:780:nidefawl.qubes.world.SunLightModel getSunLightModel() -> do
    784:795:nidefawl.qubes.gl.ReallocIntBuffer getIntBuffer() -> do
nidefawl.qubes.gl.Engine$1 -> L1jIL1iJIjJi1L1L:
    293:295:void onChange(nidefawl.qubes.vec.Vector3f) -> do
nidefawl.qubes.gl.FrameBuffer -> lliJiJL1L1lliJll:
    int FRAMEBUFFERS -> do
    int renderWidth -> if
    int renderHeight -> for
    int fb -> int
    java.nio.IntBuffer drawBufAtt -> do
    boolean hasDepth -> do
    boolean isShadowDepthBuffer -> if
    int numColorTextures -> new
    int depthTexture -> try
    int[] colorAttTextures -> do
    int[] colorAttFormats -> if
    int[] colorAttMinFilters -> for
    int[] colorAttMagFilters -> int
    boolean[] clearBuffer -> do
    float[][] clearColor -> do
    int colorTexExtFmt -> byte
    int colorTexExtType -> case
    int textureType -> char
    43:44:void setColorTexExtFmt(int) -> do
    49:50:void setColorTexExtType(int) -> if
    61:62:void setTextureType(int) -> for
    64:74:nidefawl.qubes.gl.FrameBuffer make(nidefawl.qubes.util.IResourceManager,int,int,int,boolean) -> do
    77:77:nidefawl.qubes.gl.FrameBuffer make(nidefawl.qubes.util.IResourceManager,int,int,int) -> do
    81:88:void setColorAtt(int,int) -> do
    92:98:void setFilter(int,int,int) -> do
    100:109:void setClearColor(int,float,float,float,float) -> do
    112:113:void setHasDepthAttachment() -> do
    116:118:void setShadowBuffer() -> if
    121:180:void setup(nidefawl.qubes.util.IResourceManager) -> do
    182:183:void bindCubeMapFace(int) -> int
    186:188:void unbindFramebuffer() -> for
    190:192:void unbindReadFramebuffer() -> int
    195:197:void bind() -> new
    199:201:void bindRead() -> try
    204:226:void setupTexture(int,int,int,int) -> do
    229:259:void createDepthTextureAttachment(int) -> new
    262:265:int getTexture(int) -> do
    269:272:int getDepthTex() -> do
    277:280:void clearDepth() -> byte
    284:287:void clearColor() -> case
    291:296:void clearColorBlack() -> char
    300:302:void setDrawAll() -> else
    305:321:void clearFrameBuffer() -> goto
    324:343:void release() -> long
    346:346:int getWidth() -> if
    350:350:int getHeight() -> for
    356:356:int getFB() -> int
    360:360:nidefawl.qubes.util.EResourceType getType() -> do
nidefawl.qubes.gl.GL -> llJiL1IjjIiJJi1L:
    boolean directStateAccess -> do
    24:36:void bindTexture(int,int,int) -> do
    39:57:java.util.List validateCaps() -> do
    63:64:void glGetObjectParameterivARB(int,int,java.nio.IntBuffer) -> do
    66:67:void glUniformMatrix4fvARB(int,boolean,java.nio.FloatBuffer) -> do
    79:79:org.lwjgl.opengl.GLCapabilities getCaps() -> do
    82:105:void glTexStorage3D(int,int,int,int,int,int) -> do
    108:117:void glTexStorage2D(int,int,int,int,int) -> do
    120:129:int genStorage(int,int,int,int,int) -> do
    133:136:void deleteTexture(int) -> do
    138:138:boolean isBindlessSuppported() -> do
nidefawl.qubes.gl.GLAttrBuffer -> IjiJL1lliJlliJjI:
    int vbo -> do
    23:23:int getGLArrayBuffer() -> do
    28:39:void upload(nidefawl.qubes.gl.VertexBuffer) -> do
nidefawl.qubes.gl.GLDebugTextures -> IjiJjIiJIjJiL1L1:
    int format -> do
    java.lang.String name -> do
    java.lang.String pass -> if
    int h -> if
    int w -> for
    int tex -> int
    int d -> new
    int flags -> try
    boolean valid -> do
    boolean show -> if
    java.util.HashMap textures -> do
    java.util.HashMap alltextures -> if
    nidefawl.qubes.gl.GLDebugTextures selTex -> do
    boolean triggered -> for
    45:46:void readTexture(java.lang.String,java.lang.String,int) -> do
    48:79:int readTexture(java.lang.String,java.lang.String,int,int) -> do
    83:85:void release() -> int
    87:93:void onResize() -> do
    96:201:void drawAll(int,int) -> do
    204:221:void bindShader() -> if
    229:229:nidefawl.qubes.gl.GLDebugTextures getSelected() -> do
    232:232:int get() -> do
    237:244:void drawFullScreen(nidefawl.qubes.gl.GLDebugTextures) -> do
    246:246:boolean isShow() -> do
    249:250:void setShow(boolean) -> do
    253:272:void toggleDebugTex() -> for
nidefawl.qubes.gl.GLTriBuffer -> jIllJiIjIj1LL1Ij:
    nidefawl.qubes.gl.GLVBO vbo -> do
    nidefawl.qubes.gl.GLVBO vboIndices -> if
    int triCount -> do
    int vertexCount -> if
    int idxCount -> for
    30:44:int upload(nidefawl.qubes.gl.VertexBuffer) -> do
    51:52:void drawElements() -> do
    54:54:int getTriCount() -> do
    57:64:void draw() -> if
    70:76:void release() -> for
    81:81:int getGLArrayBuffer() -> if
    84:84:int getGLIndexBuffer() -> for
    92:92:nidefawl.qubes.gl.GLVBO getVbo() -> do
    95:95:nidefawl.qubes.gl.GLVBO getVboIndices() -> if
    98:98:int getIdxCount() -> int
nidefawl.qubes.gl.GLVAO -> Ji1LiJllllIjL1:
    int NEXT_VAO_ID -> int
    nidefawl.qubes.gl.GLVAO[] vaoList -> if
    int vaoId -> do
    int vertStride -> if
    java.util.ArrayList list -> do
    boolean useBindless -> do
    int vaoIdBindless -> for
    nidefawl.qubes.gl.GLVAO vaoBlocksShadow -> do
    nidefawl.qubes.gl.GLVAO vaoBlocksShadowTextured -> if
    nidefawl.qubes.gl.GLVAO vaoModel -> for
    nidefawl.qubes.gl.GLVAO vaoStaticModel -> int
    nidefawl.qubes.gl.GLVAO vaoModelGPUSkinned -> new
    nidefawl.qubes.gl.GLVAO vaoBlocks -> try
    nidefawl.qubes.gl.GLVAO vaoBlocksBindless -> byte
    nidefawl.qubes.gl.GLVAO[] vaoTesselator -> do
    27:33:void initVAOs() -> do
    60:61:void vertexAttribFormat(int,int,int,boolean,int) -> do
    63:64:void vertexAttribIFormat(int,int,int,int) -> do
    67:67:void init() -> if
    69:106:void setup() -> for
    242:242:boolean isBindless() -> do
nidefawl.qubes.gl.GLVAO$1 -> lljIiJjIL1jIjIll:
    111:112:void init() -> if
nidefawl.qubes.gl.GLVAO$2 -> L1Ji1LJillll1LIj:
    118:125:void init() -> if
nidefawl.qubes.gl.GLVAO$3 -> iJL1llIjJi1LiJIj:
    132:141:void init() -> if
nidefawl.qubes.gl.GLVAO$4 -> L11L1LJiJi1LL11L:
    146:151:void init() -> if
nidefawl.qubes.gl.GLVAO$5 -> lljIIjjIllL1iJll:
    157:172:void init() -> if
nidefawl.qubes.gl.GLVAO$6 -> jIL1Ji1LlliJIjll:
    178:189:void init() -> if
nidefawl.qubes.gl.GLVAO$7 -> IjIjIjIj1LjIJiIj:
    196:209:void init() -> if
nidefawl.qubes.gl.GLVAO$8 -> L1iJJillJiIjjIIj:
    boolean val$useNormalPtr -> do
    boolean val$useTexturePtr -> if
    boolean val$useColorPtr -> for
    boolean val$useUINTPtr -> int
    222:236:void init() -> if
nidefawl.qubes.gl.GLVAO$VertexAttrib -> iJ1L1LIjiJ:
    int attribindex -> do
    int size -> if
    int type -> for
    boolean normalized -> do
    int intLen -> int
    boolean isFloat -> if
    long offset -> do
    34:34:boolean access$000(nidefawl.qubes.gl.GLVAO$VertexAttrib) -> do
nidefawl.qubes.gl.GLVBO -> jIIjIjjI1LJiL1L1:
    int ALLOC_VBOS -> do
    int ALLOC_VBOS_TERRAIN -> if
    int vboId -> for
    long vboSize -> do
    int usage -> int
    long addr -> if
    long size -> for
    boolean canUseBindless -> do
    boolean isTerrain -> if
    28:29:void setTerrain(boolean) -> do
    35:42:int getVboId() -> do
    51:52:void upload(int,java.nio.ByteBuffer,long) -> do
    54:89:void upload(int,java.nio.ByteBuffer,long,boolean) -> do
    91:102:void release() -> do
nidefawl.qubes.gl.GPUVendor -> jIjIIjiJjI1LJiiJ:
    nidefawl.qubes.gl.GPUVendor NVIDIA -> do
    nidefawl.qubes.gl.GPUVendor AMD -> if
    nidefawl.qubes.gl.GPUVendor INTEL -> for
    nidefawl.qubes.gl.GPUVendor OTHER -> int
    nidefawl.qubes.gl.GPUVendor[] $VALUES -> do
    10:10:nidefawl.qubes.gl.GPUVendor[] values() -> values
    10:10:nidefawl.qubes.gl.GPUVendor valueOf(java.lang.String) -> valueOf
    18:36:nidefawl.qubes.gl.GPUVendor parse(java.lang.String) -> do
nidefawl.qubes.gl.Memory -> IjJiIjjIiJIjiJ1L:
    int mallocd -> do
    java.util.HashSet ptrs -> do
    25:30:java.nio.FloatBuffer createFloatBuffer(int) -> do
    34:39:java.nio.IntBuffer createIntBuffer(int) -> do
    52:57:java.nio.DoubleBuffer createDoubleBuffer(int) -> do
    61:61:java.nio.FloatBuffer createFloatBufferAligned(int,int) -> do
    70:80:java.nio.ByteBuffer createByteBufferAligned(int,int) -> do
    90:94:java.nio.ByteBuffer reallocByteBufferAligned(java.nio.ByteBuffer,int,int) -> do
    109:111:java.nio.IntBuffer createIntBufferGC(int) -> if
    118:126:void free(java.nio.FloatBuffer) -> do
    132:140:void free(java.nio.ByteBuffer) -> do
    143:144:java.nio.IntBuffer createIntBufferHeap(int) -> for
    152:153:java.nio.FloatBuffer createFloatBufferHeap(int) -> if
nidefawl.qubes.gl.MultiDrawIndirectBuffer -> IjJi1LiJIjL1IjJi:
    java.nio.ByteBuffer buffers -> do
    java.nio.IntBuffer intbuffers -> do
    boolean inUse -> do
    int drawCount -> do
    int stride -> if
    nidefawl.qubes.gl.GLVAO vao -> do
    int[] emptyData -> do
    54:66:void reallocBuffer(int) -> do
    88:92:void put(int[],int,int) -> do
    124:155:void add(nidefawl.qubes.gl.GLVBO,nidefawl.qubes.gl.GLVBO,int) -> do
    157:161:void putLong(long) -> do
    164:169:void reset(nidefawl.qubes.gl.GLVAO) -> do
    171:171:int getDrawCount() -> do
    180:198:void render() -> do
nidefawl.qubes.gl.ReallocIntBuffer -> lllllliJIjIjL1ll:
    java.nio.ByteBuffer buffers -> do
    java.nio.IntBuffer intbuffers -> do
    boolean inUse -> do
    19:20:void setInUse(boolean) -> do
    22:22:boolean isInUse() -> do
    41:53:void reallocBuffer(int) -> do
    55:60:void release() -> do
    75:79:void put(int[],int,int) -> do
    85:85:java.nio.ByteBuffer getByteBuf() -> do
nidefawl.qubes.gl.ShadowProjector -> L1L11LiJIjjIL1Ji:
    nidefawl.qubes.vec.Matrix4f[] shadowSplitProj -> do
    nidefawl.qubes.gl.BufferedMatrix[] shadowSplitMVP -> do
    float[] shadowSplitDepth -> do
    nidefawl.qubes.vec.Frustum[] shadowCamFrustum -> do
    nidefawl.qubes.vec.Matrix4f newMat -> do
    nidefawl.qubes.vec.Matrix4f newMatInv -> if
    nidefawl.qubes.vec.Matrix4f matLookAt -> for
    nidefawl.qubes.vec.Matrix4f matLookAtInv -> int
    nidefawl.qubes.vec.Matrix4f matOrtho -> new
    nidefawl.qubes.vec.Vector3f frustumCenter -> do
    nidefawl.qubes.vec.Vector3f tmp -> if
    nidefawl.qubes.vec.Vector3f eye -> for
    nidefawl.qubes.vec.Vector3f[] furstumCornersIn -> do
    nidefawl.qubes.vec.Vector3f[] furstumCornersOut -> if
    float[] splits -> if
    49:126:void calcShadow(int,nidefawl.qubes.vec.Matrix4f,nidefawl.qubes.vec.Vector3f,float) -> do
    129:161:void setSplits(float[],float,float) -> do
    164:167:void calcSplits(nidefawl.qubes.vec.Matrix4f,nidefawl.qubes.vec.Vector3f,float) -> do
    169:169:int checkFrustum(int,nidefawl.qubes.vec.AABBInt,float) -> do
    178:178:java.nio.FloatBuffer getSMVP(int) -> do
nidefawl.qubes.gl.Tess -> iJllIjJiJiIjllll:
    java.lang.String[] attributes -> do
    boolean littleEndian -> new
    nidefawl.qubes.gl.Tess instance -> do
    nidefawl.qubes.gl.Tess tessFont -> if
    int[] rawBuffer -> do
    int rgba -> if
    int uintLSB -> for
    int uintMSB -> int
    float u -> do
    float v -> if
    int normal -> new
    float offsetX -> for
    float offsetY -> int
    float offsetZ -> new
    boolean isSoftTesselator -> try
    nidefawl.qubes.gl.ReallocIntBuffer bufInt -> do
    int vboIdx -> try
    nidefawl.qubes.gl.GLVBO[] vbo -> do
    57:57:boolean isSoftTesselator() -> do
    61:68:void add(float,float,float,float,float) -> do
    80:81:void add(float,float) -> do
    84:92:void setNormals(float,float,float) -> do
    95:125:void add(float,float,float) -> if
    129:133:void resizeBuffer() -> if
    137:152:void setColorRGBAF(float,float,float,float) -> do
    155:160:void setUIntLSB(int) -> for
    169:178:void setColor(int,int) -> do
    181:182:void setColorF(int,float) -> do
    185:206:void draw(int,nidefawl.qubes.gl.AbstractTesselatorState) -> do
    209:209:nidefawl.qubes.gl.GLVBO getVBO() -> do
    213:214:void draw(int) -> int
    218:219:void drawQuads() -> do
    224:231:void resetState() -> for
    234:238:void destroy() -> int
    241:244:void setOffset(float,float,float) -> for
    247:249:void destroyAll() -> new
nidefawl.qubes.gl.TesselatorState -> llllIjllL1llJiIj:
    nidefawl.qubes.gl.GLVBO vbo -> do
    13:13:nidefawl.qubes.gl.GLVBO getVBO() -> do
nidefawl.qubes.gl.VertexBuffer -> JijIL1jIL1lllliJ:
    int[] buffer -> do
    int[] triIdxBuffer -> if
    int triIdxPos -> do
    int pos -> if
    int left -> for
    int left2 -> int
    int vertexCount -> new
    39:44:void reset() -> do
    51:57:int realloc(int) -> do
    64:70:int reallocTriIdxBuffer(int) -> if
    76:83:void put(int) -> do
    85:93:void putIdx(int) -> if
    98:99:void increaseVert() -> if
    104:104:int getVertexCount() -> do
    110:110:int getPos() -> if
    116:116:int getTriIdxPos() -> for
    122:122:int[] get() -> do
    128:128:int[] getTriIdxBuffer() -> if
    136:137:int storeVertexData(nidefawl.qubes.gl.ReallocIntBuffer) -> do
    144:145:int storeIndexData(nidefawl.qubes.gl.ReallocIntBuffer) -> if
    164:169:void putTriVertIndex(int[],int,int) -> do
nidefawl.qubes.gui.AbstractUI -> JiL1jIIjllL1iJ:
    nidefawl.qubes.gui.AbstractUI parent -> parent
    int id -> id
    int width -> width
    int height -> height
    int posX -> posX
    int posY -> posY
    int[] overridebounds -> overridebounds
    boolean hovered -> hovered
    boolean enabled -> enabled
    boolean draw -> draw
    boolean focused -> focused
    int zIndex -> zIndex
    nidefawl.qubes.gui.AbstractUI selectedButton -> selectedButton
    int color -> color
    float alpha -> alpha
    int color2 -> color2
    float alpha2 -> alpha2
    int color3 -> color3
    float alpha3 -> alpha3
    int color4 -> color4
    int color5 -> color5
    int color6 -> color6
    float alpha4 -> alpha4
    float boxSigma -> boxSigma
    float shadowSigma -> shadowSigma
    float round -> round
    int extendx -> extendx
    int extendy -> extendy
    31:35:void saveBounds() -> saveBounds
    37:41:void restoreBounds() -> restoreBounds
    43:45:void setSize(int,int) -> setSize
    47:49:void setPos(int,int) -> setPos
    52:52:int right() -> right
    56:56:int bottom() -> bottom
    59:59:boolean hasElement(nidefawl.qubes.gui.AbstractUI) -> hasElement
    62:62:void add(nidefawl.qubes.gui.AbstractUI) -> add
    65:65:void update() -> update
    68:68:boolean mouseOver(double,double) -> mouseOver
    72:72:boolean handleMouseUp(nidefawl.qubes.gui.Gui,int) -> handleMouseUp
    75:75:boolean handleMouseDown(nidefawl.qubes.gui.Gui,int) -> handleMouseDown
    78:78:boolean onKeyPress(int,int,int,int) -> onKeyPress
    81:81:boolean onTextInput(int) -> onTextInput
    85:86:void setFocus() -> setFocus
    105:110:void resetShape() -> resetShape
    113:140:void renderRoundedBoxShadow(float,float,float,float,float,int,float,boolean) -> renderRoundedBoxShadow
    142:167:void renderRoundedBoxShadowInverse(float,float,float,float,float,int,float,boolean) -> renderRoundedBoxShadowInverse
    169:184:void renderOutlinedBox() -> renderOutlinedBox
    186:193:void renderBox() -> renderBox
    196:196:void renderBox(boolean,boolean,int,int,int) -> renderBox
    198:218:void renderBox(boolean,boolean,int,int) -> renderBox
    220:240:void renderBox2(boolean,boolean,int,int) -> renderBox2
    242:242:int getWindowPosX() -> getWindowPosX
    245:245:int getWindowPosY() -> getWindowPosY
    249:262:void renderSlotBackground(float,float,float,float,float,int,float,boolean,float) -> renderSlotBackground
    266:316:void renderSlots(nidefawl.qubes.inventory.slots.Slots,float,double,double,float,float) -> renderSlots
    318:324:void renderSlotOverlay(nidefawl.qubes.inventory.slots.Slot,float,float) -> renderSlotOverlay
    327:329:void setDisableDraw(boolean) -> setDisableDraw
nidefawl.qubes.gui.Gui -> llL1L1jIll1LjIiJ:
    java.util.ArrayList buttons -> buttons
    java.util.ArrayList prebackground -> prebackground
    boolean firstOpen -> firstOpen
    nidefawl.qubes.gui.AbstractUI popup -> popup
    int slotW -> slotW
    int slotBDist -> slotBDist
    int FONT_SIZE_WINDOW_TITLE -> FONT_SIZE_WINDOW_TITLE
    int FONT_SIZE_BUTTON -> FONT_SIZE_BUTTON
    35:35:nidefawl.qubes.gui.AbstractUI getPopup() -> getPopup
    38:38:boolean hasElement(nidefawl.qubes.gui.AbstractUI) -> hasElement
    41:44:void add(nidefawl.qubes.gui.AbstractUI) -> add
    46:50:void addBackground(nidefawl.qubes.gui.AbstractUI) -> addBackground
    52:52:nidefawl.qubes.gui.AbstractUI getElement(int) -> getElement
    55:57:void clearElements() -> clearElements
    59:70:void sortElements() -> sortElements
    73:77:void remove(nidefawl.qubes.gui.AbstractUI) -> remove
    80:88:void setPopup(nidefawl.qubes.gui.AbstractUI) -> setPopup
    91:98:void renderBackgroundElements(float,double,double) -> renderBackgroundElements
    100:131:void renderButtons(float,double,double) -> renderButtons
    134:138:void update() -> update
    141:141:void onClose() -> onClose
    144:183:boolean onMouseClick(int,int) -> onMouseClick
    187:187:double mouseOffsetY() -> mouseOffsetY
    191:191:double mouseOffsetX() -> mouseOffsetX
    195:195:boolean onGuiClicked(nidefawl.qubes.gui.AbstractUI) -> onGuiClicked
    199:216:boolean onKeyPress(int,int,int,int) -> onKeyPress
    220:221:void close() -> close
    224:232:boolean onTextInput(int) -> onTextInput
    236:236:boolean requiresTextInput() -> requiresTextInput
    239:251:void renderBackground(float,double,double,boolean,float) -> renderBackground
    254:254:void updateBounds() -> updateBounds
    257:257:boolean canResize() -> canResize
    261:261:boolean onWheelScroll(double,double) -> onWheelScroll
nidefawl.qubes.gui.Gui$1 -> jIIjIjjIjIIjL1ll:
    nidefawl.qubes.gui.Gui this$0 -> do
    62:65:int compare(nidefawl.qubes.gui.AbstractUI,nidefawl.qubes.gui.AbstractUI) -> do
    59:59:int compare(java.lang.Object,java.lang.Object) -> compare
nidefawl.qubes.gui.GuiAction -> jIjIL1IjL1:
    int mouseAction -> do
    17:17:boolean isAct(int) -> do
nidefawl.qubes.gui.GuiBG -> JiiJiJ1LjIiJ1LiJ:
    9:13:void render(float,double,double) -> render
    17:17:void initGui(boolean) -> initGui
nidefawl.qubes.gui.GuiCached -> L1L1lliJjIIjiJIj:
    nidefawl.qubes.gui.Gui gui -> do
    nidefawl.qubes.gl.FrameBuffer fbDbg -> do
    boolean refresh -> do
    24:25:void setPos(int,int) -> setPos
    29:37:void setSize(int,int) -> setSize
    40:55:void render(float,double,double) -> render
    57:59:void refresh() -> do
    62:62:void initGui(boolean) -> initGui
nidefawl.qubes.gui.GuiChatInput -> jIllllllL1L1jI1L:
    nidefawl.qubes.font.FontRenderer font -> do
    nidefawl.qubes.gui.controls.TextField field -> do
    nidefawl.qubes.gui.GuiOverlayChat overlay -> do
    int mouseResize -> do
    40:43:void setSize(int,int) -> setSize
    47:64:void initGui(boolean) -> initGui
    68:68:boolean onGuiClicked(nidefawl.qubes.gui.AbstractUI) -> onGuiClicked
    73:75:boolean onKeyPress(int,int,int,int) -> onKeyPress
    80:88:boolean onMouseClick(int,int) -> onMouseClick
    92:97:boolean over(double,double) -> do
    107:128:void render(float,double,double) -> render
    132:139:void submit(nidefawl.qubes.font.TextInput) -> submit
    143:144:void onEscape(nidefawl.qubes.font.TextInput) -> onEscape
    147:147:boolean requiresTextInput() -> requiresTextInput
nidefawl.qubes.gui.GuiConnecting -> Jill1LJijIIjiJll:
    nidefawl.qubes.font.FontRenderer font -> do
    nidefawl.qubes.font.FontRenderer fontSmall -> if
    java.lang.String stateStr -> do
    nidefawl.qubes.network.client.ThreadConnect thread -> do
    24:32:void initGui(boolean) -> initGui
    35:40:void update() -> update
    43:49:void render(float,double,double) -> render
    52:56:boolean onGuiClicked(nidefawl.qubes.gui.AbstractUI) -> onGuiClicked
nidefawl.qubes.gui.GuiControls -> ll1L1LjI1LJiiJll:
    nidefawl.qubes.gui.GuiControls$Control selected -> do
    nidefawl.qubes.font.FontRenderer font -> do
    nidefawl.qubes.gui.controls.Button back -> do
    java.util.List list -> do
    nidefawl.qubes.gui.controls.ScrollList scrolllist -> do
    nidefawl.qubes.gui.controls.Button clear -> if
    nidefawl.qubes.gui.controls.Button cancel -> for
    nidefawl.qubes.gui.controls.Button defaultSet -> int
    nidefawl.qubes.input.Keybinding inUseKey -> do
    113:165:void initGui(boolean) -> initGui
    168:171:boolean onMouseClick(int,int) -> onMouseClick
    175:177:void update() -> update
    181:235:void render(float,double,double) -> render
    238:262:boolean onKeyPress(int,int,int,int) -> onKeyPress
    268:305:boolean onGuiClicked(nidefawl.qubes.gui.AbstractUI) -> onGuiClicked
    308:312:boolean onWheelScroll(double,double) -> onWheelScroll
nidefawl.qubes.gui.GuiControls$Control -> JijIjIIjIjiJJi:
    nidefawl.qubes.input.Keybinding b -> do
    41:90:void render(float,double,double) -> render
    94:94:void initGui(boolean) -> initGui
    27:27:nidefawl.qubes.input.Keybinding access$000(nidefawl.qubes.gui.GuiControls$Control) -> do
nidefawl.qubes.gui.GuiDisconnected -> IjiJiJ1LL1iJIjL1:
    nidefawl.qubes.font.FontRenderer font -> do
    java.lang.String reason -> do
    20:28:void initGui(boolean) -> initGui
    31:37:void render(float,double,double) -> render
    40:43:boolean onGuiClicked(nidefawl.qubes.gui.AbstractUI) -> onGuiClicked
nidefawl.qubes.gui.GuiGameMenu -> IjJiIjll1LllJiJi:
    nidefawl.qubes.font.FontRenderer font -> do
    nidefawl.qubes.font.FontRenderer fontSmall -> if
    nidefawl.qubes.gui.controls.Button resume -> do
    nidefawl.qubes.gui.controls.Button settings -> if
    nidefawl.qubes.gui.controls.Button controls -> for
    nidefawl.qubes.gui.controls.Button back -> int
    nidefawl.qubes.gui.controls.Button quit -> new
    30:50:void renderBackground(float,double,double,boolean,float) -> renderBackground
    54:123:void initGui(boolean) -> initGui
    125:127:void render(float,double,double) -> render
    129:165:boolean onGuiClicked(nidefawl.qubes.gui.AbstractUI) -> onGuiClicked
    169:169:boolean requiresTextInput() -> requiresTextInput
nidefawl.qubes.gui.GuiMainMenu -> JiiJjIllIjiJ1L:
    nidefawl.qubes.font.FontRenderer font -> do
    nidefawl.qubes.font.FontRenderer fontSmall -> if
    nidefawl.qubes.gui.controls.TextField fieldN -> do
    nidefawl.qubes.gui.controls.Button singleplayer -> do
    nidefawl.qubes.gui.controls.Button multiplayer -> if
    nidefawl.qubes.gui.controls.Button settings -> for
    nidefawl.qubes.gui.controls.Button controls -> int
    nidefawl.qubes.gui.controls.Button quit -> new
    nidefawl.qubes.gui.controls.Button crash -> try
    30:91:void initGui(boolean) -> initGui
    94:102:void render(float,double,double) -> render
    104:128:boolean onGuiClicked(nidefawl.qubes.gui.AbstractUI) -> onGuiClicked
    132:133:void submit(nidefawl.qubes.font.TextInput) -> submit
    138:145:void startSinglePlayer() -> do
    148:152:void onEscape(nidefawl.qubes.font.TextInput) -> onEscape
    155:155:boolean requiresTextInput() -> requiresTextInput
nidefawl.qubes.gui.GuiMultiplayer -> L1IjlliJ1L1L1LiJ:
    nidefawl.qubes.font.FontRenderer font -> do
    nidefawl.qubes.font.FontRenderer fontSmall -> if
    nidefawl.qubes.gui.controls.TextField field -> do
    nidefawl.qubes.gui.controls.Button connect -> do
    nidefawl.qubes.gui.controls.Button back -> if
    25:52:void initGui(boolean) -> initGui
    55:57:void render(float,double,double) -> render
    59:65:boolean onGuiClicked(nidefawl.qubes.gui.AbstractUI) -> onGuiClicked
    69:70:void submit(nidefawl.qubes.font.TextInput) -> submit
    75:81:void connect() -> do
    84:88:void onEscape(nidefawl.qubes.font.TextInput) -> onEscape
    91:91:boolean requiresTextInput() -> requiresTextInput
nidefawl.qubes.gui.GuiOverlayChat -> JijIiJL11LiJ1L1L:
    nidefawl.qubes.font.FontRenderer font -> do
    boolean mouseRes -> do
    27:33:void render(float,double,double) -> render
    37:37:void initGui(boolean) -> initGui
    46:98:void renderAt(int,boolean) -> do
nidefawl.qubes.gui.GuiOverlayStats -> iJJiiJ1L1LjIIjiJ:
    nidefawl.qubes.font.FontRenderer font -> do
    nidefawl.qubes.font.FontRenderer fontSmall -> if
    java.util.ArrayList info1 -> do
    java.util.ArrayList info -> if
    java.lang.String stats -> if
    java.lang.String statsRight -> for
    long messageTime -> do
    java.lang.String message -> do
    boolean render -> do
    java.lang.String stats5 -> int
    nidefawl.qubes.util.SysInfo sysInfo -> do
    45:142:void refresh() -> do
    145:216:void render(float,double,double) -> render
    219:221:void setMessage(java.lang.String) -> do
    225:225:void initGui(boolean) -> initGui
    232:239:void blockClicked(nidefawl.qubes.util.RayTrace$RayTraceIntersection) -> do
nidefawl.qubes.gui.GuiSelectBlock -> jIjIjIIjL1L11L:
    nidefawl.qubes.font.FontRenderer font -> do
    java.util.List blocks -> do
    nidefawl.qubes.gui.controls.Button fakeButton -> do
    nidefawl.qubes.item.BlockStack sel -> do
    float dir -> do
    float rot -> if
    float lastRot -> for
    42:84:void initGui(boolean) -> initGui
    90:97:void update() -> update
    101:261:void render(float,double,double) -> render
    264:271:boolean onGuiClicked(nidefawl.qubes.gui.AbstractUI) -> onGuiClicked
nidefawl.qubes.gui.GuiSelectWorld -> jIL1JiL1iJllJijI:
    nidefawl.qubes.font.FontRenderer font -> do
    nidefawl.qubes.gui.controls.ScrollList scrolllist -> do
    java.util.ArrayList list -> do
    nidefawl.qubes.gui.controls.Button btnBack -> do
    int REQ_ID -> do
    69:82:void initGui(boolean) -> initGui
    86:107:void fillList(java.util.ArrayList) -> do
    109:109:boolean onMouseClick(int,int) -> onMouseClick
    113:125:void render(float,double,double) -> render
    128:137:boolean onGuiClicked(nidefawl.qubes.gui.AbstractUI) -> onGuiClicked
    141:144:boolean onKeyPress(int,int,int,int) -> onKeyPress
    147:148:boolean onWheelScroll(double,double) -> onWheelScroll
    151:153:void update() -> update
nidefawl.qubes.gui.GuiSelectWorld$WorldListControl -> L1JiiJJijIJill:
    nidefawl.qubes.io.network.WorldInfo info -> do
    34:51:void render(float,double,double) -> render
    55:55:void initGui(boolean) -> initGui
    23:23:nidefawl.qubes.io.network.WorldInfo access$000(nidefawl.qubes.gui.GuiSelectWorld$WorldListControl) -> do
nidefawl.qubes.gui.GuiSettings -> IjllIjIjllIj1LiJ:
    int nextID -> do
    nidefawl.qubes.font.FontRenderer font -> do
    nidefawl.qubes.gui.controls.Button back -> do
    java.util.List list -> do
    nidefawl.qubes.gui.GuiSettings$Setting testSetting -> do
    nidefawl.qubes.gui.GuiSettings$Setting distanceSetting -> if
    nidefawl.qubes.gui.GuiSettings$Setting shadowSetting -> for
    nidefawl.qubes.gui.GuiSettings$Setting reflectionSetting -> int
    nidefawl.qubes.gui.GuiSettings$Setting smaaSetting -> new
    nidefawl.qubes.gui.GuiSettings$Setting smaaQSetting -> try
    nidefawl.qubes.gui.GuiSettings$Setting aoSetting -> byte
    60:146:void initGui(boolean) -> initGui
    149:160:void render(float,double,double) -> render
    163:184:boolean onGuiClicked(nidefawl.qubes.gui.AbstractUI) -> onGuiClicked
nidefawl.qubes.gui.GuiSettings$1 -> L11LL1llL11L1LJi:
    nidefawl.qubes.gui.GuiSettings this$0 -> do
    73:73:void callback(int) -> do
nidefawl.qubes.gui.GuiSettings$2 -> llIjIjjIjIiJlljI:
    java.lang.Integer[] val$values -> do
    nidefawl.qubes.gui.GuiSettings this$0 -> do
    82:85:void callback(int) -> do
nidefawl.qubes.gui.GuiSettings$3 -> iJJiIjL1IjjI1LiJ:
    nidefawl.qubes.gui.GuiSettings this$0 -> do
    90:93:void callback(int) -> do
nidefawl.qubes.gui.GuiSettings$4 -> jIjI1L1Lll1LL1ll:
    nidefawl.qubes.gui.GuiSettings this$0 -> do
    98:102:void callback(int) -> do
nidefawl.qubes.gui.GuiSettings$5 -> JiL1iJJiJiL1IjJi:
    nidefawl.qubes.gui.GuiSettings this$0 -> do
    107:111:void callback(int) -> do
nidefawl.qubes.gui.GuiSettings$6 -> IjL11LIjJillL1iJ:
    nidefawl.qubes.gui.GuiSettings this$0 -> do
    116:119:void callback(int) -> do
nidefawl.qubes.gui.GuiSettings$7 -> ll1LIjL11LJiiJIj:
    nidefawl.qubes.gui.GuiSettings this$0 -> do
    125:128:void callback(int) -> do
nidefawl.qubes.gui.GuiSettings$8 -> lliJL11LJijIjI1L:
    nidefawl.qubes.gui.GuiSettings$Setting val$s -> do
    nidefawl.qubes.gui.GuiSettings this$0 -> do
    171:176:void call(nidefawl.qubes.gui.controls.ComboBox$ComboBoxList,int) -> call
nidefawl.qubes.gui.GuiSettings$Setting -> jIjIiJIjIjJiJiL1:
    java.lang.Object[] vals -> do
    nidefawl.qubes.gui.controls.ComboBox box -> do
    39:39:void callback(int) -> do
nidefawl.qubes.gui.LoadingScreen -> IjIjL11LjI1L1LjI:
    float[] loadProgress -> do
    25:25:boolean render(int,float) -> do
    29:108:boolean render(int,float,java.lang.String) -> do
nidefawl.qubes.gui.Tooltip -> llJijIJijIllll:
    nidefawl.qubes.gui.Tooltip$ItemToolTip item -> do
nidefawl.qubes.gui.Tooltip$1 -> L11LIjllIjIjL1jI:
nidefawl.qubes.gui.Tooltip$ItemToolTip -> jIjIllIjJi1L1LIj:
    nidefawl.qubes.item.BaseStack stack -> do
    nidefawl.qubes.inventory.slots.Slot slot -> do
    nidefawl.qubes.gui.windows.GuiWindow window -> do
    java.lang.String title -> do
    nidefawl.qubes.font.FontRenderer fr -> do
    nidefawl.qubes.font.FontRenderer fr2 -> if
    22:40:nidefawl.qubes.gui.Tooltip$ItemToolTip set(nidefawl.qubes.item.BaseStack,nidefawl.qubes.inventory.slots.Slot,nidefawl.qubes.gui.windows.GuiWindow) -> do
    44:55:void render(float,double,double) -> render
    59:59:void initGui(boolean) -> initGui
nidefawl.qubes.gui.controls.Button -> IjlllllljIiJL1L1:
    java.lang.String text -> do
    nidefawl.qubes.font.FontRenderer font -> do
    26:54:void render(float,double,double) -> render
    59:59:void initGui(boolean) -> initGui
nidefawl.qubes.gui.controls.CheckBox -> llL11LjIIjIjIjIj:
    boolean checked -> do
    java.lang.String text -> do
    nidefawl.qubes.font.FontRenderer font -> do
    float stringWidth -> do
    float titleWidth -> if
    boolean drawTitle -> if
    boolean titleLeft -> for
    int colorDisabled -> do
    int textColorDisabled -> if
    37:104:void render(float,double,double) -> render
    109:109:void initGui(boolean) -> initGui
nidefawl.qubes.gui.controls.ColorPicker -> IjiJjIiJjIiJJi1L:
    nidefawl.qubes.gui.controls.Button[] colorPick -> do
    float valH -> do
    float valS -> if
    float valL -> for
    int rgb -> do
    29:81:void render(float,double,double) -> render
    void onColorChange(int) -> do
    87:104:void initGui(boolean) -> initGui
    108:113:boolean hasElement(nidefawl.qubes.gui.AbstractUI) -> hasElement
nidefawl.qubes.gui.controls.ComboBox -> L1jIjIL11L1LiJll:
    nidefawl.qubes.font.FontRenderer font -> do
    int textColorDisabled -> do
    int textColorHover -> if
    int textColor -> for
    float r -> do
    float g -> if
    float b -> for
    float a -> int
    java.lang.Object value -> do
    float stringWidth -> new
    boolean isOpen -> do
    int sel -> int
    int id -> new
    java.lang.String string -> do
    boolean drawTitle -> if
    boolean titleLeft -> for
    boolean canexpandHorizontally -> int
    int maxWidthClosed -> try
    int titleWidth -> byte
    nidefawl.qubes.gui.controls.ComboBox$ComboBoxList comboBoxList -> do
    nidefawl.qubes.gui.Gui gui -> do
    int scrollbarwidth -> case
    57:58:void setValue(java.lang.Object) -> do
    73:73:void initGui(boolean) -> initGui
    367:368:void setWatchPopup(nidefawl.qubes.gui.controls.ComboBox$ComboBoxList) -> do
    389:458:void render(float,double,double) -> render
    464:478:boolean onClick(nidefawl.qubes.gui.controls.PopupHolder) -> do
    21:21:nidefawl.qubes.font.FontRenderer access$000(nidefawl.qubes.gui.controls.ComboBox) -> do
nidefawl.qubes.gui.controls.ComboBox$CallBack -> JijI1LjIlljIJiIj:
    void call(nidefawl.qubes.gui.controls.ComboBox$ComboBoxList,int) -> call
nidefawl.qubes.gui.controls.ComboBox$ComboBoxList -> L1jIiJIjjIiJllll:
    nidefawl.qubes.gui.controls.PopupHolder parentScreen -> do
    nidefawl.qubes.gui.controls.ComboBox$CallBack callBack -> do
    nidefawl.qubes.gui.controls.ComboBox box -> do
    java.lang.Object[] values -> do
    int size -> if
    int heightPerEntry -> for
    boolean showScrollBar -> if
    int scrollOffset -> int
    int showMax -> do
    boolean isScrolling -> do
    int scrollBeginY -> new
    113:114:void initGui(boolean) -> initGui
    117:150:boolean onKeyPress(int,int,int,int) -> onKeyPress
    158:174:boolean mouseOver(double,double) -> mouseOver
    181:186:boolean handleMouseDown(nidefawl.qubes.gui.Gui,int) -> handleMouseDown
    195:363:void render(float,double,double) -> render
nidefawl.qubes.gui.controls.PopupHolder -> jIIjIjllL11LiJiJ:
    void setPopup(nidefawl.qubes.gui.AbstractUI) -> setPopup
    nidefawl.qubes.gui.AbstractUI getPopup() -> getPopup
nidefawl.qubes.gui.controls.ProgressBar -> JiIjiJIjjIIjIj:
    float progress -> do
    float lastProgress -> if
    nidefawl.qubes.font.FontRenderer fr -> do
    java.lang.String s -> do
    22:24:void update() -> update
    28:56:void render(float,double,double) -> render
    60:60:void initGui(boolean) -> initGui
    63:65:void setProgress(float) -> do
    76:77:void setText(java.lang.String) -> do
nidefawl.qubes.gui.controls.ScrollList -> llL1llL1iJ1LllJi:
    nidefawl.qubes.font.FontRenderer font -> do
    float scrollOffset -> do
    nidefawl.qubes.gui.controls.Button scrollbarbutton -> do
    float scrollY -> if
    52:60:float getContentHeight() -> do
    65:149:void render(float,double,double) -> render
    153:153:void initGui(boolean) -> initGui
    156:162:boolean onMouseClick(int,int) -> onMouseClick
    166:169:boolean onWheelScroll(double,double) -> onWheelScroll
    173:178:double mouseOffsetY() -> mouseOffsetY
    182:182:boolean onGuiClicked(nidefawl.qubes.gui.AbstractUI) -> onGuiClicked
nidefawl.qubes.gui.controls.TextField -> L11LL1iJIjJiIj1L:
    nidefawl.qubes.font.FontRenderer font -> do
    nidefawl.qubes.font.TextInput inputRenderer -> do
    36:39:void setPos(int,int) -> setPos
    43:46:void setSize(int,int) -> setSize
    49:65:void render(float,double,double) -> render
    68:68:boolean mouseOver(double,double) -> mouseOver
    74:74:void initGui(boolean) -> initGui
    77:77:boolean handleMouseUp(nidefawl.qubes.gui.Gui,int) -> handleMouseUp
    81:89:boolean handleMouseDown(nidefawl.qubes.gui.Gui,int) -> handleMouseDown
    93:97:boolean onKeyPress(int,int,int,int) -> onKeyPress
    101:105:boolean onTextInput(int) -> onTextInput
    109:109:java.lang.String getText() -> do
    116:116:nidefawl.qubes.font.TextInput getTextInput() -> do
    120:133:boolean isFocusedAndContext() -> do
nidefawl.qubes.gui.crafting.GuiCraftingProgressEntry -> jI1LIj1LL11LiJjI:
    nidefawl.qubes.crafting.recipes.CraftingRecipe recipe -> do
    nidefawl.qubes.gui.crafting.GuiRecipeOutPreviewItemSlot slotPreview -> do
    nidefawl.qubes.gui.controls.ProgressBar progress -> do
    int n -> do
    nidefawl.qubes.crafting.CraftingManagerClient mgr -> do
    37:81:void render(float,double,double) -> render
    85:106:void initGui(boolean) -> initGui
    109:109:boolean onGuiClicked(nidefawl.qubes.gui.AbstractUI) -> onGuiClicked
    113:115:void updateState() -> do
    118:120:void update() -> update
    123:134:void updateProgress() -> if
    137:137:nidefawl.qubes.item.BaseStack getStack() -> do
    141:141:long getEndTime() -> do
    145:145:nidefawl.qubes.crafting.CraftingManagerClient getMgr() -> do
nidefawl.qubes.gui.crafting.GuiCraftingSelect -> IjjIJiiJL1iJllJi:
    nidefawl.qubes.gui.crafting.GuiCraftingSelect$RecipeSlot selected -> do
    nidefawl.qubes.gui.crafting.GuiCraftingProgressEntry selected2 -> do
    nidefawl.qubes.gui.GuiBG bg -> do
    nidefawl.qubes.gui.controls.ScrollList scr2 -> do
    java.util.List catButtons -> do
    nidefawl.qubes.gui.controls.TextField txtAmount -> do
    nidefawl.qubes.gui.crafting.GuiCraftingSelect$GuiButtonCat cat -> do
    nidefawl.qubes.gui.controls.Button btnCraft -> do
    nidefawl.qubes.gui.controls.Button btnIncr -> if
    nidefawl.qubes.gui.controls.Button btnDecr -> for
    nidefawl.qubes.gui.controls.Button btnMax -> int
    float entryw -> do
    int cols -> do
    352:352:java.lang.String getTitle() -> getTitle
    360:428:void initGui(boolean) -> initGui
    431:458:void setCat(nidefawl.qubes.gui.crafting.GuiCraftingSelect$GuiButtonCat) -> do
    461:496:void initLists(boolean,int) -> do
    499:499:boolean onMouseClick(int,int) -> onMouseClick
    505:512:void update() -> update
    533:534:void renderFrame(float,double,double) -> renderFrame
    536:587:void render(float,double,double) -> render
    590:593:boolean onKeyPress(int,int,int,int) -> onKeyPress
    599:674:boolean onGuiClicked(nidefawl.qubes.gui.AbstractUI) -> onGuiClicked
    677:684:void startcraft(nidefawl.qubes.gui.crafting.GuiCraftingSelect$RecipeSlot,int) -> do
    686:700:void updateProgress() -> do
    702:723:void layoutList() -> if
    725:726:void onRemoteUpdate(nidefawl.qubes.crafting.CraftingManagerClient,int) -> do
    747:764:void renderSlotOverlay(nidefawl.qubes.inventory.slots.Slot,float,float) -> renderSlotOverlay
    804:815:void setRecipe(nidefawl.qubes.gui.crafting.GuiCraftingSelect$RecipeSlot) -> do
    817:822:void showButtons(boolean) -> do
    824:827:boolean onWheelScroll(double,double) -> onWheelScroll
    831:831:void submit(nidefawl.qubes.font.TextInput) -> submit
    834:834:void onEscape(nidefawl.qubes.font.TextInput) -> onEscape
    42:42:nidefawl.qubes.gui.crafting.GuiCraftingSelect$GuiButtonCat access$000(nidefawl.qubes.gui.crafting.GuiCraftingSelect) -> do
nidefawl.qubes.gui.crafting.GuiCraftingSelect$1 -> jIjIIjL1JiJiJiIj:
    nidefawl.qubes.gui.crafting.GuiCraftingSelect this$0 -> do
    709:711:int compare(nidefawl.qubes.gui.AbstractUI,nidefawl.qubes.gui.AbstractUI) -> do
    705:705:int compare(java.lang.Object,java.lang.Object) -> compare
nidefawl.qubes.gui.crafting.GuiCraftingSelect$GuiButtonCat -> jIjI1LL1iJIjL11L:
    nidefawl.qubes.gui.crafting.GuiCraftingSelect$GuiControlCat category -> do
    int catid -> do
    91:91:nidefawl.qubes.gui.controls.ScrollList getScrollList() -> do
    94:94:nidefawl.qubes.gui.controls.Button getScrollbarButton() -> do
    99:164:void render(float,double,double) -> render
    167:167:nidefawl.qubes.crafting.CraftingManagerClient getCraftingManager() -> do
    80:80:int access$300(nidefawl.qubes.gui.crafting.GuiCraftingSelect$GuiButtonCat) -> do
nidefawl.qubes.gui.crafting.GuiCraftingSelect$GuiControlCat -> L1jIjIiJJiJi:
    nidefawl.qubes.gui.controls.ScrollList scrolllist -> do
    java.util.List list -> do
    nidefawl.qubes.crafting.CraftingCategory craftingCategory -> do
    nidefawl.qubes.crafting.CraftingManagerClient craftingClient -> do
    63:63:nidefawl.qubes.crafting.CraftingManagerClient access$100(nidefawl.qubes.gui.crafting.GuiCraftingSelect$GuiControlCat) -> do
nidefawl.qubes.gui.crafting.GuiCraftingSelect$GuiControlSubCat -> IjIjJiJiIjjIlljI:
    java.lang.String string -> do
    java.util.List list -> if
    boolean expanded -> do
    int rows -> do
    java.util.List slots -> do
    nidefawl.qubes.gui.crafting.GuiCraftingSelect$GuiControlCat parentCat -> do
    275:311:void render(float,double,double) -> render
    315:331:void initGui(boolean) -> initGui
    334:346:int layout() -> do
    256:256:nidefawl.qubes.gui.crafting.GuiCraftingSelect$GuiControlCat access$200(nidefawl.qubes.gui.crafting.GuiCraftingSelect$GuiControlSubCat) -> do
nidefawl.qubes.gui.crafting.GuiCraftingSelect$PreviewSlots -> jIiJL1jIJiiJiJL1:
    nidefawl.qubes.crafting.recipes.CraftingRecipe recipe -> do
    nidefawl.qubes.inventory.BaseInventory baseInv -> do
    nidefawl.qubes.inventory.BaseInventory playerInv -> if
    790:795:void update() -> do
    799:799:nidefawl.qubes.item.BaseStack slotClicked(nidefawl.qubes.inventory.slots.Slot,int,int) -> do
nidefawl.qubes.gui.crafting.GuiCraftingSelect$RecipeSlot -> L1L1L11LjIJi1L:
    nidefawl.qubes.crafting.recipes.CraftingRecipe recipe -> do
    int maxAmount -> do
    nidefawl.qubes.gui.crafting.GuiCraftingSelect$GuiControlSubCat guiControlSubCat -> do
    183:183:void initGui(boolean) -> initGui
    186:196:void update() -> update
    200:253:void render(float,double,double) -> render
nidefawl.qubes.gui.crafting.GuiRecipeOutPreviewItemSlot -> jIJiiJ1LjIiJ1LL1:
    nidefawl.qubes.gui.crafting.GuiCraftingProgressEntry ctrl -> do
    26:26:void initGui(boolean) -> initGui
    30:94:void render(float,double,double) -> render
nidefawl.qubes.gui.windows.GuiColor -> L1L1jIIj1LjIll:
    nidefawl.qubes.gui.controls.ColorPicker colorPick -> do
    23:23:java.lang.String getTitle() -> getTitle
    27:78:void initGui(boolean) -> initGui
    80:80:boolean canResize() -> canResize
    84:90:void render(float,double,double) -> render
    96:99:boolean onGuiClicked(nidefawl.qubes.gui.AbstractUI) -> onGuiClicked
nidefawl.qubes.gui.windows.GuiColor$1 -> IjL1IjiJ1LllL1ll:
    nidefawl.qubes.gui.windows.GuiColor this$0 -> do
    31:60:void onColorChange(int) -> do
nidefawl.qubes.gui.windows.GuiContext -> lljIL1llIjL1JiIj:
    nidefawl.qubes.gui.controls.TextField input -> do
    nidefawl.qubes.gui.controls.ScrollList scrolllist -> do
nidefawl.qubes.gui.windows.GuiInventory -> IjjIL11LllL1jI1L:
    13:13:java.lang.String getTitle() -> getTitle
    17:36:void initGui(boolean) -> initGui
    39:42:void render(float,double,double) -> render
nidefawl.qubes.gui.windows.GuiInventoryResult -> JiL11LJi1LL1JijI:
    nidefawl.qubes.inventory.slots.Slots slots -> do
    43:53:java.lang.Class getWindowClass(int) -> do
    int getInventory() -> do
    66:94:void initGui(boolean) -> initGui
    97:105:void render(float,double,double) -> render
    109:113:boolean onGuiClicked(nidefawl.qubes.gui.AbstractUI) -> onGuiClicked
    118:134:boolean onMouseClick(int,int) -> onMouseClick
nidefawl.qubes.gui.windows.GuiInventoryResult$GuiInventoryResult1 -> llL1jI1LL1Jillll:
    21:21:int getInventory() -> do
nidefawl.qubes.gui.windows.GuiInventoryResult$GuiInventoryResult2 -> ll1LjIiJiJJijIL1:
    27:27:int getInventory() -> do
nidefawl.qubes.gui.windows.GuiInventoryResult$GuiInventoryResult3 -> Ij1LjIiJjIlliJ1L:
    33:33:int getInventory() -> do
nidefawl.qubes.gui.windows.GuiInventoryResult$GuiInventoryResult4 -> iJ1LIjIjL11LIjL1:
    39:39:int getInventory() -> do
nidefawl.qubes.gui.windows.GuiModelAdjustAbstract -> L1L1JijIjIjIjIJi:
    int nextID -> do
    java.util.List list -> do
    java.util.List listDyn -> if
    nidefawl.qubes.gui.windows.GuiModelAdjustAbstract$Setting testSetting -> do
    nidefawl.qubes.models.EntityModel entityModel -> do
    int modelidx -> if
    nidefawl.qubes.models.qmodel.QModelProperties properties -> do
    boolean isPlayerAdjust() -> do
    176:180:void reloadModel() -> do
    183:224:void setModel(nidefawl.qubes.models.EntityModel,nidefawl.qubes.models.qmodel.QModelProperties) -> do
    228:284:void initGui(boolean) -> initGui
    287:325:int layout() -> do
    329:338:void render(float,double,double) -> render
    341:411:void renderModel(float,double,double) -> do
    415:415:java.lang.String getTitle() -> getTitle
    419:460:boolean onGuiClicked(nidefawl.qubes.gui.AbstractUI) -> onGuiClicked
    465:477:boolean onKeyPress(int,int,int,int) -> onKeyPress
    481:490:void setModel(int) -> do
nidefawl.qubes.gui.windows.GuiModelAdjustAbstract$1 -> jIllllL1jI1LjIjI:
    java.util.List val$l -> do
    nidefawl.qubes.gui.windows.GuiModelAdjustAbstract this$0 -> do
    247:258:void callback(int) -> do
nidefawl.qubes.gui.windows.GuiModelAdjustAbstract$2 -> JilljIIjiJL11L1L:
    java.util.List val$l -> do
    nidefawl.qubes.gui.windows.GuiModelAdjustAbstract this$0 -> do
    270:275:void callback(int) -> do
nidefawl.qubes.gui.windows.GuiModelAdjustAbstract$3 -> IjlliJjIJiL11LjI:
    nidefawl.qubes.gui.windows.GuiModelAdjustAbstract$Setting val$s -> do
    nidefawl.qubes.gui.windows.GuiModelAdjustAbstract this$0 -> do
    447:452:void call(nidefawl.qubes.gui.controls.ComboBox$ComboBoxList,int) -> call
nidefawl.qubes.gui.windows.GuiModelAdjustAbstract$GuiModelView -> iJiJIjiJIjjIJijI:
    40:40:boolean isPlayerAdjust() -> do
nidefawl.qubes.gui.windows.GuiModelAdjustAbstract$GuiPlayerAdjust -> iJIjIjJiiJL1jIll:
    46:46:boolean isPlayerAdjust() -> do
nidefawl.qubes.gui.windows.GuiModelAdjustAbstract$ModelActionList -> JiIjjIjIJiL1Ijll:
    nidefawl.qubes.models.EntityModel entityModel -> do
    int idx -> if
    146:157:void callback(int) -> do
nidefawl.qubes.gui.windows.GuiModelAdjustAbstract$ModelSettingControl -> Ij1LiJIjiJL1iJJi:
    nidefawl.qubes.models.ModelOption option -> do
    101:112:void callback(int) -> do
    75:75:nidefawl.qubes.models.ModelOption access$000(nidefawl.qubes.gui.windows.GuiModelAdjustAbstract$ModelSettingControl) -> do
nidefawl.qubes.gui.windows.GuiModelAdjustAbstract$Setting -> iJjIJi1LJiJiiJll:
    java.lang.Object[] vals -> do
    nidefawl.qubes.gui.controls.ComboBox box -> do
    nidefawl.qubes.gui.controls.Button button1 -> do
    nidefawl.qubes.gui.controls.Button button2 -> if
    int curVal -> do
    nidefawl.qubes.gui.windows.GuiModelAdjustAbstract gui -> if
    72:72:void callback(int) -> do
nidefawl.qubes.gui.windows.GuiWindow -> L1llJi1LiJlliJjI:
    int titleBarHeight -> titleBarHeight
    boolean allwaysVisible -> allwaysVisible
    boolean visible -> visible
    boolean mouseOverResize -> mouseOverResize
    nidefawl.qubes.font.FontRenderer font -> font
    int[] bounds -> bounds
    25:31:void initGui(boolean) -> initGui
    33:33:java.lang.String getTitle() -> getTitle
    37:40:void onDefocus() -> onDefocus
    43:43:void onFocus() -> onFocus
    47:48:void setFocus() -> setFocus
    51:51:boolean hasFocus() -> hasFocus
    54:58:void open() -> open
    61:64:void close() -> close
    67:69:void onClose() -> onClose
    72:82:boolean mouseOver(double,double) -> mouseOver
    85:85:boolean mouseOverResize(double,double) -> mouseOverResize
    89:89:boolean removeOnClose() -> removeOnClose
    94:94:boolean doesPopupHandleClick(double,double) -> doesPopupHandleClick
    98:98:void updateBounds() -> updateBounds
    101:101:boolean canResize() -> canResize
    106:163:void renderFrame(float,double,double) -> renderFrame
    165:190:void onDrag(double,double) -> onDrag
    192:205:void onResize(double,double) -> onResize
    207:236:boolean onMouseClick(int,int) -> onMouseClick
    239:239:int getWindowPosX() -> getWindowPosX
    242:242:int getWindowPosY() -> getWindowPosY
nidefawl.qubes.gui.windows.GuiWindowInventoryBase -> L1L1jIjIjIL1IjJi:
    nidefawl.qubes.inventory.slots.Slots slots -> do
    21:24:void renderSlots(float,double,double) -> do
    26:38:boolean onMouseClick(int,int) -> onMouseClick
    41:41:boolean canResize() -> canResize
nidefawl.qubes.gui.windows.GuiWindowManager -> llll1LJiL11LJiiJ:
    nidefawl.qubes.gui.windows.GuiWindowManager singleton -> do
    java.util.Map windowList -> do
    nidefawl.qubes.gui.windows.GuiWindow windowFocus -> for
    nidefawl.qubes.gui.windows.GuiWindow dragged -> do
    nidefawl.qubes.gui.windows.GuiWindow resized -> if
    nidefawl.qubes.gui.Tooltip tooltip -> do
    25:25:nidefawl.qubes.gui.windows.GuiWindowManager getInstance() -> do
    29:58:void setWindowFocus(nidefawl.qubes.gui.windows.GuiWindow) -> do
    61:89:void do_setWindowFocus(nidefawl.qubes.gui.windows.GuiWindow) -> if
    91:96:int getHighestIndex() -> do
    122:141:nidefawl.qubes.gui.windows.GuiWindow openWindow(java.lang.Class,boolean) -> do
    145:145:nidefawl.qubes.gui.windows.GuiWindow openWindow(java.lang.Class) -> do
    149:154:java.lang.Object getWindow(java.lang.Class) -> do
    158:162:boolean anyWindowVisible() -> do
    166:170:void closeAll() -> do
    174:178:nidefawl.qubes.gui.windows.GuiWindow addWindow(nidefawl.qubes.gui.windows.GuiWindow,boolean) -> do
    251:252:void render(float,double,double) -> render
    255:315:void drawWindows(float,double,double) -> do
    317:321:void renderTooltip(float,double,double) -> if
    325:330:void setTooltip(nidefawl.qubes.gui.Tooltip) -> do
    337:337:void initGui(boolean) -> initGui
    354:354:nidefawl.qubes.gui.windows.GuiWindow getWindowFocus() -> do
    357:368:boolean onMouseClick(int,int) -> do
    371:385:nidefawl.qubes.gui.windows.GuiWindow getMouseOver(double,double) -> do
    388:396:void mouseMove(double,double) -> do
    399:403:boolean onKeyPress(int,int,int,int) -> do
    407:411:boolean onWheelScroll(double,double) -> do
    415:436:void onWindowClosed(nidefawl.qubes.gui.windows.GuiWindow) -> for
    440:440:void onWindowManagerClose() -> if
    447:447:void onWindowOpened(nidefawl.qubes.gui.windows.GuiWindow) -> int
    449:454:void update() -> for
nidefawl.qubes.hex.HexCell -> L1iJL1IjjIllL1Ij:
    int x -> do
    int z -> if
    nidefawl.qubes.hex.HexagonGridStorage grid -> do
    29:33:double getDistanceCenter(double,double) -> do
    37:37:double getCenterX() -> do
    41:41:double getCenterY() -> if
    63:83:int getClosesCorner(double,double) -> do
    90:90:nidefawl.qubes.hex.HexagonGridStorage getGrid() -> do
    94:202:java.util.Collection getChunks() -> do
nidefawl.qubes.hex.HexagonGrid -> IjJiJiIjIjL1jIIj:
    double radius -> do
    double height -> if
    double width -> for
    double hwidth -> int
    double ttheight -> new
    double[] sinCos -> do
    int[] offset -> do
    41:41:long blockToGrid(int,int) -> do
    45:53:long toHex(double,double) -> do
    57:57:double getCenterX(int,int) -> do
    61:61:double getCenterY(int,int) -> if
    65:65:double getPointX(int,int,int) -> do
    68:68:double getPointY(int,int,int) -> if
    111:111:long offset(int,int,int) -> do
nidefawl.qubes.hex.HexagonGridStorage -> JiJijI1LL1jIIj1L:
    int max -> do
    java.util.HashMap map -> do
    java.util.HashMap oobmap -> if
    39:40:void putPos(long,java.lang.Object) -> do
    43:60:java.lang.Object getPos(long) -> do
    64:66:boolean outOfBounds(long) -> do
    70:71:java.lang.Object blockToHex(int,int) -> do
    java.lang.Object loadCell(int,int) -> if
    java.lang.Object oobCell(int,int) -> for
    80:80:java.util.Collection getLoaded() -> do
    84:84:void flag(int,int) -> do
nidefawl.qubes.hex.Point2F -> L1Ji1Lllll1LL1iJ:
    float x -> do
    float y -> if
nidefawl.qubes.input.DigController -> L1IjjIIjL1JijIjI:
    int stage -> do
    boolean digging -> do
    int speed -> if
    int tick -> for
    nidefawl.qubes.vec.BlockPos mouseOver -> do
    nidefawl.qubes.vec.BlockPos lastMouseOver -> if
    nidefawl.qubes.util.RayTrace$RayTraceIntersection intersect -> do
    int transaction -> int
    int[] stageTex -> do
    64:64:boolean isDigAnimation() -> do
    71:73:void onGrabChange(boolean) -> do
    81:85:void endDigging() -> new
    91:91:void preRenderUpdate() -> do
    94:111:void update() -> if
    114:120:boolean equalMouseOver() -> if
    125:135:void sendDigState(int) -> if
    138:147:void setBlock(nidefawl.qubes.util.RayTrace$RayTraceIntersection,nidefawl.qubes.vec.BlockPos) -> do
    156:156:void init() -> for
    161:165:void reloadTextures() -> int
    235:235:void renderDigging(nidefawl.qubes.world.World,float) -> do
    239:243:float getSwingProgress(float) -> do
    247:253:void handleServerState(int) -> do
nidefawl.qubes.input.GameMode -> IjJiIjiJIjllJijI:
    nidefawl.qubes.input.GameMode PLAY -> do
    nidefawl.qubes.input.GameMode BUILD -> if
    nidefawl.qubes.input.GameMode EDIT -> for
    nidefawl.qubes.input.GameMode SELECT -> int
    nidefawl.qubes.input.GameMode[] $VALUES -> do
    6:6:nidefawl.qubes.input.GameMode[] values() -> values
    6:6:nidefawl.qubes.input.GameMode valueOf(java.lang.String) -> valueOf
nidefawl.qubes.input.KeybindManager -> lliJIjll1LIjJiJi:
    nidefawl.qubes.config.AbstractYMLConfig settings -> do
    nidefawl.qubes.input.Keybinding kb_forward -> do
    nidefawl.qubes.input.Keybinding kb_backward -> if
    nidefawl.qubes.input.Keybinding kb_left -> for
    nidefawl.qubes.input.Keybinding kb_right -> int
    nidefawl.qubes.input.Keybinding kb_sneak -> new
    nidefawl.qubes.input.Keybinding kb_jump -> try
    float strafe -> do
    float forward -> if
    boolean grabbed -> do
    int mX -> do
    int mY -> if
    boolean jump -> if
    boolean sneak -> for
    java.util.Map keyToKeyBinding -> do
    java.util.ArrayList keybindings -> do
    java.util.concurrent.ConcurrentMap keybindingsStr -> do
    105:107:void addKeyBinding(nidefawl.qubes.input.Keybinding) -> do
    109:109:nidefawl.qubes.input.Keybinding getKeyBindingByName(java.lang.String) -> do
    112:117:void updateKeybindMap() -> do
    120:120:nidefawl.qubes.input.Keybinding getKeyBinding(int) -> do
    124:157:void update(double,double) -> do
    160:160:boolean isKeyDown(int) -> do
    164:173:void setGrabbed(boolean) -> do
    176:176:boolean grabbed() -> do
    180:388:void initKeybinds() -> if
    392:400:void load() -> for
    402:410:void saveBindings() -> int
    412:412:java.util.Collection getBindings() -> do
nidefawl.qubes.input.KeybindManager$1 -> iJllL1IjIjllllll:
    48:48:void setDefaults() -> do
    52:55:void save() -> for
    59:68:void load() -> if
nidefawl.qubes.input.KeybindManager$10 -> L1L1jIjIllL1Ijll:
    246:247:void onDown() -> do
nidefawl.qubes.input.KeybindManager$11 -> JiiJjIlliJL1Ij1L:
    251:252:void onDown() -> do
nidefawl.qubes.input.KeybindManager$12 -> llL1JijIJiL1iJjI:
    256:257:void onDown() -> do
nidefawl.qubes.input.KeybindManager$13 -> lljIIjjIL1iJjIL1:
    nidefawl.qubes.Game val$game -> do
    265:269:void onDown() -> do
nidefawl.qubes.input.KeybindManager$14 -> jIJiIj1L1LiJllll:
    nidefawl.qubes.Game val$game -> do
    273:280:void onDown() -> do
nidefawl.qubes.input.KeybindManager$15 -> iJjIjI1LL1iJIjJi:
    nidefawl.qubes.Game val$game -> do
    284:285:void onDown() -> do
nidefawl.qubes.input.KeybindManager$16 -> IjllIjllllIjIjIj:
    289:290:void onDown() -> do
nidefawl.qubes.input.KeybindManager$17 -> iJjIJiL1iJllIjIj:
    294:295:void onDown() -> do
nidefawl.qubes.input.KeybindManager$18 -> Ji1LllIjjIiJjI:
    302:306:void onDown() -> do
nidefawl.qubes.input.KeybindManager$19 -> llL1iJiJlljIL1:
    310:311:void onDown() -> do
nidefawl.qubes.input.KeybindManager$2 -> L1JiJi1LIjllL1Ji:
    nidefawl.qubes.Game val$game -> do
    184:186:void onDown() -> do
nidefawl.qubes.input.KeybindManager$20 -> llIjllIj1LiJiJll:
    nidefawl.qubes.Game val$game -> do
    315:316:void onDown() -> do
nidefawl.qubes.input.KeybindManager$21 -> L1jIllJiiJiJllll:
    320:321:void onDown() -> do
nidefawl.qubes.input.KeybindManager$22 -> iJllL1JiiJIjJill:
    331:334:void onDown() -> do
nidefawl.qubes.input.KeybindManager$23 -> llIjL1iJjIjIJill:
    339:340:void onDown() -> do
nidefawl.qubes.input.KeybindManager$24 -> JiL1L11LL11LIj1L:
    nidefawl.qubes.Game val$game -> do
    344:346:void onDown() -> do
nidefawl.qubes.input.KeybindManager$25 -> JiIjjI1LJijIjIjI:
    352:353:void onDown() -> do
nidefawl.qubes.input.KeybindManager$26 -> IjllJiL1JijI1LL1:
    359:362:void onDown() -> do
nidefawl.qubes.input.KeybindManager$27 -> jIL1Ijll1LiJJiIj:
    366:367:void onDown() -> do
nidefawl.qubes.input.KeybindManager$28 -> iJIjjIjI1LL1IjL1:
    nidefawl.qubes.Game val$game -> do
    371:376:void onDown() -> do
nidefawl.qubes.input.KeybindManager$29 -> llJiiJiJ1LllJi1L:
    380:381:void onRepeat() -> if
nidefawl.qubes.input.KeybindManager$3 -> jIllL1llIjJiiJL1:
    nidefawl.qubes.Game val$game -> do
    198:206:void onDown() -> do
nidefawl.qubes.input.KeybindManager$30 -> llIjL11LiJIj1LjI:
    385:386:void onRepeat() -> if
nidefawl.qubes.input.KeybindManager$4 -> IjJiJijIL1IjiJL1:
    nidefawl.qubes.Game val$game -> do
    210:211:void onDown() -> do
nidefawl.qubes.input.KeybindManager$5 -> iJjI1LjIL11LjIIj:
    nidefawl.qubes.Game val$game -> do
    215:216:void onDown() -> do
nidefawl.qubes.input.KeybindManager$6 -> IjIjllll1LL11L1L:
    nidefawl.qubes.Game val$game -> do
    220:225:void onDown() -> do
nidefawl.qubes.input.KeybindManager$7 -> Ji1L1LJi1LL1Jill:
    nidefawl.qubes.Game val$game -> do
    229:230:void onDown() -> do
nidefawl.qubes.input.KeybindManager$8 -> IjllJilliJL1jIIj:
    234:235:void onDown() -> do
nidefawl.qubes.input.KeybindManager$9 -> llL1iJL1L11LL1Ji:
    240:241:void onDown() -> do
nidefawl.qubes.input.Keybinding -> iJ1LllL1L1lljIL1:
    boolean enabled -> do
    int key -> do
    boolean isPressed -> if
    java.lang.String name -> do
    boolean hasCallback -> for
    boolean staticBinding -> int
    int defaultkey -> if
    28:28:int getDefaultkey() -> do
    31:32:nidefawl.qubes.input.Keybinding setNoCallBack() -> do
    36:37:nidefawl.qubes.input.Keybinding setStatic() -> if
    40:40:boolean isStaticBinding() -> do
    43:43:boolean hasCallback() -> if
    46:51:void fire() -> for
    54:54:java.lang.String getName() -> do
    61:61:boolean isEnabled() -> for
    68:68:boolean isPressed() -> int
    75:75:int getKey() -> if
    83:84:void setEnabled(boolean) -> do
    91:92:void setKey(int) -> do
    102:102:void onDown() -> do
    103:103:void onUp() -> int
    104:104:void onRepeat() -> if
    110:122:void update(int) -> if
nidefawl.qubes.input.Keyboard -> JiL1L1JiiJjIIj:
    java.util.HashMap keyNames -> do
    139:139:boolean isKeyDown(int) -> do
    143:143:boolean getState(int) -> if
    147:148:java.lang.String getKeyName(int) -> do
nidefawl.qubes.input.Mouse -> L1IjiJIjJiJill1L:
    double dy -> do
    double dx -> if
    double x -> for
    double y -> int
    double scrollDX -> new
    double scrollDY -> try
    double lastX -> byte
    double lastY -> case
    java.nio.DoubleBuffer bx -> do
    java.nio.DoubleBuffer by -> if
    boolean isGrabbed -> do
    28:32:void init() -> do
    34:36:double getDX() -> do
    40:42:double getDY() -> if
    46:46:boolean getState(int) -> do
    50:50:double getX() -> for
    54:54:double getY() -> int
    58:59:void setCursorPosition(int,int) -> do
    63:63:boolean isGrabbed() -> do
    67:72:void setGrabbed(boolean) -> do
    75:82:void setLastPos() -> if
    84:84:boolean isButtonDown(int) -> if
    90:96:void update(double,double) -> do
nidefawl.qubes.input.Selection -> llllJiJiL1iJllL1:
    nidefawl.qubes.gl.TesselatorState highlightSelection -> do
    nidefawl.qubes.gl.TesselatorState fullBlock -> if
    nidefawl.qubes.gl.TesselatorState customBB -> for
    nidefawl.qubes.vec.AABBFloat lastCustomBB -> do
    boolean quarterMode -> do
    boolean mouseDown -> if
    int buttonDown -> do
    boolean mouseStateChanged -> for
    nidefawl.qubes.gl.TesselatorState renderBB -> int
    nidefawl.qubes.util.RayTrace rayTrace -> do
    nidefawl.qubes.vec.BlockPos[] pos -> do
    boolean updateBB -> int
    nidefawl.qubes.vec.BlockPos mouseOver -> do
    nidefawl.qubes.vec.AABBFloat selBB -> if
    int timer -> if
    34:34:nidefawl.qubes.input.GameMode getMode() -> do
    50:55:void init() -> do
    60:61:void resetSelection() -> if
    64:64:boolean hasSelection() -> do
    73:107:void renderBlockHighlight(nidefawl.qubes.world.World,float) -> do
    113:122:void renderMouseOver() -> try
    126:254:void renderBlockOver(nidefawl.qubes.gl.TesselatorState,nidefawl.qubes.vec.AABBFloat) -> do
    258:307:void renderBB() -> for
    309:325:void update(nidefawl.qubes.world.World) -> do
    328:380:void update(nidefawl.qubes.world.World,double,double,double) -> do
    386:423:void setMouseOver(nidefawl.qubes.util.RayTrace$RayTraceIntersection) -> do
    426:434:void set(int,nidefawl.qubes.vec.BlockPos) -> do
    436:463:void clicked(int,boolean) -> do
    466:478:void onRelease(int) -> do
    481:481:boolean extendReach() -> if
    485:485:nidefawl.qubes.vec.BlockPos getMin() -> do
    489:489:nidefawl.qubes.vec.BlockPos getMax() -> if
    493:495:int getNumBlocks() -> do
    499:505:void reset() -> int
    511:514:nidefawl.qubes.util.RayTrace$RayTraceIntersection getHit() -> do
    539:540:void toggleQuarterMode() -> new
nidefawl.qubes.input.WorldPlayerController -> iJiJIjL1llllIjll:
    27:45:void blockClicked(nidefawl.qubes.world.World,nidefawl.qubes.util.RayTrace$RayTraceIntersection,int,boolean) -> do
    48:64:void pickBlock(nidefawl.qubes.world.World,nidefawl.qubes.vec.BlockPos,nidefawl.qubes.util.RayTrace$RayTraceIntersection) -> do
    68:73:void setMultiple(nidefawl.qubes.world.World,nidefawl.qubes.util.RayTrace$RayTraceIntersection,int,nidefawl.qubes.vec.BlockPos,nidefawl.qubes.vec.BlockPos) -> do
nidefawl.qubes.inventory.BaseInventory -> iJiJiJIjIjJiIjll:
    int id -> do
    int inventorySize -> if
    nidefawl.qubes.item.BaseStack[] stacks -> do
    byte[] flagged -> do
    boolean dirty -> do
    boolean needSorting -> if
    java.util.HashMap amounts -> do
    37:37:boolean isDirty() -> do
    41:41:nidefawl.qubes.item.BaseStack getItem(int) -> do
    45:50:nidefawl.qubes.item.BaseStack setItem(int,nidefawl.qubes.item.BaseStack) -> do
    54:54:int getId() -> do
    58:58:int getSize() -> if
    62:69:java.util.List copySlotStacks() -> do
    73:79:void addStack(nidefawl.qubes.item.BaseStack) -> do
    82:83:void setIncr(java.util.Collection) -> do
    85:86:void set(java.util.Collection) -> if
    89:103:void _set(java.util.Collection,boolean) -> do
    106:116:java.util.HashSet getUpdate() -> do
    119:121:void flag(int) -> do
    123:138:java.util.HashMap getSortedStacks() -> do
nidefawl.qubes.inventory.InventoryUtil -> llllIjllllIjllJi:
    27:36:nidefawl.qubes.nbt.Tag writeToTag(java.util.List) -> do
    45:60:java.util.List readFromTag(nidefawl.qubes.nbt.Tag) -> do
    87:100:boolean copy(nidefawl.qubes.item.BaseStack[],nidefawl.qubes.item.BaseStack[]) -> do
nidefawl.qubes.inventory.PlayerInventory -> IjjIL1Ji1LJijI1L:
    nidefawl.qubes.item.BaseStack carried -> do
    33:38:java.util.List copySlotStacks() -> do
    41:52:void set(java.util.List) -> do
    57:59:nidefawl.qubes.item.BaseStack setCarried(nidefawl.qubes.item.BaseStack) -> do
    63:63:nidefawl.qubes.item.BaseStack getCarried() -> do
nidefawl.qubes.inventory.PlayerInventoryCrafting -> jIIjiJjI1LIjIjiJ:
    int inputSlots -> for
    int outputSlots -> int
nidefawl.qubes.inventory.slots.Slot -> IjllJiL1iJjIJill:
    int idx -> do
    float x -> do
    float y -> if
    float w -> for
    nidefawl.qubes.inventory.slots.Slots slots -> do
    nidefawl.qubes.item.BaseStack getItem() -> do
    30:30:boolean isAt(double,double) -> do
    boolean transferTo(nidefawl.qubes.inventory.slots.SlotsInventoryBase) -> do
    boolean isEmpty() -> do
    nidefawl.qubes.item.BaseStack drain() -> if
    nidefawl.qubes.item.BaseStack put(nidefawl.qubes.inventory.slots.SlotInventory) -> do
    nidefawl.qubes.item.BaseStack putStack(nidefawl.qubes.item.BaseStack) -> do
    boolean canTake() -> if
    boolean canPut(nidefawl.qubes.item.BaseStack) -> do
    48:48:void flag() -> do
nidefawl.qubes.inventory.slots.SlotInventory -> L1IjL1jIjIllL1Ij:
    nidefawl.qubes.inventory.BaseInventory inv -> do
    24:24:nidefawl.qubes.item.BaseStack getItem() -> do
    29:36:boolean transferTo(nidefawl.qubes.inventory.slots.SlotsInventoryBase) -> do
    41:41:boolean isEmpty() -> do
    46:46:nidefawl.qubes.item.BaseStack drain() -> if
    51:51:nidefawl.qubes.item.BaseStack put(nidefawl.qubes.inventory.slots.SlotInventory) -> do
    56:59:nidefawl.qubes.item.BaseStack putStack(nidefawl.qubes.item.BaseStack) -> do
    64:64:boolean canTake() -> if
    69:69:boolean canPut(nidefawl.qubes.item.BaseStack) -> do
    73:74:void flag() -> do
nidefawl.qubes.inventory.slots.SlotPreview -> L11LL1IjjIL1jIll:
    nidefawl.qubes.item.BaseStack stack -> do
    16:16:nidefawl.qubes.item.BaseStack getItem() -> do
    21:21:boolean transferTo(nidefawl.qubes.inventory.slots.SlotsInventoryBase) -> do
    26:26:boolean isEmpty() -> do
    31:31:nidefawl.qubes.item.BaseStack drain() -> if
    36:36:nidefawl.qubes.item.BaseStack put(nidefawl.qubes.inventory.slots.SlotInventory) -> do
    41:41:nidefawl.qubes.item.BaseStack putStack(nidefawl.qubes.item.BaseStack) -> do
    46:46:boolean canTake() -> if
    51:51:boolean canPut(nidefawl.qubes.item.BaseStack) -> do
nidefawl.qubes.inventory.slots.SlotStack -> IjIjIjjIllL1jIjI:
    int slot -> do
    nidefawl.qubes.item.BaseStack stack -> do
    23:25:void read(java.io.DataInput) -> do
    28:30:void write(java.io.DataOutput) -> do
nidefawl.qubes.inventory.slots.SlotStock -> JilllliJiJJiJiL1:
    nidefawl.qubes.item.BaseStack stack -> do
    nidefawl.qubes.inventory.PlayerInventory inv -> do
    nidefawl.qubes.item.BaseStack stackReq -> if
    23:23:nidefawl.qubes.item.BaseStack getItem() -> do
    28:28:boolean transferTo(nidefawl.qubes.inventory.slots.SlotsInventoryBase) -> do
    33:33:boolean isEmpty() -> do
    38:38:nidefawl.qubes.item.BaseStack drain() -> if
    43:43:nidefawl.qubes.item.BaseStack put(nidefawl.qubes.inventory.slots.SlotInventory) -> do
    48:48:nidefawl.qubes.item.BaseStack putStack(nidefawl.qubes.item.BaseStack) -> do
    53:53:boolean canTake() -> if
    58:58:boolean canPut(nidefawl.qubes.item.BaseStack) -> do
    62:68:void update() -> if
nidefawl.qubes.inventory.slots.Slots -> iJjIL1IjIjJilljI:
    java.util.List slots -> do
    int id -> do
    18:18:int getId() -> do
    21:22:void addSlot(nidefawl.qubes.inventory.slots.Slot) -> do
    30:35:nidefawl.qubes.inventory.slots.Slot getSlotAt(double,double) -> do
    42:42:java.util.List getSlots() -> do
    nidefawl.qubes.item.BaseStack slotClicked(nidefawl.qubes.inventory.slots.Slot,int,int) -> do
    54:54:nidefawl.qubes.inventory.slots.Slot getSlot(int) -> do
    58:58:boolean canModify() -> do
nidefawl.qubes.inventory.slots.SlotsCrafting -> iJL1IjJiJiL1jIJi:
    boolean locked -> do
    26:26:int getInputSize() -> if
    30:31:void unlock() -> do
    34:35:void lock() -> if
    38:38:boolean canModify() -> do
    42:48:int getNumItems() -> for
    51:60:int transferSlots(nidefawl.qubes.inventory.slots.SlotsInventoryBase) -> do
nidefawl.qubes.inventory.slots.SlotsInventory -> jIiJL1JiJijIiJjI:
    28:28:boolean canModify() -> do
nidefawl.qubes.inventory.slots.SlotsInventoryBase -> IjIjJiIjL1jIIjL1:
    nidefawl.qubes.inventory.BaseInventory baseInv -> do
    nidefawl.qubes.inventory.PlayerInventory playerInv -> do
    18:32:nidefawl.qubes.item.BaseStack slotClicked(nidefawl.qubes.inventory.slots.Slot,int,int) -> do
    39:39:nidefawl.qubes.inventory.BaseInventory getInv() -> do
    43:50:nidefawl.qubes.inventory.slots.Slot getFirstEmpty(nidefawl.qubes.item.BaseStack) -> do
    54:63:nidefawl.qubes.item.BaseStack addStack(nidefawl.qubes.item.BaseStack) -> do
nidefawl.qubes.io.BinaryStreamReader -> IjL11LL1iJ1LiJll:
    int offset -> do
    nidefawl.qubes.assets.AssetBinary asset -> do
    15:21:byte[] readBytes(int) -> do
    33:34:float readFloat() -> do
    45:45:nidefawl.qubes.vec.Vector3f readVec3() -> do
    53:53:nidefawl.qubes.vec.Vector4f readVec4() -> do
    57:64:int readInt() -> do
    67:72:int readUShort() -> if
    75:78:int readUByte() -> for
    87:90:java.lang.String readString(int) -> do
    94:95:void resetOffset() -> do
nidefawl.qubes.io.ByteArrIO -> jIjIllllL1IjL1L1:
    17:21:int writeInt(byte[],int,int) -> do
    24:26:int writeShort(byte[],int,int) -> if
    36:37:void write(byte[],int,int) -> if
    40:42:int readShort(byte[],int) -> do
    46:47:int readUnsignedByte(byte[],int) -> if
    56:60:int readInt(byte[],int) -> for
    69:70:void writeByte(byte[],int,int) -> do
    72:75:void byteToShortArray(byte[],short[]) -> do
    77:78:byte[] shortToByteArray(short[]) -> do
    81:85:byte[] shortToByteArray(short[],byte[]) -> do
nidefawl.qubes.io.network.DataListType -> jIjIllJijIIj1LIj:
    nidefawl.qubes.io.network.DataListType WORLDS -> do
    int id -> do
    java.lang.Class clazz -> do
    nidefawl.qubes.io.network.DataListType[] $VALUES -> do
    6:6:nidefawl.qubes.io.network.DataListType[] values() -> values
    6:6:nidefawl.qubes.io.network.DataListType valueOf(java.lang.String) -> valueOf
    15:16:nidefawl.qubes.io.network.DataListType byId(int) -> do
    20:22:nidefawl.qubes.network.StreamIO makeNew() -> do
    26:26:int getId() -> do
nidefawl.qubes.io.network.WorldInfo -> L1jIlllliJJiJiJi:
    int id -> do
    java.lang.String name -> do
    java.util.UUID uuid -> do
    19:22:void read(java.io.DataInput) -> do
    25:29:void write(java.io.DataOutput) -> do
nidefawl.qubes.item.BaseStack -> iJL1lliJjIllIj1L:
    int id -> do
    int data -> if
    int size -> for
    nidefawl.qubes.item.ItemStack tmpStackItem -> do
    nidefawl.qubes.item.BlockStack tmpStackBlock -> do
    boolean isItem() -> do
    23:23:boolean isBlock() -> if
    nidefawl.qubes.item.BaseStack copy() -> do
    nidefawl.qubes.nbt.Tag save() -> do
    boolean isFullyEqual(nidefawl.qubes.item.BaseStack) -> do
    boolean isEqualId(nidefawl.qubes.item.BaseStack) -> if
    33:43:nidefawl.qubes.item.BaseStack load(nidefawl.qubes.nbt.Tag) -> do
    46:50:boolean equalStacks(nidefawl.qubes.item.BaseStack,nidefawl.qubes.item.BaseStack) -> do
    nidefawl.qubes.item.Item getItem() -> do
    nidefawl.qubes.block.Block getBlock() -> do
    int getTypeHash() -> do
    62:62:java.lang.String getName() -> do
    69:77:nidefawl.qubes.item.BaseStack getTemp(java.lang.Object) -> do
    80:81:void setSize(int) -> do
    83:83:int getSize() -> if
    86:86:int getId() -> for
nidefawl.qubes.item.BlockStack -> iJiJIjiJiJll1L1L:
    nidefawl.qubes.item.StackData stackdata -> do
    29:30:void setStackdata(nidefawl.qubes.item.StackData) -> do
    35:35:nidefawl.qubes.item.StackData getStackdata() -> do
    82:96:nidefawl.qubes.nbt.Tag save() -> do
    99:102:nidefawl.qubes.item.BlockStack copy() -> do
    105:105:nidefawl.qubes.block.Block getBlock() -> do
    109:118:void read(java.io.DataInput) -> do
    121:130:void write(java.io.DataOutput) -> do
    133:136:boolean isEqualId(nidefawl.qubes.item.BaseStack) -> if
    139:142:boolean isFullyEqual(nidefawl.qubes.item.BaseStack) -> do
    147:147:boolean isItem() -> do
    151:151:nidefawl.qubes.item.Item getItem() -> do
    156:156:java.lang.String toString() -> toString
    162:162:int getTypeHash() -> do
    21:21:nidefawl.qubes.item.BaseStack copy() -> do
nidefawl.qubes.item.IDMappingItems -> iJ1LjIIjjIL1JiiJ:
    boolean CHANGED -> do
    boolean LOADED -> if
    int HIGHEST_ITEM_ID -> do
    com.google.common.collect.ImmutableBiMap map -> do
    java.lang.Object sync -> do
    33:72:void load() -> do
    74:115:void save() -> if
    117:149:int get(java.lang.String) -> do
nidefawl.qubes.item.Item -> iJ1LJiL1iJjIIj1L:
    nidefawl.qubes.item.Item[] registereditems -> if
    short[] registereditemIds -> do
    nidefawl.qubes.item.Item[] item -> do
    nidefawl.qubes.item.Item pickaxe -> do
    nidefawl.qubes.item.Item axe -> if
    nidefawl.qubes.item.ItemGroupLog log -> do
    nidefawl.qubes.item.ItemGroupPlank plank -> do
    nidefawl.qubes.item.ItemGroupStones stones -> do
    int id -> do
    java.lang.String name -> do
    boolean transparent -> do
    java.lang.String[] textures -> do
    nidefawl.qubes.vec.AABBFloat blockBounds -> do
    nidefawl.qubes.models.ItemModel itemModel -> do
    nidefawl.qubes.item.ItemGroup itemGroup -> do
    60:61:void setItemGroup(nidefawl.qubes.item.ItemGroup) -> do
    75:75:void init() -> do
    79:80:nidefawl.qubes.item.Item setModel(nidefawl.qubes.models.ItemModel) -> do
    84:84:java.lang.String[] getTextures() -> do
    88:92:nidefawl.qubes.item.Item setTextures(java.lang.String[]) -> do
    101:101:java.lang.String getName() -> do
    108:130:void preInit() -> if
    133:133:void postInit() -> for
    145:145:nidefawl.qubes.item.Item get(int) -> do
    152:152:int getTexture(nidefawl.qubes.item.ItemStack) -> do
    159:159:nidefawl.qubes.models.ItemModel getItemModel() -> do
    163:173:boolean canMine(nidefawl.qubes.world.BlockPlacer,nidefawl.qubes.block.Block,nidefawl.qubes.world.World,nidefawl.qubes.vec.BlockPos,nidefawl.qubes.entity.PlayerServer,nidefawl.qubes.item.ItemStack) -> do
nidefawl.qubes.item.ItemGroup -> Ij1L1LJijIlljIJi:
    int NEXT_GROUP_ID -> do
    int id -> if
    java.util.List items -> do
    19:21:void addItem(nidefawl.qubes.item.Item) -> do
    26:26:java.util.List getItems() -> do
    29:29:nidefawl.qubes.item.Item getItem(int) -> do
nidefawl.qubes.item.ItemGroupLog -> lllliJJijIllJijI:
nidefawl.qubes.item.ItemGroupPlank -> JiIj1LL1Ij1LJiiJ:
nidefawl.qubes.item.ItemGroupStones -> IjL1llL1L1L11Lll:
    java.util.List names -> do
nidefawl.qubes.item.ItemLog -> IjiJllL1iJiJiJll:
    int index -> if
nidefawl.qubes.item.ItemRenderer -> JiIjL1llL1jIJiL1:
    nidefawl.qubes.font.FontRenderer font -> do
    33:34:void init() -> do
    37:59:void drawItem(nidefawl.qubes.item.BaseStack,float,float,float,float) -> do
    69:79:void drawItemOverlay(nidefawl.qubes.item.BaseStack,float,float,float,float) -> if
nidefawl.qubes.item.ItemStack -> llll1LjIll1L1LiJ:
    40:43:void read(java.io.DataInput) -> do
    47:50:void write(java.io.DataOutput) -> do
    54:54:boolean isItem() -> do
    61:61:int getItemTexture() -> int
    68:68:nidefawl.qubes.item.Item getItem() -> do
    73:77:nidefawl.qubes.item.BaseStack copy() -> do
    82:87:nidefawl.qubes.nbt.Tag save() -> do
    92:95:boolean isEqualId(nidefawl.qubes.item.BaseStack) -> if
    98:101:boolean isFullyEqual(nidefawl.qubes.item.BaseStack) -> do
    105:105:nidefawl.qubes.block.Block getBlock() -> do
    109:109:java.lang.String toString() -> toString
    114:114:int getTypeHash() -> do
nidefawl.qubes.item.ItemStone -> L1jIL1L1jIiJll1L:
    int index -> if
nidefawl.qubes.item.StackData -> JiIj1LjIJiJi:
    nidefawl.qubes.chunk.blockdata.BlockData data -> do
    27:28:void setBlockData(nidefawl.qubes.chunk.blockdata.BlockData) -> do
    30:30:nidefawl.qubes.chunk.blockdata.BlockData getBlockData() -> do
    35:48:void read(java.io.DataInput) -> do
    52:63:void write(java.io.DataOutput) -> do
    66:66:nidefawl.qubes.item.StackData copy() -> do
    70:70:boolean isEqual(nidefawl.qubes.item.StackData,nidefawl.qubes.item.StackData) -> do
nidefawl.qubes.lighting.DynamicLight -> llllllL11LL1L1ll:
    nidefawl.qubes.vec.Vector3f pos -> do
    nidefawl.qubes.vec.Vector3f lastPos -> if
    nidefawl.qubes.vec.Vector3f mot -> for
    nidefawl.qubes.vec.Vector3f lastMot -> int
    nidefawl.qubes.vec.Vector3f renderPos -> new
    nidefawl.qubes.vec.Vector3f color -> try
    float intensity -> do
    float quadratic -> if
    float lightThreshold -> for
    float radius -> int
    int ticks -> do
    30:32:void setPos(nidefawl.qubes.vec.Vector3f) -> do
    34:39:void tickUpdate(nidefawl.qubes.world.WorldClient) -> do
    42:56:void updatePreRender(nidefawl.qubes.world.WorldClient,float) -> do
    59:67:void store(java.nio.FloatBuffer) -> do
nidefawl.qubes.logging.ErrorHandler -> jIJilliJIjIjiJJi:
    nidefawl.qubes.logging.IErrorHandler handler -> do
    8:11:void setException(nidefawl.qubes.util.GameError) -> do
    13:14:void setHandler(nidefawl.qubes.logging.IErrorHandler) -> do
nidefawl.qubes.logging.IErrorHandler -> L1lliJL11LJiiJll:
    void setException(nidefawl.qubes.util.GameError) -> setException
nidefawl.qubes.logging.LogBufferStream -> jIjIIj1LiJ1LiJ:
    java.io.ByteArrayOutputStream baos -> do
    java.io.PrintStream ps -> do
    17:21:void write(byte[],int,int) -> write
    25:26:void write(byte[]) -> write
    30:36:void flush() -> flush
    40:46:void close() -> close
    50:52:void write(int) -> write
    56:60:java.lang.String getLogString() -> do
nidefawl.qubes.meshing.BlockFace -> JiIjIjJi1LiJll1L:
    nidefawl.qubes.meshing.BlockSurface bs -> do
    float[] v0 -> do
    float[] v1 -> if
    float[] v2 -> for
    float[] v3 -> int
    int[] du -> do
    int[] dv -> if
    byte[] normal -> do
    int faceDir -> do
    int[] pos -> for
    int w -> if
    int h -> for
    int[][] faceVDirections -> do
    int[][] faceVDirectionsNeg -> if
    27:30:int encNormal(int,int,int) -> do
    34:41:int encNegNormal(int,int,int) -> if
    47:123:void initDir() -> do
    241:247:int drawBasic(nidefawl.qubes.meshing.BlockFaceAttr,nidefawl.qubes.gl.VertexBuffer) -> do
    259:275:int drawShadowTextured(nidefawl.qubes.meshing.BlockFaceAttr,nidefawl.qubes.gl.VertexBuffer) -> if
    279:351:int draw(nidefawl.qubes.meshing.BlockFaceAttr,nidefawl.qubes.gl.VertexBuffer) -> for
    355:390:void setUV(nidefawl.qubes.meshing.BlockFaceVert,int) -> do
nidefawl.qubes.meshing.BlockFaceAttr -> IjIjIjiJL1L11L:
    java.lang.String[] attributes -> do
    nidefawl.qubes.meshing.BlockFaceVert v0 -> do
    nidefawl.qubes.meshing.BlockFaceVert v1 -> if
    nidefawl.qubes.meshing.BlockFaceVert v2 -> for
    nidefawl.qubes.meshing.BlockFaceVert v3 -> int
    nidefawl.qubes.meshing.BlockFaceVert[] v -> do
    boolean useGlobalRenderOffset -> do
    int tex -> do
    float xOff -> do
    float yOff -> if
    float zOff -> for
    int aoMask -> if
    int lightMaskSky -> for
    int lightMaskBlock -> int
    int type -> new
    boolean reverse -> if
    int faceDir -> try
    int normalMap -> byte
    int roughness -> case
    54:55:void setUseGlobalRenderOffset(boolean) -> do
    58:59:void setTex(int) -> do
    62:63:void setNormalMap(int) -> if
    66:73:void setOffset(float,float,float) -> do
    75:78:void addOffset(float,float,float) -> if
    81:88:void setNormal(int,int,int) -> do
    91:93:void setLight(int,int) -> do
    98:135:void rotateUV(int) -> for
    138:152:void putSingleVert(int,nidefawl.qubes.gl.VertexBuffer) -> do
    154:161:void putShadowTexturedSingleVert(int,nidefawl.qubes.gl.VertexBuffer) -> if
    164:169:void putBasicSingleVert(int,nidefawl.qubes.gl.VertexBuffer) -> for
    172:191:void putVertAttr(nidefawl.qubes.gl.VertexBuffer) -> do
    194:205:void putFaceAttr(nidefawl.qubes.gl.VertexBuffer) -> if
    208:233:void put(nidefawl.qubes.gl.VertexBuffer) -> for
    237:261:void putFormat2(nidefawl.qubes.gl.VertexBuffer) -> int
    264:280:void putBasic(nidefawl.qubes.gl.VertexBuffer) -> new
    284:302:void putShadowTextured(nidefawl.qubes.gl.VertexBuffer) -> try
    305:306:void setAO(int) -> int
    308:309:void setRoughness(float) -> do
    312:316:void setType(int) -> new
    318:321:void setPass(int) -> try
    323:326:void flipNormal() -> do
    332:333:void setReverse(boolean) -> if
    339:340:void setFaceDir(int) -> byte
    345:345:int getFaceDir() -> do
    352:367:void calcNormal(nidefawl.qubes.vec.Vector3f) -> do
    404:411:int packNormal(nidefawl.qubes.vec.Vector3f) -> do
    419:419:boolean getReverse() -> do
    424:441:void maskLight(int,int,int,int,int) -> do
    444:444:int maskAO(int,int,int,int) -> do
    449:453:int mix_light(int,int,int,int) -> if
nidefawl.qubes.meshing.BlockFaceVert -> IjIjL1JiJiL1L1ll:
    int rgba -> do
    float u -> do
    float v -> if
    float x -> for
    float y -> int
    float z -> new
    int dirOffset -> if
    int normal -> for
    int direction -> int
    int pass -> new
    20:26:void setColorRGBAF(float,float,float,float) -> do
    29:31:void setColorRGBA(int,float) -> do
    34:35:void setColorRGB(int) -> do
    38:40:void setUV(float,float) -> do
    43:46:void setPos(float,float,float) -> do
    49:50:void setFaceVertDir(int) -> if
    52:56:void setDirection(int,int,boolean) -> do
    58:59:void setNoDirection() -> do
    63:75:void setNormal(float,float,float) -> if
    81:82:void setPass(int) -> for
    88:92:void flipNormal() -> if
nidefawl.qubes.meshing.BlockRenderer -> L11LL1L1jIiJJiL1:
    int[][] offsets -> do
    nidefawl.qubes.meshing.BlockSurface bs -> do
    nidefawl.qubes.vec.AABBFloat bb -> do
    int shadowDrawMode -> do
    boolean extendFaces -> do
    nidefawl.qubes.world.IBlockWorld w -> do
    nidefawl.qubes.meshing.BlockFaceAttr attr -> do
    nidefawl.qubes.gl.VertexBuffer[] vbuffer -> do
    boolean[] wallDir -> do
    boolean[] fenceDir -> if
    int[] paneDir -> do
    int[] quarters -> if
    int[] quarters2 -> for
    nidefawl.qubes.vec.AABBFloat[] boxes -> do
    nidefawl.qubes.meshing.BlockSurface[] qSurfacesS -> do
    nidefawl.qubes.meshing.BlockSurface[] qSurfaces -> if
    int[] vPos_model -> int
    int[] vIdx_model -> new
    nidefawl.qubes.vec.Vector3f plantNormal -> do
    81:82:void setDefaultBounds() -> do
    89:92:void preRender(nidefawl.qubes.world.World,nidefawl.qubes.meshing.ChunkRenderCache,nidefawl.qubes.meshing.BlockFaceAttr) -> do
    98:100:void setBuffers(nidefawl.qubes.gl.VertexBuffer[],int) -> do
    108:188:int render(int,int,int) -> do
    201:215:int renderWaterLily(nidefawl.qubes.block.Block,int,int,int,int) -> try
    219:219:int setPaneConnections(nidefawl.qubes.world.IBlockWorld,int,int,int,int[]) -> do
    222:348:int renderPane(nidefawl.qubes.block.Block,int,int,int,int) -> byte
    352:468:int renderTorch(nidefawl.qubes.block.Block,int,int,int) -> do
    472:472:int setWallConnections(nidefawl.qubes.world.IBlockWorld,int,int,int,boolean[]) -> do
    475:551:int renderWall(nidefawl.qubes.block.Block,int,int,int,int) -> do
    554:554:int setFenceConnections(nidefawl.qubes.world.IBlockWorld,int,int,int,boolean[]) -> if
    565:619:int renderFence(nidefawl.qubes.block.Block,int,int,int,int) -> if
    631:693:int renderVines(nidefawl.qubes.block.Block,int,int,int,int) -> for
    697:706:void renderXNeg(nidefawl.qubes.block.Block,float,float,float) -> do
    709:718:void renderXPos(nidefawl.qubes.block.Block,float,float,float) -> if
    720:729:void renderZNeg(nidefawl.qubes.block.Block,float,float,float) -> for
    731:740:void renderZPos(nidefawl.qubes.block.Block,float,float,float) -> int
    742:753:void renderYPos(nidefawl.qubes.block.Block,float,float,float) -> new
    757:766:void renderYNeg(nidefawl.qubes.block.Block,float,float,float) -> try
    769:790:int renderFace(nidefawl.qubes.block.Block,int,float,float,float,int) -> do
    800:808:void putSingleVert(nidefawl.qubes.block.Block,int,int) -> do
    811:815:void putTriIndex(nidefawl.qubes.block.Block,int,int[],int,int) -> do
    817:825:void putBuffer(nidefawl.qubes.block.Block,int) -> do
    828:911:int renderSlicedFaces(nidefawl.qubes.block.BlockSliced,int,int,int) -> do
    914:955:int renderPlantFlat(nidefawl.qubes.block.Block,int,int,int,int) -> case
    959:963:int renderBlock(nidefawl.qubes.block.Block,int,int,int,int,int) -> do
    968:1014:int renderBlockModel(nidefawl.qubes.block.Block,int,int,int,int,int) -> if
    1036:1047:void flipFace() -> if
    1051:1075:void setFaceColorTexture(nidefawl.qubes.block.Block,int,int,int,int,nidefawl.qubes.meshing.BlockSurface,int,int) -> do
    1077:1079:void setFaceColor(nidefawl.qubes.block.Block,int,int,int,int,nidefawl.qubes.meshing.BlockSurface,int) -> do
    1088:1092:void setBlockBounds(nidefawl.qubes.block.Block,int,int,int) -> do
    1095:1101:int getAndRenderBlockFace(nidefawl.qubes.block.Block,int,int,int,int,int,int,int) -> do
    1106:1138:nidefawl.qubes.meshing.BlockSurface getSingleBlockSurface(nidefawl.qubes.block.Block,int,int,int,int,int,boolean,nidefawl.qubes.meshing.BlockSurface,int) -> do
    1142:1154:boolean hasAnyOpenNeighbour(nidefawl.qubes.block.Block,int,int,int,int) -> do
    1157:1399:int renderLeaves(nidefawl.qubes.block.Block,int,int,int,int) -> int
    1433:1433:int renderDoublePlant(nidefawl.qubes.block.Block,int,int,int,int) -> char
    1438:1657:int renderPlant(nidefawl.qubes.block.Block,int,int,int,int) -> new
    1661:1661:boolean isInventoryBlockRender() -> do
nidefawl.qubes.meshing.BlockSurface -> iJjI1LiJ1LjIL1Ji:
    boolean transparent -> do
    int type -> do
    int face -> if
    int axis -> for
    int x -> int
    int y -> new
    int z -> try
    int pass -> byte
    boolean extraFace -> if
    boolean resolved -> for
    boolean calcLight -> int
    int maskedLightSky -> case
    int maskedLightBlock -> char
    int maskedAO -> else
    boolean isAirAbove -> new
    int texture -> goto
    boolean renderTypeTransition -> try
    int faceColor -> long
    int[][] offset -> do
    32:32:int maskAO(int,int,int,int) -> do
    36:40:int mix_light(int,int,int,int) -> if
    43:62:void maskLight(int,int,int,int,nidefawl.qubes.block.Block) -> do
    88:109:void calcAO(nidefawl.qubes.world.IBlockWorld) -> do
    112:119:int vertexAO(boolean,boolean,boolean) -> do
    131:138:boolean isOccludingAt(nidefawl.qubes.world.IBlockWorld,int,int,int) -> do
    142:192:void calcPosZ(nidefawl.qubes.world.IBlockWorld) -> if
    195:246:void calcNegZ(nidefawl.qubes.world.IBlockWorld) -> for
    249:298:void calcPosX(nidefawl.qubes.world.IBlockWorld) -> int
    300:349:void calcNegX(nidefawl.qubes.world.IBlockWorld) -> new
    352:403:void calcPosY(nidefawl.qubes.world.IBlockWorld) -> try
    405:455:void calcNegY(nidefawl.qubes.world.IBlockWorld) -> byte
    459:490:boolean mergeWith(nidefawl.qubes.meshing.ChunkRenderCache,nidefawl.qubes.meshing.BlockSurface) -> do
    494:521:void resolve(nidefawl.qubes.meshing.ChunkRenderCache) -> do
    524:541:void reset() -> do
    543:562:nidefawl.qubes.meshing.BlockSurface copy() -> do
nidefawl.qubes.meshing.BlockSurfaceAir -> jIJill1LiJjIlliJ:
    11:11:nidefawl.qubes.meshing.BlockSurface copy() -> do
nidefawl.qubes.meshing.BlockSurfaceHidden -> IjIjJiIjjIL1jIL1:
    17:17:nidefawl.qubes.meshing.BlockSurface copy() -> do
nidefawl.qubes.meshing.ChunkRenderCache -> jIL1IjIjlliJlljI:
    nidefawl.qubes.chunk.Chunk[] chunks -> do
    nidefawl.qubes.world.WorldClient world -> do
    int baseX -> do
    int baseZ -> if
    32:33:void set(int,int,nidefawl.qubes.chunk.Chunk) -> do
    36:36:nidefawl.qubes.chunk.Chunk get(int,int) -> do
    40:41:void flush() -> do
    44:48:int getData(int,int,int) -> do
    53:57:nidefawl.qubes.chunk.blockdata.BlockData getBlockData(int,int,int) -> do
    63:67:int getType(int,int,int) -> if
    72:76:int getWater(int,int,int) -> for
    81:85:int getLight(int,int,int) -> int
    95:133:boolean cache(nidefawl.qubes.world.WorldClient,nidefawl.qubes.render.region.MeshedRegion,int,int) -> do
    137:137:nidefawl.qubes.chunk.Chunk getWest() -> do
    140:140:nidefawl.qubes.chunk.Chunk getEast() -> if
    143:143:nidefawl.qubes.chunk.Chunk getNorth() -> for
    146:146:nidefawl.qubes.chunk.Chunk getSouth() -> int
    166:169:boolean isNormalBlock(int,int,int,int) -> do
    174:174:boolean setTypeData(int,int,int,int,int,int) -> do
    183:183:int getBiomeFaceColor(int,int,int,int,int,nidefawl.qubes.biome.BiomeColor) -> do
nidefawl.qubes.meshing.MeshThread -> IjIjllL1llL1Ij:
    long sleepTime -> do
    java.util.concurrent.LinkedBlockingQueue queue -> do
    java.util.LinkedList results -> do
    java.util.LinkedList finish -> if
    boolean hasResults -> do
    boolean isRunning -> if
    boolean finished -> for
    nidefawl.qubes.meshing.MeshUpdateTask[] tasks -> do
    java.lang.Thread[] threads -> do
    int tasksRunning -> do
    int id -> if
    38:49:void init() -> do
    54:86:void run() -> run
    92:109:nidefawl.qubes.render.region.MeshedRegion finishTask() -> do
    114:123:boolean offer(nidefawl.qubes.world.WorldClient,nidefawl.qubes.render.region.MeshedRegion,int,int) -> do
    127:127:boolean busy() -> do
    131:131:boolean hasTasks() -> if
    135:140:nidefawl.qubes.meshing.MeshUpdateTask getNextTask() -> do
    146:147:void flush() -> if
    150:176:void stopThread() -> for
    179:179:boolean isRunning() -> for
    183:190:void cleanup() -> int
nidefawl.qubes.meshing.MeshUpdateTask -> Ji1LL1lljIL11LJi:
    nidefawl.qubes.meshing.Mesher mesher -> do
    nidefawl.qubes.meshing.BlockRenderer blockRenderer -> do
    nidefawl.qubes.meshing.ChunkRenderCache ccache -> do
    nidefawl.qubes.meshing.BlockFaceAttr attr -> do
    int worldInstance -> do
    boolean meshed -> do
    nidefawl.qubes.render.region.MeshedRegion mr -> do
    nidefawl.qubes.gl.VertexBuffer[] vbuffer -> do
    int shadowDrawMode -> if
    47:55:boolean prepare(nidefawl.qubes.world.WorldClient,nidefawl.qubes.render.region.MeshedRegion,int,int) -> do
    59:101:boolean finish(int) -> do
    105:105:boolean isValid(int) -> if
    109:175:boolean updateFromThread() -> do
    180:180:nidefawl.qubes.render.region.MeshedRegion getRegion() -> do
    184:184:void destroy() -> do
nidefawl.qubes.meshing.Mesher -> JiiJJi1LllJiiJjI:
    int[] dims -> do
    nidefawl.qubes.meshing.BlockSurface[] mask2 -> do
    nidefawl.qubes.meshing.BlockSurfaceAir air -> do
    nidefawl.qubes.meshing.BlockSurfaceHidden hidden -> do
    short[] renderTypeBlocks -> do
    int nextBlockIDX -> for
    nidefawl.qubes.meshing.BlockSurface[] scratchPad -> if
    int scratchpadidx -> do
    java.util.List[] meshes -> do
    nidefawl.qubes.meshing.BlockSurface bs1 -> do
    nidefawl.qubes.meshing.BlockSurface bs2 -> if
    nidefawl.qubes.vec.AABBFloat fullBB -> do
    nidefawl.qubes.meshing.BlockSurface[] extraWaterFaces -> for
    int extraIdx -> int
    nidefawl.qubes.meshing.ChunkRenderCache cache -> do
    int strategy -> new
    int yPos -> try
    int ySlice -> byte
    int avgUsage -> if
    45:55:int computeHeight(int,int,int,int,int,int,nidefawl.qubes.meshing.BlockSurface) -> do
    65:172:void setMask2(int,int[],int[],int) -> do
    181:202:void mesh(nidefawl.qubes.meshing.ChunkRenderCache,int) -> do
    205:309:void meshRound(nidefawl.qubes.meshing.ChunkRenderCache) -> do
    314:389:nidefawl.qubes.meshing.BlockSurface getBlockSurface(int,int,int,int,int) -> do
    394:396:nidefawl.qubes.meshing.BlockSurface next() -> do
    402:402:java.util.List getMeshes(int) -> do
    411:411:int getRenderType1Blocks() -> do
    421:421:short getBlockPos(int) -> do
nidefawl.qubes.models.BlockModelManager -> JillllJiJiIj1L:
    nidefawl.qubes.models.BlockModelManager instance -> do
    java.util.HashMap models -> do
    java.util.HashMap textures -> if
    20:20:nidefawl.qubes.models.BlockModelManager getInstance() -> do
    28:28:void init() -> do
    33:87:void reload() -> if
nidefawl.qubes.models.EntityModel -> JiL1IjJiIjL1iJll:
    int HIGHEST_MODEL_ID -> do
    nidefawl.qubes.models.EntityModel[] registeredmodels -> if
    short[] registeredmodelIds -> do
    nidefawl.qubes.models.EntityModel[] models -> do
    nidefawl.qubes.models.EntityModel modelPlayerMale -> do
    nidefawl.qubes.models.EntityModel modelPlayerFemale -> if
    nidefawl.qubes.models.EntityModel modelArcher -> for
    nidefawl.qubes.models.EntityModel modelWarrior -> int
    nidefawl.qubes.models.EntityModel modelSkeleton -> new
    nidefawl.qubes.models.EntityModel modelZombie -> try
    nidefawl.qubes.models.EntityModel modelDemon -> byte
    nidefawl.qubes.models.EntityModel modelCat -> case
    nidefawl.qubes.models.EntityModel modelCow -> char
    nidefawl.qubes.models.EntityModel modelChicken -> else
    nidefawl.qubes.models.EntityModel modelDog -> goto
    nidefawl.qubes.models.EntityModel modelDuck -> long
    nidefawl.qubes.models.EntityModel modelGoat -> this
    nidefawl.qubes.models.EntityModel modelPig -> void
    nidefawl.qubes.models.EntityModel modelPony -> break
    nidefawl.qubes.models.EntityModel modelPuppy -> catch
    nidefawl.qubes.models.EntityModel modelSheep -> class
    nidefawl.qubes.models.EntityModel modelTest -> const
    int id -> if
    java.lang.String modelPath -> do
    java.lang.String name -> if
    nidefawl.qubes.models.qmodel.loader.ModelLoaderQModel loader -> do
    nidefawl.qubes.models.qmodel.ModelQModel model -> do
    java.util.List modelOptions -> do
    java.util.ArrayList actions -> do
    59:72:void preInit() -> do
    75:75:void postInit() -> if
    94:96:int addOption(nidefawl.qubes.models.ModelOption) -> do
    100:101:nidefawl.qubes.models.EntityModel setModelPath(java.lang.String) -> do
    105:105:java.lang.String getModelFile() -> do
    void setPose(nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelProperties,float,float) -> do
    121:124:void setModel(nidefawl.qubes.models.qmodel.loader.ModelLoaderQModel) -> do
    127:127:void onLoad(nidefawl.qubes.models.qmodel.ModelQModel) -> do
    130:130:java.lang.String getName() -> if
    135:140:nidefawl.qubes.models.qmodel.QModelObject getObject(java.util.List,java.lang.String) -> do
    143:143:java.util.List getModelOptions() -> do
    147:147:java.util.List getActions() -> if
    151:151:void setActions(nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelProperties,float,float) -> if
    153:153:nidefawl.qubes.models.qmodel.animation.QModelAction getIdle() -> do
nidefawl.qubes.models.EntityModelAnimal -> ll1LJi1LJijIjI1L:
    nidefawl.qubes.models.qmodel.QModelObject main -> do
    nidefawl.qubes.models.ModelOption texSkin -> do
    nidefawl.qubes.vec.Matrix4f matDeform -> if
    nidefawl.qubes.vec.Matrix4f rotation -> do
    30:36:void setActions(nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelProperties,float,float) -> if
    40:71:void setPose(nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelProperties,float,float) -> do
    74:109:void onLoad(nidefawl.qubes.models.qmodel.ModelQModel) -> do
nidefawl.qubes.models.EntityModelArcher -> jIiJL1jIIjiJJijI:
    nidefawl.qubes.models.ModelOption texSkin -> do
    nidefawl.qubes.models.ModelOption modelHelmet -> if
    nidefawl.qubes.models.ModelOption texHelmet -> for
    nidefawl.qubes.models.ModelOption modelShoulders -> int
    nidefawl.qubes.models.ModelOption texShoulders -> new
    nidefawl.qubes.models.ModelOption modelBracers -> try
    nidefawl.qubes.models.ModelOption texBracers -> byte
    nidefawl.qubes.models.ModelOption modelShield -> case
    nidefawl.qubes.models.ModelOption texShield -> char
    nidefawl.qubes.models.ModelOption modelWeapon -> else
    boolean isMale -> do
    java.util.List listBracers -> if
    java.util.List listShoulders -> for
    java.util.List listShields -> int
    java.util.List listHelmets -> new
    java.util.List listWeapon -> try
    java.util.Map optNameToMat -> do
    java.util.Map optNameToOptTexMap -> if
    java.util.Map defaultSettings -> for
    nidefawl.qubes.models.qmodel.QModelObject main_0 -> do
    boolean isArcher -> if
    nidefawl.qubes.models.qmodel.animation.QModelAction idle1 -> do
    nidefawl.qubes.models.qmodel.animation.QModelAction walk -> if
    nidefawl.qubes.models.qmodel.animation.QModelAction idle2 -> for
    59:112:void onLoad(nidefawl.qubes.models.qmodel.ModelQModel) -> do
    116:137:void setActions(nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelProperties,float,float) -> if
    140:177:void setPose(nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelProperties,float,float) -> do
    179:186:void attach(nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelProperties,java.util.List,nidefawl.qubes.models.ModelOption,nidefawl.qubes.models.ModelOption) -> do
    188:197:void attach2(nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelProperties,java.util.List,nidefawl.qubes.models.ModelOption,nidefawl.qubes.models.ModelOption) -> if
nidefawl.qubes.models.EntityModelDemon -> L1ll1LiJJiiJllL1:
    boolean isMale -> do
    nidefawl.qubes.models.ModelOption modelArmor -> do
    nidefawl.qubes.models.ModelOption texSkin -> if
    java.util.ArrayList armors -> if
    nidefawl.qubes.models.qmodel.QModelObject main -> do
    nidefawl.qubes.models.qmodel.animation.QModelAction walk -> do
    nidefawl.qubes.models.qmodel.animation.QModelAction run -> if
    nidefawl.qubes.models.qmodel.animation.QModelAction idle1 -> for
    33:77:void onLoad(nidefawl.qubes.models.qmodel.ModelQModel) -> do
    81:102:void setActions(nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelProperties,float,float) -> if
    105:136:void setPose(nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelProperties,float,float) -> do
nidefawl.qubes.models.EntityModelManager -> iJiJIjjI1LIjiJIj:
    nidefawl.qubes.models.EntityModelManager instance -> do
    java.util.HashMap models -> do
    19:19:nidefawl.qubes.models.EntityModelManager getInstance() -> do
    29:69:void reload() -> do
nidefawl.qubes.models.EntityModelPlayer -> IjiJllJiJiL1Ij:
    nidefawl.qubes.vec.Matrix4f modelMat -> do
    nidefawl.qubes.vec.Matrix4f normalMat -> if
    boolean isMale -> do
    java.util.ArrayList hats -> if
    java.util.ArrayList beards -> for
    java.util.ArrayList hairs -> int
    java.util.ArrayList bags -> new
    nidefawl.qubes.models.ModelOption modelSize -> do
    nidefawl.qubes.models.ModelOption texSkin -> if
    nidefawl.qubes.models.ModelOption texFace -> for
    nidefawl.qubes.models.ModelOption modelHair -> int
    nidefawl.qubes.models.ModelOption texHair -> new
    nidefawl.qubes.models.ModelOption modelBeard -> try
    nidefawl.qubes.models.ModelOption texBeard -> byte
    nidefawl.qubes.models.ModelOption modelHat -> case
    nidefawl.qubes.models.ModelOption texHat -> char
    nidefawl.qubes.models.ModelOption modelBag -> else
    nidefawl.qubes.models.ModelOption texBag -> goto
    nidefawl.qubes.models.qmodel.QModelObject main_0 -> do
    nidefawl.qubes.models.qmodel.QModelObject main_1 -> if
    nidefawl.qubes.models.qmodel.QModelObject main_2 -> for
    nidefawl.qubes.models.qmodel.QModelObject[] body -> do
    nidefawl.qubes.models.qmodel.animation.QModelAction run -> do
    nidefawl.qubes.models.qmodel.animation.QModelAction jump -> if
    nidefawl.qubes.models.qmodel.animation.QModelAction hit1 -> for
    nidefawl.qubes.models.qmodel.animation.QModelAction idle -> int
    50:50:nidefawl.qubes.models.qmodel.animation.QModelAction getIdle() -> do
    66:71:nidefawl.qubes.models.qmodel.QModelObject getObject(java.util.List,java.lang.String) -> do
    75:174:void onLoad(nidefawl.qubes.models.qmodel.ModelQModel) -> do
    178:200:void setActions(nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelProperties,float,float) -> if
    205:268:void setPose(nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelProperties,float,float) -> do
    273:280:void attach(nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelProperties,java.util.ArrayList,nidefawl.qubes.models.ModelOption,nidefawl.qubes.models.ModelOption) -> do
nidefawl.qubes.models.EntityModelSkeleton -> jIllllL1jIiJIjll:
    boolean isMale -> do
    nidefawl.qubes.models.ModelOption modelSel -> do
    nidefawl.qubes.models.ModelOption texSkin -> if
    java.util.List modelList -> if
    nidefawl.qubes.models.qmodel.animation.QModelAction walk -> do
    nidefawl.qubes.models.qmodel.animation.QModelAction idle1 -> if
    nidefawl.qubes.models.qmodel.animation.QModelAction idle2 -> for
    nidefawl.qubes.models.qmodel.animation.QModelAction attack1 -> int
    32:75:void onLoad(nidefawl.qubes.models.qmodel.ModelQModel) -> do
    79:89:void setActions(nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelProperties,float,float) -> if
    93:121:void setPose(nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelProperties,float,float) -> do
nidefawl.qubes.models.EntityModelTest -> jIiJL1lljIjIIjIj:
    nidefawl.qubes.vec.Matrix4f modelMat -> do
    nidefawl.qubes.vec.Matrix4f normalMat -> if
    boolean isMale -> do
    java.util.ArrayList headThings -> if
    nidefawl.qubes.models.ModelOption modelHeadThing -> do
    nidefawl.qubes.models.qmodel.QModelObject main_0 -> do
    nidefawl.qubes.models.qmodel.QModelObject test1 -> if
    34:39:nidefawl.qubes.models.qmodel.QModelObject getObject(java.util.List,java.lang.String) -> do
    43:59:void onLoad(nidefawl.qubes.models.qmodel.ModelQModel) -> do
    64:91:void setPose(nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelProperties,float,float) -> do
    94:102:void attach(nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelProperties,java.util.ArrayList,nidefawl.qubes.models.ModelOption,nidefawl.qubes.models.ModelOption) -> do
nidefawl.qubes.models.EntityModelZombie -> Jill1LJiL1IjJiJi:
    boolean isMale -> do
    nidefawl.qubes.models.ModelOption modelSel -> do
    nidefawl.qubes.models.ModelOption texSkin -> if
    java.util.List modelList -> if
    nidefawl.qubes.models.qmodel.animation.QModelAction walk -> do
    nidefawl.qubes.models.qmodel.animation.QModelAction walk2 -> if
    nidefawl.qubes.models.qmodel.animation.QModelAction idle1 -> for
    nidefawl.qubes.models.qmodel.animation.QModelAction idle2 -> int
    35:67:void onLoad(nidefawl.qubes.models.qmodel.ModelQModel) -> do
    70:80:void setActions(nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelProperties,float,float) -> if
    85:113:void setPose(nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelProperties,float,float) -> do
nidefawl.qubes.models.ItemModel -> IjiJjIjIiJJiIjll:
    int HIGHEST_MODEL_ID -> do
    nidefawl.qubes.models.ItemModel[] registeredmodels -> if
    short[] registeredmodelIds -> do
    nidefawl.qubes.models.ItemModel[] model -> do
    nidefawl.qubes.models.ItemModel modelPickaxe -> do
    nidefawl.qubes.models.ItemModel modelAxe -> if
    int id -> if
    java.lang.String[] models -> do
    java.lang.String[] textures -> if
    nidefawl.qubes.models.qmodel.ModelQModel[] loadedModels -> do
    java.lang.String name -> do
    33:54:void preInit() -> do
    57:57:void postInit() -> if
    75:76:nidefawl.qubes.models.ItemModel setModels(java.lang.String[]) -> do
    80:80:java.lang.String[] getModels() -> do
nidefawl.qubes.models.ItemModelManager -> L11LiJIjL1JiIjll:
    nidefawl.qubes.models.ItemModelManager instance -> do
    java.util.HashMap models -> do
    22:22:nidefawl.qubes.models.ItemModelManager getInstance() -> do
    29:29:void init() -> do
    34:75:void reload() -> if
nidefawl.qubes.models.ModelOption -> jIllJiIjL11LL1jI:
    java.lang.String name -> do
    java.lang.String[] options -> do
    nidefawl.qubes.models.EntityModel eModel -> do
    int id -> do
    int defaultVal -> if
    15:16:nidefawl.qubes.models.ModelOption setOptions(java.lang.String[]) -> do
    22:35:nidefawl.qubes.models.ModelOption setOptionCount(java.lang.String,int) -> do
    38:38:java.lang.String getTextVal(int) -> do
    41:41:java.lang.String[] getOptions() -> do
    44:44:int getId() -> do
    47:47:java.lang.String getName() -> do
    50:51:void setDefaultVal(int) -> do
    53:53:int getDefaultVal() -> if
nidefawl.qubes.models.qmodel.ModelBlock -> iJjIjIJijIIjJijI:
    nidefawl.qubes.models.qmodel.QModelGroup[] faceGroups -> do
    nidefawl.qubes.gl.VertexBuffer vBuf -> do
    boolean needsDraw -> do
    long reRender -> do
    nidefawl.qubes.vec.Vector3f tmpVec -> do
    70:120:void render(int,int,float) -> do
nidefawl.qubes.models.qmodel.ModelQModel -> JiIjL11LL11LL1L1:
    nidefawl.qubes.models.qmodel.loader.ModelLoaderQModel loader -> do
    nidefawl.qubes.models.qmodel.ModelQModel$ModelRenderObject[] objects -> do
    nidefawl.qubes.gl.VertexBuffer vbuf -> if
    nidefawl.qubes.vec.Vector3f tmpVec -> if
    nidefawl.qubes.vec.Vector3f tmpVec2 -> for
    nidefawl.qubes.vec.Matrix4f tmpMat1 -> do
    nidefawl.qubes.vec.Matrix4f tmpMat2 -> if
    boolean needsDraw -> if
    82:92:void release() -> do
    103:103:void animate(nidefawl.qubes.models.qmodel.QModelProperties,float,float) -> do
    109:109:void animateNodes(nidefawl.qubes.models.qmodel.QModelProperties,float,float) -> if
    117:117:void setHeadOrientation(float,float) -> do
    void render(int,int,float) -> do
    125:191:void renderRestModel(nidefawl.qubes.models.qmodel.QModelObject,nidefawl.qubes.models.qmodel.QModelGroup,int) -> do
    194:209:void bindTextures(int) -> do
    213:217:nidefawl.qubes.models.qmodel.ModelQModel$ModelRenderObject getGroup(int) -> do
    221:221:java.util.List getObjects() -> do
nidefawl.qubes.models.qmodel.ModelQModel$ModelRenderGroup -> IjJillllL1IjIjJi:
    nidefawl.qubes.gl.GLTriBuffer gpuBufRest -> do
    nidefawl.qubes.gl.GLTriBuffer gpuBuf -> if
    long reRender -> do
    48:56:void release() -> do
nidefawl.qubes.models.qmodel.ModelQModel$ModelRenderObject -> iJL1iJL1ll1LiJ1L:
    java.util.List list -> do
    61:65:void release() -> do
    67:70:nidefawl.qubes.models.qmodel.ModelQModel$ModelRenderGroup getGroup(int) -> do
nidefawl.qubes.models.qmodel.ModelRigged -> jIiJ1LjI1L1LIjL1:
    nidefawl.qubes.models.qmodel.QModelPoseBone rootJoint -> do
    java.util.ArrayList poseBones -> do
    nidefawl.qubes.models.qmodel.QModelPoseBone head -> if
    nidefawl.qubes.models.qmodel.QModelPoseBone neck -> for
    nidefawl.qubes.models.qmodel.QModelNode weaponSlot -> do
    76:80:nidefawl.qubes.models.qmodel.QModelPoseBone getPoseBone(nidefawl.qubes.models.qmodel.QModelBone) -> do
    88:100:void animate(nidefawl.qubes.models.qmodel.QModelProperties,float,float) -> do
    106:123:void animateNodes(nidefawl.qubes.models.qmodel.QModelProperties,float,float) -> if
    130:139:nidefawl.qubes.vec.Matrix4f buildFinalPose(nidefawl.qubes.models.qmodel.QModelObject,nidefawl.qubes.models.qmodel.QModelVertex) -> do
    159:250:void render(int,int,float) -> do
    256:362:void setHeadOrientation(float,float) -> do
nidefawl.qubes.models.qmodel.ModelStatic -> jIIj1LIjllJillJi:
    30:79:void render(int,int,float) -> do
nidefawl.qubes.models.qmodel.QModelAbstractNode -> L1L1iJjIL1L11Lll:
    12:20:int readParentType(nidefawl.qubes.models.qmodel.loader.ModelLoaderQModel) -> do
    nidefawl.qubes.vec.Matrix4f getMatDeform() -> do
    nidefawl.qubes.vec.Matrix4f getMatDeformNormal() -> if
nidefawl.qubes.models.qmodel.QModelBone -> iJjIlljIllL1Jill:
    int idx -> do
    int flags -> if
    java.lang.String name -> do
    java.lang.String parentName -> if
    nidefawl.qubes.vec.Matrix4f matRest -> do
    nidefawl.qubes.vec.Matrix4f matRestInv -> if
    java.util.List children -> do
    nidefawl.qubes.vec.Vector3f tailLocal -> do
    nidefawl.qubes.models.qmodel.QModelBone parent -> do
    nidefawl.qubes.models.qmodel.QModelPoseBone posebone -> do
    float boneLength -> do
    57:58:void addChild(nidefawl.qubes.models.qmodel.QModelBone) -> do
    69:69:boolean isDeform() -> do
    75:75:boolean isConnected() -> if
    79:79:java.lang.String stringInfo() -> do
    83:83:java.lang.String toString() -> toString
nidefawl.qubes.models.qmodel.QModelGroup -> L1IjjIJiiJjIJiiJ:
    int idx -> do
    int flags -> if
    java.lang.String name -> do
    int[] triIdx -> do
    int materialIdx -> for
    nidefawl.qubes.models.qmodel.QModelMaterial material -> do
    java.util.List listTri -> do
    boolean isSkinned -> do
    46:46:java.lang.String toString() -> toString
nidefawl.qubes.models.qmodel.QModelMaterial -> L1JiiJlljIll1Lll:
    java.lang.String name -> do
    nidefawl.qubes.vec.Vector4f ambient -> do
    nidefawl.qubes.vec.Vector4f diffuse -> if
    nidefawl.qubes.vec.Vector4f specular -> for
    nidefawl.qubes.vec.Vector4f emissive -> int
    float specular_hardness -> do
    float transparency -> if
    int mode -> do
    int idx -> if
    int[] textureIdxs -> do
    nidefawl.qubes.models.qmodel.QModelTexture[] qTextures -> do
    nidefawl.qubes.models.qmodel.QModelTexture bound -> do
    54:61:void resolveTextures(nidefawl.qubes.models.qmodel.loader.ModelLoaderQModel) -> do
    64:65:void setBoundTexture(nidefawl.qubes.models.qmodel.QModelTexture) -> do
    69:75:nidefawl.qubes.models.qmodel.QModelTexture getBoundTexture() -> do
nidefawl.qubes.models.qmodel.QModelNode -> L1JiL11LJiJi:
    int idx -> do
    java.lang.String name -> do
    java.lang.String parent_name -> if
    int parent_type -> if
    nidefawl.qubes.models.qmodel.QModelBone attachmentBone -> do
    nidefawl.qubes.models.qmodel.QModelAbstractNode attachmentEmpty -> do
    nidefawl.qubes.vec.Matrix4f matDeform -> do
    nidefawl.qubes.vec.Matrix4f matDeformNormal -> if
    nidefawl.qubes.vec.Matrix4f localMat -> for
    42:42:java.lang.String toString() -> toString
    47:53:void resolveParent(nidefawl.qubes.models.qmodel.loader.ModelLoaderQModel) -> do
    58:66:void updateNormalMat() -> do
    77:77:nidefawl.qubes.models.qmodel.QModelBone getAttachmentBone() -> do
    83:83:nidefawl.qubes.vec.Matrix4f getMatDeform() -> do
    89:89:nidefawl.qubes.vec.Matrix4f getMatDeformNormal() -> if
nidefawl.qubes.models.qmodel.QModelObject -> iJJiL1iJlljIL1L1:
    int idx -> do
    int type -> if
    java.lang.String name -> do
    java.lang.String parent_name -> if
    int parent_type -> for
    nidefawl.qubes.models.qmodel.QModelBone attachmentBone -> do
    nidefawl.qubes.models.qmodel.QModelAbstractNode attachmentEmpty -> do
    nidefawl.qubes.vec.Matrix4f matDeform -> do
    nidefawl.qubes.vec.Matrix4f matDeformNormal -> if
    java.util.List listVertex -> do
    java.util.List listTri -> if
    java.util.List listGroups -> for
    java.util.List listBones -> int
    boolean isSkinned -> do
    75:75:java.lang.String toString() -> toString
    79:113:void flattenBoneList(nidefawl.qubes.models.qmodel.loader.ModelLoaderQModel) -> do
    116:134:void normalizeWeights(nidefawl.qubes.models.qmodel.loader.ModelLoaderQModel) -> if
    137:148:int getMinBone(nidefawl.qubes.models.qmodel.QModelTriangle) -> do
    153:164:int getMaxBone(nidefawl.qubes.models.qmodel.QModelTriangle) -> if
    169:197:void sortVertices(nidefawl.qubes.models.qmodel.loader.ModelLoaderQModel) -> for
    201:207:void resolveParent(nidefawl.qubes.models.qmodel.loader.ModelLoaderQModel) -> int
    211:217:void resolveGroupMaterials(nidefawl.qubes.models.qmodel.loader.ModelLoaderQModel) -> new
    221:225:void bindTextureIdx(int,int) -> do
    228:236:void updateNormalMat() -> do
    241:241:nidefawl.qubes.models.qmodel.QModelAbstractNode getAttachementNode() -> do
    247:247:nidefawl.qubes.models.qmodel.QModelBone getAttachmentBone() -> do
    251:251:nidefawl.qubes.vec.Matrix4f getMatDeform() -> do
    257:257:nidefawl.qubes.vec.Matrix4f getMatDeformNormal() -> if
    261:262:void setAttachmentEmpty(nidefawl.qubes.models.qmodel.QModelAbstractNode) -> do
nidefawl.qubes.models.qmodel.QModelObject$1 -> jIIj1LIjJijIIj1L:
    nidefawl.qubes.models.qmodel.QModelObject this$0 -> do
    172:194:int compare(nidefawl.qubes.models.qmodel.QModelTriangle,nidefawl.qubes.models.qmodel.QModelTriangle) -> do
    169:169:int compare(java.lang.Object,java.lang.Object) -> compare
nidefawl.qubes.models.qmodel.QModelPoseBone -> L1JiJi1LIjL1Ji1L:
    java.util.List children -> do
    nidefawl.qubes.vec.Matrix4f matDeform -> do
    nidefawl.qubes.vec.Matrix4f matDeformNormal -> if
    nidefawl.qubes.models.qmodel.QModelBone restbone -> do
    nidefawl.qubes.models.qmodel.QModelPoseBone parent -> do
    boolean animate -> do
    35:43:void updateNormalMat() -> do
    48:49:void addChild(nidefawl.qubes.models.qmodel.QModelPoseBone) -> do
    54:54:java.util.List getChildren() -> do
    60:60:boolean isDeform() -> do
    66:66:nidefawl.qubes.vec.Matrix4f getMatRest() -> do
    72:72:nidefawl.qubes.vec.Matrix4f getMatDeform() -> if
    78:78:nidefawl.qubes.vec.Vector3f getTailLocal() -> do
    84:84:boolean isConnected() -> if
    89:89:java.lang.String toString() -> toString
nidefawl.qubes.models.qmodel.QModelProperties -> JiL11L1LjI1LiJjI:
    int[] properties -> do
    nidefawl.qubes.models.qmodel.animation.QModelAction[] actions -> do
    float[] actionOffsets -> do
    float[] actionSpeed -> if
    nidefawl.qubes.vec.Vector3f pos -> do
    nidefawl.qubes.vec.Vector3f rot -> if
    nidefawl.qubes.entity.Entity entity -> do
    nidefawl.qubes.models.qmodel.ModelQModel modelAtt -> do
    25:25:int getOption(int) -> do
    30:31:void clear() -> do
    34:35:void setRot(nidefawl.qubes.vec.Vector3f) -> do
    38:39:void setPos(nidefawl.qubes.vec.Vector3f) -> if
    41:42:void setEntity(nidefawl.qubes.entity.Entity) -> do
    45:46:void setActionOffset(int,float) -> do
    48:49:void setActionSpeed(int,float) -> if
    51:54:void setAction(int,nidefawl.qubes.models.qmodel.animation.QModelAction) -> do
    56:69:int getChannelIdx(java.lang.String) -> do
    72:72:nidefawl.qubes.models.qmodel.animation.QAnimationChannel getActionChannel(int,java.lang.String) -> do
    75:75:nidefawl.qubes.models.qmodel.animation.QModelAction getAction(int) -> do
    78:78:float getActionOffset(int) -> do
    81:81:float getActionSpeed(int) -> if
    84:85:void setModelAtt(nidefawl.qubes.models.qmodel.ModelQModel) -> do
    87:87:nidefawl.qubes.models.qmodel.ModelQModel getModelAtt() -> do
    90:91:void setOption(int,int) -> do
    93:94:void setProperties(int[]) -> do
nidefawl.qubes.models.qmodel.QModelTexture -> iJjIllL11LiJJi1L:
    int idx -> do
    java.lang.String name -> do
    java.lang.String path -> if
    int glid -> if
    27:33:int get() -> do
    37:39:void release() -> do
nidefawl.qubes.models.qmodel.QModelTriangle -> iJjIllIj1LIjL1ll:
    int idx -> do
    int[] vertIdx -> do
    nidefawl.qubes.vec.Vector3f[] normal -> do
    float[][] texCoord -> do
    int smoothing -> if
    int group -> for
    int flags -> int
    54:54:java.lang.String toString() -> toString
nidefawl.qubes.models.qmodel.QModelType -> iJjIiJJijIiJ1LIj:
    nidefawl.qubes.models.qmodel.QModelType STATIC -> do
    nidefawl.qubes.models.qmodel.QModelType RIGGED -> if
    nidefawl.qubes.models.qmodel.QModelType BLOCK -> for
    nidefawl.qubes.models.qmodel.QModelType[] $VALUES -> do
    10:10:nidefawl.qubes.models.qmodel.QModelType[] values() -> values
    10:10:nidefawl.qubes.models.qmodel.QModelType valueOf(java.lang.String) -> valueOf
    18:26:nidefawl.qubes.models.qmodel.QModelType get(int) -> do
nidefawl.qubes.models.qmodel.QModelVertex -> L1jI1L1L1LjIjIL1:
    int idx -> do
    int flags -> if
    int refCount -> for
    int[] bones -> do
    float[] weights -> do
    int numBones -> int
nidefawl.qubes.models.qmodel.animation.KeyFrame -> IjiJjIIjjIIjjIL1:
    float time -> do
    int idx -> do
    nidefawl.qubes.models.qmodel.animation.KeyFrame next -> do
    26:26:int getIdx() -> do
    32:32:nidefawl.qubes.models.qmodel.animation.KeyFrame getNext() -> do
    35:35:nidefawl.qubes.models.qmodel.animation.KeyFrame copy() -> if
nidefawl.qubes.models.qmodel.animation.QAnimationChannel -> JiiJL1IjlliJ:
    nidefawl.qubes.models.qmodel.animation.KeyFrame[] frames -> do
    float animLength -> do
    float frameLength -> if
    float startOffset -> for
    int priority -> do
    40:57:nidefawl.qubes.models.qmodel.animation.KeyFrame getFrameAt(int,float) -> do
    63:72:void addFrame(nidefawl.qubes.models.qmodel.animation.KeyFrame) -> do
    74:84:nidefawl.qubes.models.qmodel.animation.QAnimationChannel split(int,int) -> do
    87:118:boolean setDeform(int,float,nidefawl.qubes.vec.Matrix4f) -> do
nidefawl.qubes.models.qmodel.animation.QModelAction -> IjJijI1LjIIjL1Ji:
    int idx -> do
    int flags -> if
    java.lang.String name -> do
    float fps -> do
    int startFrame -> for
    int endFrame -> int
    java.util.Map map -> do
    nidefawl.qubes.models.qmodel.animation.QAnimationChannel armatureAnim -> do
    float lenTime -> if
    71:87:nidefawl.qubes.models.qmodel.animation.QModelAction split(java.lang.String,int,int) -> do
nidefawl.qubes.models.qmodel.animation.QModelKeyFrameMatrix -> IjL1IjiJJi1LjIJi:
    nidefawl.qubes.vec.Matrix4f mat -> do
    32:33:nidefawl.qubes.models.qmodel.animation.KeyFrame copy() -> if
nidefawl.qubes.models.qmodel.loader.ModelLoaderQModel -> jIJi1LlljIlliJIj:
    java.util.List listObjects -> do
    java.util.List listMaterials -> if
    java.util.List listTextures -> for
    java.util.List listBones -> int
    java.util.List listActions -> new
    java.util.List listEmpties -> try
    java.lang.String path -> do
    nidefawl.qubes.models.qmodel.QModelType modelType -> do
    54:147:void loadModel(nidefawl.qubes.assets.AssetBinary) -> do
    181:187:nidefawl.qubes.models.qmodel.QModelBone findJoint(java.lang.String) -> do
    190:196:nidefawl.qubes.models.qmodel.QModelNode findEmpty(java.lang.String) -> do
    211:211:nidefawl.qubes.models.qmodel.ModelBlock buildBlockModel() -> do
    215:220:nidefawl.qubes.models.qmodel.ModelQModel buildModel() -> do
    225:231:java.lang.String getModelName() -> do
nidefawl.qubes.models.qmodel.loader.ModelLoaderQModel$1 -> JijIJiL1iJlllljI:
    int[] $SwitchMap$nidefawl$qubes$models$qmodel$QModelType -> do
nidefawl.qubes.models.render.QModelBatchedRender -> llL1ll1LllJill1L:
    nidefawl.qubes.shader.Shader[] shaderSkinned -> do
    nidefawl.qubes.shader.Shader[] shader -> if
    boolean startup -> for
    java.nio.FloatBuffer bufBoneMat -> do
    java.nio.FloatBuffer bufNormalMat -> if
    java.nio.FloatBuffer bufModelMat -> for
    nidefawl.qubes.models.render.QModelBatchedRender$QModelRenderSubList[] tmpLists -> do
    java.util.List subLists -> do
    nidefawl.qubes.vec.Matrix4f tmpMat1 -> do
    int nxtIdx -> do
    boolean isModelViewer -> do
    int pass -> if
    int shadowVP -> for
    int renderer -> int
    nidefawl.qubes.gl.BufferedMatrix mvp -> for
    nidefawl.qubes.vec.Matrix4f tmpMatrix1 -> if
    nidefawl.qubes.vec.Matrix4f tmpMatrix2 -> for
    52:58:void setPass(int,int) -> do
    60:61:void setRenderer(int) -> do
    68:98:void render(float) -> do
    102:144:void initShaders() -> do
    147:153:void begin() -> if
    156:162:void end() -> for
    166:166:java.nio.FloatBuffer getBufModelMat() -> do
    170:170:java.nio.FloatBuffer getBufNormalMat() -> if
    174:174:java.nio.FloatBuffer getBufBoneMat() -> for
    298:303:void reset() -> int
    307:311:void addObject(nidefawl.qubes.models.qmodel.QModelObject) -> do
    314:328:nidefawl.qubes.models.render.QModelBatchedRender$QModelRenderSubList getSubList(nidefawl.qubes.models.qmodel.QModelObject,nidefawl.qubes.models.qmodel.QModelGroup) -> do
    337:338:void init() -> new
    340:345:void setForwardRenderMVP(nidefawl.qubes.gl.BufferedMatrix) -> do
nidefawl.qubes.models.render.QModelBatchedRender$1 -> JiiJllL1IjlljIll:
    int val$iRENDER -> do
    nidefawl.qubes.models.render.QModelBatchedRender this$0 -> do
    111:113:java.lang.String getDefinition(java.lang.String) -> getDefinition
nidefawl.qubes.models.render.QModelBatchedRender$2 -> iJ1LlliJ1LL1IjjI:
    int val$iRENDER -> do
    nidefawl.qubes.models.render.QModelBatchedRender this$0 -> do
    119:121:java.lang.String getDefinition(java.lang.String) -> getDefinition
nidefawl.qubes.models.render.QModelBatchedRender$QModelRenderSubList -> L1Ij1LIjiJIj1L1L:
    boolean isSkinned -> do
    nidefawl.qubes.models.qmodel.ModelQModel model -> do
    nidefawl.qubes.models.qmodel.QModelObject object -> do
    nidefawl.qubes.models.qmodel.QModelGroup group -> do
    nidefawl.qubes.models.qmodel.QModelMaterial material -> do
    nidefawl.qubes.models.qmodel.QModelTexture tex -> do
    nidefawl.qubes.models.render.QModelBatchedRender$ReallocFloatBuf buf1 -> do
    nidefawl.qubes.models.render.QModelBatchedRender$ReallocFloatBuf buf2 -> if
    nidefawl.qubes.models.render.QModelBatchedRender$ReallocFloatBuf buf3 -> for
    int instances -> do
    221:221:boolean matches(nidefawl.qubes.models.qmodel.ModelQModel,nidefawl.qubes.models.qmodel.QModelObject,nidefawl.qubes.models.qmodel.QModelGroup) -> do
    229:235:void set(nidefawl.qubes.models.qmodel.ModelQModel,nidefawl.qubes.models.qmodel.QModelObject,nidefawl.qubes.models.qmodel.QModelGroup) -> do
    238:269:void add(nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelObject,nidefawl.qubes.models.qmodel.QModelGroup) -> do
    273:277:void put(java.nio.FloatBuffer,java.nio.FloatBuffer) -> do
    279:285:void putSkinned(java.nio.FloatBuffer,java.nio.FloatBuffer,java.nio.FloatBuffer) -> do
    287:294:void reset() -> do
nidefawl.qubes.models.render.QModelBatchedRender$ReallocFloatBuf -> L1JiIjiJiJ1LL1:
    int pos -> do
    float[] matBuf -> do
    182:187:int realloc(int) -> do
    191:191:int left() -> do
    198:203:void store(nidefawl.qubes.vec.Matrix4f) -> do
nidefawl.qubes.models.render.QModelDirectRender -> jI1LIjL1iJL1L1iJ:
    java.util.List subLists -> do
    nidefawl.qubes.shader.Shader shaderModel -> do
    boolean startup -> do
    33:48:void initShaders() -> do
    50:51:void reset() -> int
    56:75:void render(float) -> do
    79:80:void addObject(nidefawl.qubes.models.qmodel.QModelObject) -> do
nidefawl.qubes.models.render.QModelRender -> iJlliJjIiJllL1L1:
    java.util.ArrayList rendered -> do
    nidefawl.qubes.models.qmodel.ModelQModel model -> do
    nidefawl.qubes.gl.BufferedMatrix normalMat -> do
    nidefawl.qubes.gl.BufferedMatrix modelMat -> if
    23:24:void setModel(nidefawl.qubes.models.qmodel.ModelQModel) -> do
    void initShaders() -> do
    void reset() -> int
    void render(float) -> do
    void addObject(nidefawl.qubes.models.qmodel.QModelObject) -> do
    31:32:void renderGroup(nidefawl.qubes.models.qmodel.ModelQModel,nidefawl.qubes.models.qmodel.QModelObject,nidefawl.qubes.models.qmodel.QModelGroup,float) -> do
nidefawl.qubes.nbt.Tag -> IjiJL1L1llJi1Lll:
    java.lang.String name -> do
    815:815:java.lang.String getName() -> do
    nidefawl.qubes.nbt.Tag$TagType getType() -> do
    void writeData(java.io.DataOutput) -> do
    void readData(java.io.DataInput,nidefawl.qubes.nbt.TagReadLimiter) -> do
    827:830:void write(nidefawl.qubes.nbt.Tag,java.io.DataOutput) -> do
    833:841:nidefawl.qubes.nbt.Tag read(java.io.DataInput,nidefawl.qubes.nbt.TagReadLimiter) -> do
    845:879:nidefawl.qubes.nbt.Tag newFromType(nidefawl.qubes.nbt.Tag$TagType) -> if
    884:890:java.lang.String readString(java.io.DataInput) -> do
    894:901:void writeString(java.lang.String,java.io.DataOutput) -> do
    904:905:void setName(java.lang.String) -> do
    912:916:nidefawl.qubes.nbt.Tag$TagList wrapStringList(java.util.Collection) -> do
    924:928:java.util.ArrayList unwrapStringList(java.util.Collection) -> do
    16:16:nidefawl.qubes.nbt.Tag access$000(nidefawl.qubes.nbt.Tag$TagType) -> do
nidefawl.qubes.nbt.Tag$1 -> L11LjIlllliJIjJi:
    int[] $SwitchMap$nidefawl$qubes$nbt$Tag$TagType -> do
nidefawl.qubes.nbt.Tag$BlockPos3 -> iJJiiJJiJiIjJiL1:
    nidefawl.qubes.vec.BlockPos data -> do
    629:632:void writeData(java.io.DataOutput) -> do
    635:640:void readData(java.io.DataInput,nidefawl.qubes.nbt.TagReadLimiter) -> do
    644:644:nidefawl.qubes.nbt.Tag$TagType getType() -> do
nidefawl.qubes.nbt.Tag$Byte -> JillL1iJIjIj1LjI:
    byte byteVal -> do
    71:72:void writeData(java.io.DataOutput) -> do
    76:76:nidefawl.qubes.nbt.Tag$TagType getType() -> do
    86:88:void readData(java.io.DataInput,nidefawl.qubes.nbt.TagReadLimiter) -> do
    91:91:byte getByte() -> do
nidefawl.qubes.nbt.Tag$ByteArray -> iJiJiJlliJ1LIj1L:
    byte[] data -> do
    112:114:void writeData(java.io.DataOutput) -> do
    118:118:nidefawl.qubes.nbt.Tag$TagType getType() -> do
    128:136:void readData(java.io.DataInput,nidefawl.qubes.nbt.TagReadLimiter) -> do
    139:140:void setArray(byte[]) -> do
    143:143:byte[] getArray() -> do
nidefawl.qubes.nbt.Tag$Compound -> iJ1LiJJiL1JiJi1L:
    java.util.Map data -> do
    369:369:nidefawl.qubes.nbt.Tag$TagType getType() -> do
    379:394:void writeData(java.io.DataOutput) -> do
    398:417:void readData(java.io.DataInput,nidefawl.qubes.nbt.TagReadLimiter) -> do
    420:420:java.util.Map getMap() -> do
    424:426:void set(java.lang.String,nidefawl.qubes.nbt.Tag) -> do
    429:430:void setInt(java.lang.String,int) -> do
    433:434:void setLong(java.lang.String,long) -> do
    437:438:void setByteArray(java.lang.String,byte[]) -> do
    441:442:nidefawl.qubes.nbt.Tag$ByteArray getByteArray(java.lang.String) -> do
    446:446:nidefawl.qubes.nbt.Tag get(java.lang.String) -> do
    455:456:nidefawl.qubes.vec.Vector3f getVec3(java.lang.String) -> do
    460:461:void setVec3(java.lang.String,nidefawl.qubes.vec.Vector3f) -> do
    464:465:java.util.UUID getUUID(java.lang.String) -> do
    469:470:void setUUID(java.lang.String,java.util.UUID) -> do
    473:474:int getByte(java.lang.String) -> do
    478:479:void setByte(java.lang.String,int) -> if
    483:484:void setBoolean(java.lang.String,boolean) -> do
    487:488:int getInt(java.lang.String) -> if
    492:493:long getLong(java.lang.String) -> do
    497:497:boolean getBoolean(java.lang.String) -> do
    502:503:java.util.List getList(java.lang.String) -> do
    512:513:void setList(java.lang.String,nidefawl.qubes.nbt.Tag$TagList) -> do
    520:521:void setString(java.lang.String,java.lang.String) -> do
    528:529:java.lang.String getString(java.lang.String) -> do
    533:534:void setBlockPos(java.lang.String,nidefawl.qubes.vec.BlockPos) -> do
    536:537:nidefawl.qubes.vec.BlockPos getBlockPos(java.lang.String) -> do
nidefawl.qubes.nbt.Tag$Double -> jI1LIjjIIjL1jI1L:
    double doubleVal -> do
    160:161:void writeData(java.io.DataOutput) -> do
    165:165:nidefawl.qubes.nbt.Tag$TagType getType() -> do
    175:177:void readData(java.io.DataInput,nidefawl.qubes.nbt.TagReadLimiter) -> do
nidefawl.qubes.nbt.Tag$End -> JiIjJiJi1LllL1Ij:
    45:45:nidefawl.qubes.nbt.Tag$TagType getType() -> do
    50:50:void writeData(java.io.DataOutput) -> do
    54:54:void readData(java.io.DataInput,nidefawl.qubes.nbt.TagReadLimiter) -> do
nidefawl.qubes.nbt.Tag$Float -> ll1LIjiJll1LL1Ji:
    float floatVal -> do
    547:548:void writeData(java.io.DataOutput) -> do
    552:552:nidefawl.qubes.nbt.Tag$TagType getType() -> do
    562:564:void readData(java.io.DataInput,nidefawl.qubes.nbt.TagReadLimiter) -> do
nidefawl.qubes.nbt.Tag$Int -> lljI1L1LjIjI1LiJ:
    int data -> do
    588:589:void writeData(java.io.DataOutput) -> do
    593:593:nidefawl.qubes.nbt.Tag$TagType getType() -> do
    603:605:void readData(java.io.DataInput,nidefawl.qubes.nbt.TagReadLimiter) -> do
    608:608:int getInt() -> do
nidefawl.qubes.nbt.Tag$IntMap -> llIjjI1LiJllJiL1:
    java.util.Map data -> do
    323:323:nidefawl.qubes.nbt.Tag$TagType getType() -> do
    333:340:void writeData(java.io.DataOutput) -> do
    344:353:void readData(java.io.DataInput,nidefawl.qubes.nbt.TagReadLimiter) -> do
nidefawl.qubes.nbt.Tag$Long -> L1iJiJIjjIllJiJi:
    long data -> do
    711:712:void writeData(java.io.DataOutput) -> do
    716:716:nidefawl.qubes.nbt.Tag$TagType getType() -> do
    726:728:void readData(java.io.DataInput,nidefawl.qubes.nbt.TagReadLimiter) -> do
    731:731:long getLong() -> do
nidefawl.qubes.nbt.Tag$Short -> llIjJiiJiJIjIjjI:
    short data -> do
    786:787:void writeData(java.io.DataOutput) -> do
    791:791:nidefawl.qubes.nbt.Tag$TagType getType() -> do
    801:803:void readData(java.io.DataInput,nidefawl.qubes.nbt.TagReadLimiter) -> do
nidefawl.qubes.nbt.Tag$StringTag -> iJIjIjllL1IjJi:
    java.lang.String data -> if
    671:671:nidefawl.qubes.nbt.Tag$TagType getType() -> do
    681:683:void readData(java.io.DataInput,nidefawl.qubes.nbt.TagReadLimiter) -> do
    687:688:void writeData(java.io.DataOutput) -> do
    695:695:java.lang.String getString() -> if
nidefawl.qubes.nbt.Tag$TagList -> iJJi1LiJIjJi1LIj:
    java.util.List data -> do
    nidefawl.qubes.nbt.Tag$TagType tagType -> do
    245:258:void writeData(java.io.DataOutput) -> do
    262:262:nidefawl.qubes.nbt.Tag$TagType getType() -> do
    270:270:int getSize() -> do
    275:296:void readData(java.io.DataInput,nidefawl.qubes.nbt.TagReadLimiter) -> do
    299:299:java.util.List getList() -> do
    303:309:void add(nidefawl.qubes.nbt.Tag) -> do
    312:312:nidefawl.qubes.nbt.Tag$TagType getListTagType() -> if
nidefawl.qubes.nbt.Tag$TagType -> L1iJJiL1jIjIJiIj:
    nidefawl.qubes.nbt.Tag$TagType END -> do
    nidefawl.qubes.nbt.Tag$TagType BYTE -> if
    nidefawl.qubes.nbt.Tag$TagType SHORT -> for
    nidefawl.qubes.nbt.Tag$TagType INT -> int
    nidefawl.qubes.nbt.Tag$TagType LONG -> new
    nidefawl.qubes.nbt.Tag$TagType FLOAT -> try
    nidefawl.qubes.nbt.Tag$TagType DOUBLE -> byte
    nidefawl.qubes.nbt.Tag$TagType BYTEARRAY -> case
    nidefawl.qubes.nbt.Tag$TagType STRING -> char
    nidefawl.qubes.nbt.Tag$TagType LIST -> else
    nidefawl.qubes.nbt.Tag$TagType COMPOUND -> goto
    nidefawl.qubes.nbt.Tag$TagType VEC3 -> long
    nidefawl.qubes.nbt.Tag$TagType UUID -> this
    nidefawl.qubes.nbt.Tag$TagType INT_MAP -> void
    nidefawl.qubes.nbt.Tag$TagType BLOCK_POS -> break
    nidefawl.qubes.nbt.Tag$TagType[] $VALUES -> do
    18:18:nidefawl.qubes.nbt.Tag$TagType[] values() -> values
    18:18:nidefawl.qubes.nbt.Tag$TagType valueOf(java.lang.String) -> valueOf
    21:21:int getID() -> do
    25:25:nidefawl.qubes.nbt.Tag$TagType fromID(int) -> do
nidefawl.qubes.nbt.Tag$UUIDTag -> L1L1L1JiL1jIL1Ji:
    java.util.UUID data -> do
    752:754:void writeData(java.io.DataOutput) -> do
    758:758:nidefawl.qubes.nbt.Tag$TagType getType() -> do
    768:770:void readData(java.io.DataInput,nidefawl.qubes.nbt.TagReadLimiter) -> do
    773:773:java.util.UUID getUUID() -> do
nidefawl.qubes.nbt.Tag$Vec3Tag -> L1L1JiJiiJiJiJiJ:
    nidefawl.qubes.vec.Vector3f vec3 -> do
    203:206:void writeData(java.io.DataOutput) -> do
    210:210:nidefawl.qubes.nbt.Tag$TagType getType() -> do
    220:222:void readData(java.io.DataInput,nidefawl.qubes.nbt.TagReadLimiter) -> do
    233:233:nidefawl.qubes.vec.Vector3f getVec3() -> do
nidefawl.qubes.nbt.TagReadLimiter -> jIiJL1iJIjIjlljI:
    nidefawl.qubes.nbt.TagReadLimiter UNLIMITED -> do
    int totalReadBytes -> do
    int limit -> if
    int maxStackDepth -> for
    int stackDepth -> int
    25:29:void add(int) -> do
    31:35:void push() -> do
    37:38:void pop() -> if
nidefawl.qubes.nbt.TagReadLimiter$1 -> ll1LL1JiL1JiiJJi:
    7:7:void add(int) -> do
    8:8:void push() -> do
    9:9:void pop() -> if
nidefawl.qubes.nbt.TagReader -> JiL1L11LL1jIL1:
    29:30:nidefawl.qubes.nbt.Tag readTagFromCompressedBytes(byte[]) -> do
    34:39:byte[] writeTagToCompresedBytes(nidefawl.qubes.nbt.Tag) -> do
    43:45:nidefawl.qubes.nbt.Tag readTagFromFile(java.io.File) -> do
    49:52:void writeTagToFile(nidefawl.qubes.nbt.Tag,java.io.File) -> do
nidefawl.qubes.network.Connection -> L1iJ1LL1llJi1L1L:
    java.net.Socket socket -> do
    java.io.DataInputStream inStream -> do
    java.io.DataOutputStream outStream -> do
    nidefawl.qubes.network.ReaderThread readThread -> do
    nidefawl.qubes.network.WriterThread writeThread -> do
    boolean isConnected -> do
    boolean cleanUp -> if
    java.util.concurrent.LinkedBlockingQueue incoming -> do
    java.util.concurrent.LinkedBlockingQueue outgoing -> if
    java.io.InputStream sIn -> do
    java.lang.Throwable readWriteException -> do
    int disconnectFrom -> do
    java.lang.String disconnectReason -> do
    42:45:void startThreads() -> do
    48:48:boolean isConnected() -> do
    52:59:boolean readPackets() -> if
    63:72:boolean writePackets() -> for
    78:81:void onError(java.lang.Exception) -> do
    84:87:void sendPacket(nidefawl.qubes.network.packet.Packet) -> do
    90:110:void validateConnection() -> if
    113:131:void onDisconnect() -> int
    134:136:void interruptThreads() -> for
    139:162:void disconnect(int,java.lang.String) -> do
    165:165:boolean finished() -> int
    169:169:java.net.InetSocketAddress getAddr() -> do
    173:173:nidefawl.qubes.network.packet.Packet pollPacket() -> do
    177:177:java.util.concurrent.LinkedBlockingQueue getIncoming() -> do
    181:181:int getDisconnectFrom() -> do
    185:185:java.lang.String getDisconnectReason() -> do
nidefawl.qubes.network.Handler -> ll1L1L1LjIjIJi1L:
    boolean isValidWorld(nidefawl.qubes.network.packet.AbstractPacketWorldRef) -> do
    void onDisconnect(int,java.lang.String) -> do
    27:27:void handleHandshake(nidefawl.qubes.network.packet.PacketHandshake) -> do
    30:30:void handlePing(nidefawl.qubes.network.packet.PacketPing) -> do
    34:34:void handleDisconnect(nidefawl.qubes.network.packet.PacketDisconnect) -> do
    37:37:void handleSpawnInWorld(nidefawl.qubes.network.packet.PacketSSpawnInWorld) -> do
    40:40:void handleAuth(nidefawl.qubes.network.packet.PacketAuth) -> do
    43:43:void handleMovement(nidefawl.qubes.network.packet.PacketCMovement) -> do
    47:47:void handleChunkDataMulti(nidefawl.qubes.network.packet.PacketSChunkData,int) -> do
    50:50:void handleSetBlock(nidefawl.qubes.network.packet.PacketCSetBlock) -> do
    54:54:void handleSetBlocks(nidefawl.qubes.network.packet.PacketCSetBlocks) -> do
    57:57:void handleBlock(nidefawl.qubes.network.packet.PacketSSetBlock) -> do
    60:60:void handleMultiBlock(nidefawl.qubes.network.packet.PacketSSetBlocks) -> do
    64:67:void handlePackets(java.util.concurrent.LinkedBlockingQueue) -> do
    70:70:void handleLightChunk(nidefawl.qubes.network.packet.PacketSLightChunk) -> do
    77:77:void handleTrackChunk(nidefawl.qubes.network.packet.PacketSTrackChunk) -> do
    83:83:void handleClientSettings(nidefawl.qubes.network.packet.PacketCSettings) -> do
    90:90:void handleSwitchWorld(nidefawl.qubes.network.packet.PacketCSwitchWorld) -> do
    97:97:void handleChat(nidefawl.qubes.network.packet.PacketChatMessage) -> do
    104:104:void handleChannels(nidefawl.qubes.network.packet.PacketChatChannels) -> do
    111:111:void handleWorldTime(nidefawl.qubes.network.packet.PacketSWorldTime) -> do
    118:118:void handleTeleport(nidefawl.qubes.network.packet.PacketSTeleport) -> do
    124:124:void handleSync(nidefawl.qubes.network.packet.PacketSyncBlocks) -> do
    131:131:void handleTeleportAck(nidefawl.qubes.network.packet.PacketCTeleportAck) -> do
    137:137:void handleEntityUntrack(nidefawl.qubes.network.packet.PacketSEntityUnTrack) -> do
    143:143:void handleEntityTrack(nidefawl.qubes.network.packet.PacketSEntityTrack) -> do
    149:149:void handleEntityMove(nidefawl.qubes.network.packet.PacketSEntityMove) -> do
    155:155:void handleWorldBiomes(nidefawl.qubes.network.packet.PacketSWorldBiomes) -> do
    158:158:void handleDigState(nidefawl.qubes.network.packet.PacketCDigState) -> do
    161:161:void handleServerDigState(nidefawl.qubes.network.packet.PacketSDigState) -> do
    164:164:void handleDebugBBs(nidefawl.qubes.network.packet.PacketSDebugBB) -> do
    167:167:void handleInvClick(nidefawl.qubes.network.packet.PacketCInvClick) -> do
    170:170:void handleInvSync(nidefawl.qubes.network.packet.PacketSInvSync) -> do
    173:173:void handleCrafting(nidefawl.qubes.network.packet.PacketCCrafting) -> do
    176:176:void handleCraftingProgress(nidefawl.qubes.network.packet.PacketSCraftingProgress) -> do
    179:179:void handleInvSyncIncr(nidefawl.qubes.network.packet.PacketSInvSyncIncr) -> do
    182:182:void handleInvCarried(nidefawl.qubes.network.packet.PacketSInvCarried) -> do
    185:185:void handleInvTransaction(nidefawl.qubes.network.packet.PacketCInvTransaction) -> do
    188:188:void handleDebugPath(nidefawl.qubes.network.packet.PacketSDebugPath) -> do
    191:191:void handleSetProperty(nidefawl.qubes.network.packet.PacketCSetProperty) -> do
    194:194:void handleEntityProperties(nidefawl.qubes.network.packet.PacketSEntityProperties) -> do
    197:197:void handleEntityEquip(nidefawl.qubes.network.packet.PacketSEntityEquip) -> do
    200:200:void handleListReq(nidefawl.qubes.network.packet.PacketCListRequest) -> do
    203:203:void handleList(nidefawl.qubes.network.packet.PacketSList) -> do
    206:206:void handleLogin(nidefawl.qubes.network.packet.PacketSLogin) -> do
    209:209:void handleParticles(nidefawl.qubes.network.packet.PacketSParticles) -> do
nidefawl.qubes.network.ReaderThread -> iJJiJiiJL1L1llJi:
    int ACTIVE_THREADS -> do
    nidefawl.qubes.network.Connection conn -> do
    boolean interrupted -> do
    16:20:void interruptThread() -> do
    24:45:void run() -> run
nidefawl.qubes.network.StreamIO -> lljIlllllliJjIL1:
    void read(java.io.DataInput) -> do
    void write(java.io.DataOutput) -> do
nidefawl.qubes.network.WriterThread -> jIL1L1iJIjJillll:
    int ACTIVE_THREADS -> do
    nidefawl.qubes.network.Connection conn -> do
    boolean interrupted -> do
    15:19:void interruptThread() -> do
    23:46:void run() -> run
nidefawl.qubes.network.client.ClientHandler -> iJJiL1IjiJJijIL1:
    int state -> do
    java.lang.String disconnectReason -> do
    long time -> do
    int disconnectFrom -> if
    nidefawl.qubes.network.client.NetworkClient client -> do
    nidefawl.qubes.chunk.client.ChunkManagerClient chunkManager -> do
    nidefawl.qubes.entity.PlayerSelf player -> do
    nidefawl.qubes.world.WorldClient world -> do
    java.util.zip.Inflater inflate -> do
    int i10Meg -> for
    byte[] tmpBuffer -> do
    java.util.ArrayList worldList -> do
    78:85:void update() -> do
    89:90:void handlePing(nidefawl.qubes.network.packet.PacketPing) -> do
    94:105:void handleHandshake(nidefawl.qubes.network.packet.PacketHandshake) -> do
    108:117:void handleSync(nidefawl.qubes.network.packet.PacketSyncBlocks) -> do
    119:124:void handleLogin(nidefawl.qubes.network.packet.PacketSLogin) -> do
    127:142:void handleAuth(nidefawl.qubes.network.packet.PacketAuth) -> do
    146:146:java.lang.String getHandlerName() -> do
    151:152:void handleDisconnect(nidefawl.qubes.network.packet.PacketDisconnect) -> do
    155:155:int getState() -> do
    161:165:void onDisconnect(int,java.lang.String) -> do
    167:169:java.lang.String getDisconnectReason() -> if
    174:188:void handleSpawnInWorld(nidefawl.qubes.network.packet.PacketSSpawnInWorld) -> do
    194:200:void handleTeleport(nidefawl.qubes.network.packet.PacketSTeleport) -> do
    203:204:void sendPacket(nidefawl.qubes.network.packet.Packet) -> do
    207:210:void byteToShortArray(byte[],short[],int) -> do
    216:241:void handleChunkDataMulti(nidefawl.qubes.network.packet.PacketSChunkData,int) -> do
    244:314:void processChunkData(nidefawl.qubes.network.packet.PacketSChunkData,byte[],int) -> do
    317:327:byte[] inflate(byte[]) -> do
    332:332:boolean isValidWorld(nidefawl.qubes.network.packet.AbstractPacketWorldRef) -> do
    336:337:void handleBlock(nidefawl.qubes.network.packet.PacketSSetBlock) -> do
    340:366:void handleMultiBlock(nidefawl.qubes.network.packet.PacketSSetBlocks) -> do
    369:382:void handleLightChunk(nidefawl.qubes.network.packet.PacketSLightChunk) -> do
    384:388:void handleTrackChunk(nidefawl.qubes.network.packet.PacketSTrackChunk) -> do
    391:392:void handleChat(nidefawl.qubes.network.packet.PacketChatMessage) -> do
    395:397:void handleChannels(nidefawl.qubes.network.packet.PacketChatChannels) -> do
    403:407:void handleWorldTime(nidefawl.qubes.network.packet.PacketSWorldTime) -> do
    413:417:void handleEntityUntrack(nidefawl.qubes.network.packet.PacketSEntityUnTrack) -> do
    423:434:void handleEntityTrack(nidefawl.qubes.network.packet.PacketSEntityTrack) -> do
    440:453:void handleEntityMove(nidefawl.qubes.network.packet.PacketSEntityMove) -> do
    457:459:void handleWorldBiomes(nidefawl.qubes.network.packet.PacketSWorldBiomes) -> do
    461:462:void handleServerDigState(nidefawl.qubes.network.packet.PacketSDigState) -> do
    464:468:void handleDebugBBs(nidefawl.qubes.network.packet.PacketSDebugBB) -> do
    470:473:void handleDebugPath(nidefawl.qubes.network.packet.PacketSDebugPath) -> do
    476:483:void handleInvSync(nidefawl.qubes.network.packet.PacketSInvSync) -> do
    485:492:void handleInvSyncIncr(nidefawl.qubes.network.packet.PacketSInvSyncIncr) -> do
    494:504:void handleCraftingProgress(nidefawl.qubes.network.packet.PacketSCraftingProgress) -> do
    507:512:void handleInvCarried(nidefawl.qubes.network.packet.PacketSInvCarried) -> do
    516:522:void handleEntityProperties(nidefawl.qubes.network.packet.PacketSEntityProperties) -> do
    527:531:void handleEntityEquip(nidefawl.qubes.network.packet.PacketSEntityEquip) -> do
    534:545:void handleList(nidefawl.qubes.network.packet.PacketSList) -> do
    548:549:void handleParticles(nidefawl.qubes.network.packet.PacketSParticles) -> do
    46:46:void access$000(nidefawl.qubes.network.client.ClientHandler,nidefawl.qubes.network.packet.PacketSChunkData,byte[],int) -> do
nidefawl.qubes.network.client.ClientHandler$1 -> iJJillIjiJllL1Ij:
    byte[] decpressData -> do
    nidefawl.qubes.network.packet.PacketSChunkData val$packet -> do
    int val$flags -> do
    nidefawl.qubes.network.client.ClientHandler this$0 -> do
    221:225:java.lang.Void call() -> do
    229:232:void post() -> post
    235:235:nidefawl.qubes.async.AsyncTask$TaskType getType() -> getType
    217:217:java.lang.Object call() -> call
nidefawl.qubes.network.client.ClientHandler$2 -> llL1L1IjJiiJJill:
    int[] $SwitchMap$nidefawl$qubes$io$network$DataListType -> do
nidefawl.qubes.network.client.NetworkClient -> lljIJiiJllllL1Ji:
    nidefawl.qubes.network.client.ClientHandler handler -> do
    nidefawl.qubes.network.Connection conn -> do
    int netVersion -> do
    27:47:void update() -> do
    49:70:void processLogin() -> if
    72:72:nidefawl.qubes.network.client.ClientHandler getClient() -> do
    76:76:boolean isConnected() -> do
    81:82:void sendPacket(nidefawl.qubes.network.packet.Packet) -> do
    85:86:void disconnect(java.lang.String) -> do
    90:91:void onKick(int,java.lang.String) -> do
nidefawl.qubes.network.client.ThreadConnect -> JiJiiJllL1iJIjjI:
    java.lang.String host -> do
    int port -> do
    java.lang.Thread thread -> do
    boolean finished -> do
    boolean cancelled -> if
    boolean connected -> for
    java.lang.String stateStr -> if
    26:64:void run() -> run
    67:71:void startThread() -> do
    74:74:java.lang.String getState() -> do
    77:78:void cancel() -> if
nidefawl.qubes.network.packet.AbstractPacketWorldRef -> Ijll1LllL1L1llIj:
    int worldID -> do
    20:21:void readPacket(java.io.DataInput) -> do
    25:26:void writePacket(java.io.DataOutput) -> do
    29:29:int getWorldId() -> do
nidefawl.qubes.network.packet.InvalidPacketException -> L1IjJiiJlliJL1ll:
    java.lang.Class clazz -> do
    22:22:java.lang.Class getClazz() -> do
nidefawl.qubes.network.packet.Packet -> IjllJijIllIjlliJ:
    int NEXT_PACKET_ID -> do
    java.lang.Class[] packets -> do
    boolean[] sentByServer -> do
    boolean[] sentByClient -> if
    java.util.Map classToIDMap -> do
    int id -> if
    nidefawl.qubes.network.packet.Packet lastSuccess -> do
    80:92:nidefawl.qubes.network.packet.Packet read(java.io.DataInput) -> do
    96:98:void write(nidefawl.qubes.network.packet.Packet,java.io.DataOutput) -> do
    102:102:nidefawl.qubes.network.packet.Packet makePacket(int) -> do
    void readPacket(java.io.DataInput) -> do
    void writePacket(java.io.DataOutput) -> do
    void handle(nidefawl.qubes.network.Handler) -> do
    112:120:nidefawl.qubes.network.packet.Packet makePacket(java.lang.Class) -> do
    124:124:int getID() -> do
    128:133:void register(java.lang.Class,boolean,boolean) -> do
    142:142:java.lang.String readString(java.io.DataInput) -> do
    146:153:java.lang.String readString(java.io.DataInput,int) -> do
    156:163:void writeString(java.lang.String,java.io.DataOutput) -> do
    166:178:nidefawl.qubes.item.BaseStack readStack(java.io.DataInput) -> do
    184:195:void writeStack(nidefawl.qubes.item.BaseStack,java.io.DataOutput) -> do
nidefawl.qubes.network.packet.PacketAuth -> JiiJlljIL1IjJi1L:
    java.lang.String name -> do
    boolean success -> do
    29:31:void readPacket(java.io.DataInput) -> do
    35:37:void writePacket(java.io.DataOutput) -> do
    41:42:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketCCrafting -> iJIjIjiJiJL1JiL1:
    int catid -> do
    int recipeid -> if
    int action -> for
    int amount -> int
    32:36:void readPacket(java.io.DataInput) -> do
    40:44:void writePacket(java.io.DataOutput) -> do
    48:49:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketCDigState -> iJJiJiIjIjL1L1L1:
    nidefawl.qubes.vec.BlockPos pos -> do
    nidefawl.qubes.vec.Vector3f fpos -> do
    int face -> if
    nidefawl.qubes.item.BaseStack stack -> do
    int stage -> for
    34:40:void readPacket(java.io.DataInput) -> do
    44:50:void writePacket(java.io.DataOutput) -> do
    56:58:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketCInvClick -> llJi1LiJjIllll1L:
    int id -> do
    int idx -> if
    int button -> for
    int action -> int
    nidefawl.qubes.item.BaseStack stack -> do
    31:36:void readPacket(java.io.DataInput) -> do
    40:45:void writePacket(java.io.DataOutput) -> do
    49:50:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketCInvTransaction -> JiL11LiJ1LIjIjJi:
    int id -> do
    int action -> if
    25:27:void readPacket(java.io.DataInput) -> do
    31:33:void writePacket(java.io.DataOutput) -> do
    37:38:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketCListRequest -> jIIjjIlliJL1jIJi:
    int reqId -> do
    nidefawl.qubes.io.network.DataListType type -> do
    24:26:void readPacket(java.io.DataInput) -> do
    30:32:void writePacket(java.io.DataOutput) -> do
    36:37:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketCMovement -> lljIIj1LL1:
    nidefawl.qubes.vec.Vec3D pos -> do
    float yaw -> do
    float pitch -> if
    int flags -> do
    27:31:void readPacket(java.io.DataInput) -> do
    35:41:void writePacket(java.io.DataOutput) -> do
    47:48:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketCSetBlock -> L1iJJiJi1L1L1LL1:
    nidefawl.qubes.vec.BlockPos pos -> do
    nidefawl.qubes.vec.Vector3f fpos -> do
    int face -> if
    nidefawl.qubes.item.BlockStack stack -> do
    33:40:void readPacket(java.io.DataInput) -> do
    44:49:void writePacket(java.io.DataOutput) -> do
    55:58:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketCSetBlocks -> Ij1L1LL1jIll1LIj:
    int x -> if
    int y -> for
    int z -> int
    int x2 -> new
    int y2 -> try
    int z2 -> byte
    nidefawl.qubes.item.BlockStack stack -> do
    int flags -> case
    nidefawl.qubes.vec.Vector3f fpos -> do
    int face -> char
    47:60:void readPacket(java.io.DataInput) -> do
    64:75:void writePacket(java.io.DataOutput) -> do
    81:83:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketCSetProperty -> L1IjJijIIjiJJiIj:
    int propVal -> do
    int propId -> if
    22:24:void readPacket(java.io.DataInput) -> do
    28:30:void writePacket(java.io.DataOutput) -> do
    34:35:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketCSettings -> JiiJllIjiJL1L1iJ:
    int chunkLoadDistance -> do
    19:20:void readPacket(java.io.DataInput) -> do
    24:25:void writePacket(java.io.DataOutput) -> do
    29:30:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketCSwitchWorld -> iJ1LIjJijIJijIJi:
    int flags -> do
    21:22:void readPacket(java.io.DataInput) -> do
    26:27:void writePacket(java.io.DataOutput) -> do
    33:34:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketCTeleportAck -> JiiJllL1lljIjI:
    int sync -> if
    21:23:void readPacket(java.io.DataInput) -> do
    27:29:void writePacket(java.io.DataOutput) -> do
    35:36:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketChatChannels -> IjjIIjIjiJiJjIll:
    java.util.ArrayList list -> do
    40:45:void readPacket(java.io.DataInput) -> do
    52:56:void writePacket(java.io.DataOutput) -> do
    68:69:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketChatMessage -> llIjL1IjjIll1LiJ:
    java.lang.String channel -> do
    java.lang.String message -> if
    21:23:void readPacket(java.io.DataInput) -> do
    27:29:void writePacket(java.io.DataOutput) -> do
    33:34:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketDisconnect -> IjIjJi1L1LIjllJi:
    int code -> do
    java.lang.String message -> do
    20:22:void readPacket(java.io.DataInput) -> do
    26:28:void writePacket(java.io.DataOutput) -> do
    32:33:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketHandshake -> jIIjL1L1IjJijIjI:
    int version -> do
    19:20:void readPacket(java.io.DataInput) -> do
    24:25:void writePacket(java.io.DataOutput) -> do
    29:30:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketPing -> Jillll1LIj1LIj1L:
    long time -> do
    19:20:void readPacket(java.io.DataInput) -> do
    24:25:void writePacket(java.io.DataOutput) -> do
    29:30:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSChunkData -> L11LJiiJll1LJi:
    int len -> if
    byte[] blocks -> do
    int flags -> for
    int[][] coords -> do
    23:33:void readPacket(java.io.DataInput) -> do
    37:46:void writePacket(java.io.DataOutput) -> do
    52:60:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSCraftingProgress -> iJL1jIjIJijIJi1L:
    int id -> do
    int action -> if
    long currentTime -> do
    long startTime -> if
    long endTime -> for
    int recipe -> for
    boolean finished -> do
    int amount -> int
    27:35:void readPacket(java.io.DataInput) -> do
    39:47:void writePacket(java.io.DataOutput) -> do
    51:52:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSDebugBB -> JiJilliJJiL1Ijll:
    java.util.List boxes -> do
    24:31:void readPacket(java.io.DataInput) -> do
    35:40:void writePacket(java.io.DataOutput) -> do
    44:45:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSDebugPath -> IjiJL1L1iJjIjIIj:
    java.util.List pts -> do
    25:33:void readPacket(java.io.DataInput) -> do
    37:44:void writePacket(java.io.DataOutput) -> do
    48:49:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSDigState -> iJL1L1jI1LIjIj:
    int stage -> if
    23:25:void readPacket(java.io.DataInput) -> do
    29:31:void writePacket(java.io.DataOutput) -> do
    37:39:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSEntityEquip -> jIjIIjL1jIJiL1Ij:
    int entId -> do
    nidefawl.qubes.item.BaseStack[] stacks -> do
    31:37:void readPacket(java.io.DataInput) -> do
    41:46:void writePacket(java.io.DataOutput) -> do
    52:53:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSEntityMove -> Ji1L1LL1iJllJiIj:
    int entId -> do
    nidefawl.qubes.vec.Vec3D pos -> do
    float yaw -> do
    float pitch -> if
    int flags -> if
    float yawBodyOffset -> for
    37:46:void readPacket(java.io.DataInput) -> do
    50:62:void writePacket(java.io.DataOutput) -> do
    68:69:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSEntityProperties -> lliJllIjL1iJiJll:
    int entId -> do
    nidefawl.qubes.nbt.Tag data -> do
    29:31:void readPacket(java.io.DataInput) -> do
    35:37:void writePacket(java.io.DataOutput) -> do
    43:44:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSEntityTrack -> Ij1LJiIjL1lliJll:
    int entId -> do
    int entType -> if
    nidefawl.qubes.vec.Vec3D pos -> do
    float yaw -> do
    float yawbody -> if
    float pitch -> for
    nidefawl.qubes.nbt.Tag data -> do
    35:45:void readPacket(java.io.DataInput) -> do
    49:66:void writePacket(java.io.DataOutput) -> do
    72:73:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSEntityUnTrack -> jIJill1LjIjIiJ1L:
    int entId -> do
    30:31:void readPacket(java.io.DataInput) -> do
    35:36:void writePacket(java.io.DataOutput) -> do
    42:43:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSInvCarried -> JilljIJiL1IjJiiJ:
    nidefawl.qubes.inventory.slots.SlotStack stack -> do
    27:29:void readPacket(java.io.DataInput) -> do
    33:34:void writePacket(java.io.DataOutput) -> do
    38:39:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSInvSync -> llIjjIllll1LIj:
    int invId -> do
    int invSize -> if
    java.util.Collection stacks -> do
    31:40:void readPacket(java.io.DataInput) -> do
    44:50:void writePacket(java.io.DataOutput) -> do
    54:55:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSInvSyncIncr -> IjL1llL1L1iJIjiJ:
    int invId -> do
    java.util.Collection stacks -> do
    30:38:void readPacket(java.io.DataInput) -> do
    42:47:void writePacket(java.io.DataOutput) -> do
    51:52:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSLightChunk -> iJ1LiJllIjjIiJL1:
    int coordX -> if
    int coordZ -> for
    byte[] data -> do
    short min -> do
    short max -> if
    22:30:void readPacket(java.io.DataInput) -> do
    34:41:void writePacket(java.io.DataOutput) -> do
    47:50:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSList -> IjJiiJIjllL1IjL1:
    int reqId -> do
    nidefawl.qubes.io.network.DataListType type -> do
    java.util.List list -> do
    30:39:void readPacket(java.io.DataInput) -> do
    43:50:void writePacket(java.io.DataOutput) -> do
    54:55:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSLogin -> JijIjI1LIjIjL1Ji:
    15:15:void readPacket(java.io.DataInput) -> do
    19:19:void writePacket(java.io.DataOutput) -> do
    23:24:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSParticles -> iJllJijIL1llJi1L:
    nidefawl.qubes.vec.BlockPos pos -> do
    int type -> if
    int arg -> for
    27:30:void handle(nidefawl.qubes.network.Handler) -> do
    33:37:void writePacket(java.io.DataOutput) -> do
    40:44:void readPacket(java.io.DataInput) -> do
nidefawl.qubes.network.packet.PacketSSetBlock -> iJ1LIj1LJiIjL11L:
    int x -> if
    int y -> for
    int z -> int
    int type -> new
    int light -> try
    29:36:void readPacket(java.io.DataInput) -> do
    40:46:void writePacket(java.io.DataOutput) -> do
    52:54:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSSetBlocks -> JiIjll1LlljIiJJi:
    int chunkX -> if
    int chunkZ -> for
    short[] positions -> do
    short[] blocks -> if
    byte[] lights -> do
    short[] data -> for
    nidefawl.qubes.chunk.blockdata.BlockData[] bdata -> do
    int numBlockData -> int
    43:73:void readPacket(java.io.DataInput) -> do
    77:98:void writePacket(java.io.DataOutput) -> do
    104:106:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSSpawnInWorld -> L1iJjI1LiJ1L1LiJ:
    nidefawl.qubes.world.IWorldSettings worldSettings -> do
    nidefawl.qubes.world.biomes.IBiomeSettings biomeSettings -> do
    nidefawl.qubes.vec.Vec3D pos -> do
    int flags -> do
    int entId -> if
    32:40:void readPacket(java.io.DataInput) -> do
    44:52:void writePacket(java.io.DataOutput) -> do
    58:59:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSTeleport -> IjlliJjIJiJiJi1L:
    nidefawl.qubes.vec.Vec3D pos -> do
    float yaw -> do
    float pitch -> if
    int flags -> if
    int sync -> for
    31:37:void readPacket(java.io.DataInput) -> do
    41:49:void writePacket(java.io.DataOutput) -> do
    55:56:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSTrackChunk -> iJ1LJiL11Lll1LiJ:
    int x -> if
    int z -> for
    boolean add -> do
    24:29:void readPacket(java.io.DataInput) -> do
    33:37:void writePacket(java.io.DataOutput) -> do
    41:43:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSWorldBiomes -> IjJiIjjIllllllL1:
    int numBiomes -> if
    int[] coordsX -> do
    int[] coordsZ -> if
    byte[] biomes -> do
    34:44:void readPacket(java.io.DataInput) -> do
    48:55:void writePacket(java.io.DataOutput) -> do
    61:63:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSWorldTime -> JiiJjIL1L1Ij:
    long time -> do
    long daylen -> if
    boolean isFixed -> do
    25:29:void readPacket(java.io.DataInput) -> do
    33:37:void writePacket(java.io.DataOutput) -> do
    43:46:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.packet.PacketSyncBlocks -> jIiJJiIj1LIj1LJi:
    short[] blockIds -> do
    23:32:void readPacket(java.io.DataInput) -> do
    36:39:void writePacket(java.io.DataOutput) -> do
    43:44:void handle(nidefawl.qubes.network.Handler) -> do
nidefawl.qubes.network.server.ListenThread -> L1Ijll1LllIjL1Ij:
    java.net.ServerSocket serverSocket -> do
    nidefawl.qubes.network.server.NetworkServer server -> do
    boolean finished -> do
    boolean listening -> if
    26:49:void run() -> run
    51:69:void halt() -> do
nidefawl.qubes.network.server.NetworkServer -> JijIL1ll1LiJjIL1:
    boolean isRunning -> do
    nidefawl.qubes.network.server.ListenThread listenThread -> do
    nidefawl.qubes.server.GameServer server -> do
    long packetTimeout -> do
    long pingDelay -> if
    int netVersion -> do
    java.util.ArrayList handlersPlay -> do
    java.util.ArrayList handlersLogin -> if
    38:39:void startListener() -> do
    43:48:void addConnection(java.net.Socket) -> do
    51:62:void halt() -> if
    65:103:void update() -> for
    106:107:void addServerHandlerPlay(nidefawl.qubes.entity.Player,nidefawl.qubes.network.server.ServerHandlerLogin,nidefawl.qubes.network.server.ServerHandlerPlay) -> do
    110:110:java.util.ArrayList getLoginHandlers() -> do
    113:113:java.util.ArrayList getHandlers() -> if
nidefawl.qubes.network.server.ServerHandler -> iJ1LiJ1LiJjIll1L:
    int state -> do
    nidefawl.qubes.network.Connection conn -> do
    java.net.InetSocketAddress addr -> do
    java.lang.String handlerName -> do
    long time -> do
    nidefawl.qubes.server.GameServer server -> do
    nidefawl.qubes.network.server.NetworkServer netServer -> do
    31:31:java.net.InetSocketAddress getAddr() -> do
    41:71:void update() -> do
    75:76:void handleDisconnect(nidefawl.qubes.network.packet.PacketDisconnect) -> do
    81:81:void handlePing(nidefawl.qubes.network.packet.PacketPing) -> do
    85:85:java.lang.String getHandlerName() -> do
    90:91:void sendPacket(nidefawl.qubes.network.packet.Packet) -> do
    94:95:void kick(java.lang.String) -> do
    98:98:boolean finished() -> do
nidefawl.qubes.network.server.ServerHandlerLogin -> JijIiJIjllL1L1jI:
    java.lang.String name -> if
    25:36:void handleHandshake(nidefawl.qubes.network.packet.PacketHandshake) -> do
    40:40:void onDisconnect(int,java.lang.String) -> do
    44:52:void handleAuth(nidefawl.qubes.network.packet.PacketAuth) -> do
    56:85:void handleClientSettings(nidefawl.qubes.network.packet.PacketCSettings) -> do
    89:89:boolean isValidWorld(nidefawl.qubes.network.packet.AbstractPacketWorldRef) -> do
    94:94:boolean finished() -> do
    99:100:void handleDisconnect(nidefawl.qubes.network.packet.PacketDisconnect) -> do
    103:117:void handleSync(nidefawl.qubes.network.packet.PacketSyncBlocks) -> do
nidefawl.qubes.network.server.ServerHandlerPlay -> llL1iJIjiJL1IjIj:
    nidefawl.qubes.entity.PlayerServer player -> do
    int posSyncSent -> if
    int posSyncRecv -> for
    42:42:void handlePing(nidefawl.qubes.network.packet.PacketPing) -> do
    45:51:void update() -> do
    55:102:void handleSwitchWorld(nidefawl.qubes.network.packet.PacketCSwitchWorld) -> do
    106:106:java.lang.String getHandlerName() -> do
    111:112:void handleDisconnect(nidefawl.qubes.network.packet.PacketDisconnect) -> do
    117:128:void onDisconnect(int,java.lang.String) -> do
    131:132:void sendPacket(nidefawl.qubes.network.packet.Packet) -> do
    135:137:void handleSetBlock(nidefawl.qubes.network.packet.PacketCSetBlock) -> do
    141:225:void handleSetBlocks(nidefawl.qubes.network.packet.PacketCSetBlocks) -> do
    229:229:boolean isValidWorld(nidefawl.qubes.network.packet.AbstractPacketWorldRef) -> do
    233:233:nidefawl.qubes.entity.PlayerServer getPlayer() -> do
    237:245:void handleChat(nidefawl.qubes.network.packet.PacketChatMessage) -> do
    249:258:void handleMovement(nidefawl.qubes.network.packet.PacketCMovement) -> do
    261:262:void handleTeleportAck(nidefawl.qubes.network.packet.PacketCTeleportAck) -> do
    265:277:void resyncPosition() -> if
    280:281:void handleDigState(nidefawl.qubes.network.packet.PacketCDigState) -> do
    284:302:void handleInvClick(nidefawl.qubes.network.packet.PacketCInvClick) -> do
    304:347:void handleCrafting(nidefawl.qubes.network.packet.PacketCCrafting) -> do
    349:370:void handleInvTransaction(nidefawl.qubes.network.packet.PacketCInvTransaction) -> do
    373:430:void handleSetProperty(nidefawl.qubes.network.packet.PacketCSetProperty) -> do
    434:458:void handleListReq(nidefawl.qubes.network.packet.PacketCListRequest) -> do
nidefawl.qubes.network.server.ServerHandlerPlay$1 -> llIj1LjIIjJiIjjI:
    int[] $SwitchMap$nidefawl$qubes$io$network$DataListType -> do
nidefawl.qubes.noise.AbstractNoiseGen -> JijI1LJiIjJiIjiJ:
nidefawl.qubes.noise.NoiseLib -> lllliJ1LL1iJjIiJ:
    boolean LIB_PRESENT -> do
    46:49:nidefawl.qubes.noise.opennoise.OpenSimplexNoise makeGenerator(long) -> do
    53:56:nidefawl.qubes.noise.TerrainNoiseScale newNoiseScale(long) -> do
nidefawl.qubes.noise.NoiseMap2D -> iJJi1LL1JiiJ1LL1:
    java.lang.String tex -> do
    short[] data -> do
    int height -> do
    int width -> if
    33:44:double evalI(int,int) -> do
    59:59:int getWidth() -> do
    62:62:int getHeight() -> if
nidefawl.qubes.noise.RiverNoise2D -> Ji1LJillL1L11Lll:
    double[][] dWeights -> do
    nidefawl.qubes.noise.opennoise.OpenSimplexNoise n1 -> do
    double scale -> do
    int maxI -> do
    int size -> if
    72:74:double dist2d(double,double,double,double) -> do
    78:103:nidefawl.qubes.noise.RiverNoise2D$RiverNoiseResult generate(int,int) -> do
    5:5:double[][] access$000() -> do
nidefawl.qubes.noise.RiverNoise2D$RiverNoiseResult -> ll1LiJJi1LiJ:
    double[] dNoise -> do
    int size -> do
    int maxI -> if
    19:35:double getBlur(int,int,int) -> do
    6:6:double[] access$100(nidefawl.qubes.noise.RiverNoise2D$RiverNoiseResult) -> do
nidefawl.qubes.noise.TerrainNoise -> L1ll1L1LL1L1L11L:
    nidefawl.qubes.noise.opennoise.OpenSimplexNoise noise -> do
    double scaleX -> do
    double scaleY -> if
    double scaleZ -> for
    int nOctaves -> do
    21:32:double get(int,int,int) -> do
nidefawl.qubes.noise.TerrainNoise2D -> iJjIll1LL11LL1Ji:
    nidefawl.qubes.noise.opennoise.OpenSimplexNoise noise -> do
    double scaleX -> do
    double scaleZ -> if
    int nOctaves -> do
    19:29:double get(int,int) -> do
nidefawl.qubes.noise.TerrainNoiseCustom1 -> llJijIiJllJiJi1L:
    nidefawl.qubes.noise.opennoise.OpenSimplexNoise noise -> do
    double scaleX -> do
    double scaleY -> if
    double scaleZ -> for
    int nOctaves -> do
    21:32:double get(int,int,int) -> do
nidefawl.qubes.noise.TerrainNoiseMap2D -> iJjIiJIjL1llJiIj:
    double[][] dWeights -> do
    nidefawl.qubes.noise.NoiseMap2D map -> do
    double scale -> do
    int maxI -> do
    int size -> if
    43:77:nidefawl.qubes.noise.TerrainNoiseMap2DResult generate(int,int,double,double) -> do
nidefawl.qubes.noise.TerrainNoiseMap2DResult -> jI1L1LL1llJijIJi:
    double[] dNoise -> do
    int size -> do
    int maxI -> if
    16:32:double getBlur(int,int,int) -> do
nidefawl.qubes.noise.TerrainNoiseScale -> JillL11LjIIjL1jI:
    double[] gen(int,int) -> do
    nidefawl.qubes.noise.TerrainNoiseScale setUpsampleFactor(int) -> do
    nidefawl.qubes.noise.TerrainNoiseScale setScale(double,double,double) -> do
    nidefawl.qubes.noise.TerrainNoiseScale setOctavesFreq(int,double) -> do
nidefawl.qubes.noise.TerrainNoiseScaleJava -> L1L1IjL1iJiJiJ1L:
    nidefawl.qubes.noise.opennoise.OpenSimplexNoise noise -> do
    int w -> do
    int h -> if
    double scaleX -> do
    double scaleY -> if
    double scaleZ -> for
    int nOctaves -> for
    double freqMult -> int
    int factor -> int
    int wLow -> new
    int hLow -> try
    29:31:nidefawl.qubes.noise.TerrainNoiseScale setOctavesFreq(int,double) -> do
    36:39:nidefawl.qubes.noise.TerrainNoiseScale setUpsampleFactor(int) -> do
    44:47:nidefawl.qubes.noise.TerrainNoiseScale setScale(double,double,double) -> do
    51:62:double get(int,int,int) -> do
    66:105:double[] gen(int,int) -> do
nidefawl.qubes.noise.TerrainNoiseScaleLib -> L1iJ1L1LllL11LL1:
    int w -> do
    int h -> if
    double scaleX -> do
    double scaleY -> if
    double scaleZ -> for
    int nOctaves -> for
    double freqMult -> int
    int factor -> int
    int wLow -> new
    int hLow -> try
    long ptr -> do
    long bufferAddr -> if
    long native_init(long,int,int) -> do
    void native_setUpsampleFactor(long,int) -> do
    void native_setScale(long,double,double,double) -> do
    void native_setOctavesFreq(long,int,double) -> do
    void native_generateNoise(long,int,int,long) -> do
    void native_free(long) -> do
    41:45:nidefawl.qubes.noise.TerrainNoiseScale setUpsampleFactor(int) -> do
    48:52:nidefawl.qubes.noise.TerrainNoiseScale setScale(double,double,double) -> do
    55:58:nidefawl.qubes.noise.TerrainNoiseScale setOctavesFreq(int,double) -> do
    63:66:double[] gen(int,int) -> do
    71:74:void finalize() -> finalize
nidefawl.qubes.noise.opennoise.OpenSimplexNoise -> iJJiJilliJiJiJL1:
    double eval(double,double,double) -> do
    double eval(double,double) -> do
nidefawl.qubes.noise.opennoise.OpenSimplexNoiseJava -> JiIjiJIjlliJJill:
    short[] perm -> do
    short[] permGradIndex3D -> if
    byte[] gradients2D -> do
    byte[] gradients3D -> if
    byte[] gradients4D -> for
    77:185:double eval(double,double) -> do
    193:747:double eval(double,double,double) -> do
    2067:2068:double extrapolate(int,int,double,double) -> do
    2074:2075:double extrapolate(int,int,int,double,double,double) -> do
    2090:2091:int fastFloor(double) -> do
nidefawl.qubes.noise.opennoise.OpenSimplexNoiseLib -> iJL1llL1jI1LL1iJ:
    long ptr -> do
    long init(long) -> do
    void free(long) -> do
    double eval(long,double,double) -> do
    double eval(long,double,double,double) -> do
    26:26:double eval(double,double) -> do
    31:31:double eval(double,double,double) -> do
    40:42:void finalize() -> finalize
nidefawl.qubes.particle.AbstractParticleRenderer -> jI1LjIllJiJiJi:
nidefawl.qubes.particle.CubeParticle -> L1iJL1IjllIjllL1:
    int tex -> try
    int normalMap -> byte
    int type -> case
    int pass -> char
    nidefawl.qubes.vec.Vector3f color -> do
    25:26:void setTex(int) -> do
    33:50:int store(int,java.nio.FloatBuffer,java.nio.IntBuffer) -> do
    55:80:void tickUpdate(nidefawl.qubes.world.World) -> do
    84:85:void setTextureOffset(float,float) -> do
nidefawl.qubes.particle.CubeParticleRenderer -> L1IjIjllL1iJIjiJ:
    nidefawl.qubes.shader.ShaderBuffer ssbo_particle_cubes -> do
    nidefawl.qubes.shader.ShaderBuffer ssbo_particle_cubes_blockinfo -> if
    boolean startup -> for
    int fireUpdate -> int
    float lastUpdate -> if
    boolean pause -> do
    float pauseTime -> do
    nidefawl.qubes.shader.Shader particleShaderSeperateBuffer -> do
    nidefawl.qubes.gl.GLTriBuffer cubeFormat1 -> do
    nidefawl.qubes.gl.GLTriBuffer cubeFormat2 -> if
    int selFormat -> new
    int maxSprites -> try
    int totalSpritesRendered -> do
    int storedSprites -> if
    int tick -> for
    java.util.List particles -> do
    java.util.Random r -> do
    65:76:void init() -> do
    79:107:void initShaders() -> if
    110:126:void renderParticles(nidefawl.qubes.world.World,float,float) -> do
    129:175:void spawnParticles(nidefawl.qubes.world.WorldClient,int,int,int,int,int) -> do
    211:231:void storeParticles(nidefawl.qubes.world.World,float,float) -> if
    234:260:void tickUpdate(nidefawl.qubes.world.World) -> do
    263:263:void resize(int,int) -> do
    265:270:void preRenderUpdate(nidefawl.qubes.world.World,float) -> do
    272:272:int getNumParticles() -> do
nidefawl.qubes.particle.CubeParticleRenderer$1 -> L1jIL11LIjIjiJL1:
    nidefawl.qubes.particle.CubeParticleRenderer this$0 -> do
    85:85:java.lang.String getDefinition(java.lang.String) -> getDefinition
nidefawl.qubes.particle.Particle -> JiL1JillL1llIjll:
    boolean dead -> do
    int maxLive -> do
    nidefawl.qubes.vec.Vec3D mot -> do
    nidefawl.qubes.vec.Vec3D lastMot -> if
    nidefawl.qubes.vec.Vec3D pos -> for
    nidefawl.qubes.vec.Vec3D lastPos -> int
    nidefawl.qubes.vec.Vector3f renderPos -> if
    nidefawl.qubes.vec.Vector3f renderRot -> for
    nidefawl.qubes.vec.Vec3D rot -> new
    nidefawl.qubes.vec.Vec3D lastRot -> try
    nidefawl.qubes.vec.Vec3D rotspeed -> byte
    nidefawl.qubes.vec.Vector2f texOffset -> do
    float size -> do
    float initSize -> if
    float lastSize -> for
    float renderSize -> int
    int tick -> if
    boolean noclip -> if
    boolean hitGround -> for
    nidefawl.qubes.vec.AABB aabb -> do
    nidefawl.qubes.vec.AABB aabb2 -> if
    nidefawl.qubes.vec.AABB aabb3 -> for
    nidefawl.qubes.vec.AABB aabb4 -> int
    nidefawl.qubes.util.CollisionQuery coll -> do
    float gravity -> new
    boolean applyGravity -> int
    int lightValue -> for
    int checkTicks -> int
    int sleepTicks -> new
    boolean sleeping -> new
    int lastBlock -> try
    50:51:void die() -> do
    54:56:void setMotion(float,float,float) -> do
    59:65:void setPos(float,float,float) -> if
    68:70:void setRot(float,float,float) -> for
    73:74:void setRotSpeed(float,float,float) -> int
    77:80:void setSize(float) -> do
    83:86:void update(float) -> if
    89:132:void tickUpdate(nidefawl.qubes.world.World) -> do
    135:139:void preStep() -> if
    141:244:void step(nidefawl.qubes.world.World) -> if
    246:260:void postStep() -> for
    262:262:boolean doesFall() -> do
    266:266:float getGravity() -> do
nidefawl.qubes.path.Path -> jIjIjIllJilljI1L:
    nidefawl.qubes.path.PathPoint[] arr -> do
    int curPos -> do
    13:13:boolean isFinished() -> do
    17:17:nidefawl.qubes.path.PathPoint get() -> do
    20:20:nidefawl.qubes.path.PathPoint getEnd() -> if
    30:30:int getLength() -> do
    34:34:int getPos() -> if
    38:38:nidefawl.qubes.path.PathPoint get(int) -> do
    42:46:void setPos(int) -> do
nidefawl.qubes.path.PathFinder -> JijI1LL1IjjIIjll:
    nidefawl.qubes.path.PathList path -> do
    java.util.Map block -> do
    nidefawl.qubes.vec.BlockPos size -> do
    nidefawl.qubes.vec.BlockPos blockPos -> if
    nidefawl.qubes.path.PathPoint[] pathOptions -> do
    23:34:nidefawl.qubes.path.Path findPath(nidefawl.qubes.entity.Entity,nidefawl.qubes.vec.Vec3D,float) -> do
    38:77:nidefawl.qubes.path.Path findPath(nidefawl.qubes.entity.Entity,nidefawl.qubes.path.PathPoint,nidefawl.qubes.path.PathPoint,float) -> do
    80:106:int findPathOptions(nidefawl.qubes.entity.Entity,nidefawl.qubes.path.PathPoint,nidefawl.qubes.path.PathPoint,float) -> do
    109:138:nidefawl.qubes.path.PathPoint getPoint(nidefawl.qubes.entity.Entity,int,int,int,int) -> do
    141:160:int getBlockState(nidefawl.qubes.entity.Entity,int,int,int) -> do
    163:175:nidefawl.qubes.path.Path createPath(nidefawl.qubes.path.PathPoint,nidefawl.qubes.path.PathPoint) -> do
    178:191:nidefawl.qubes.path.PathPoint addPoint(int,int,int) -> do
nidefawl.qubes.path.PathList -> iJL1IjiJiJIjJi:
    java.util.LinkedList list -> do
    java.util.Comparator comparator -> do
    java.util.List points -> do
    21:22:void reset() -> do
    25:33:void addPoint(nidefawl.qubes.path.PathPoint) -> do
    39:39:boolean isEmpty() -> do
    42:44:nidefawl.qubes.path.PathPoint pop() -> do
    47:51:void updateCost(nidefawl.qubes.path.PathPoint,float) -> do
nidefawl.qubes.path.PathList$1 -> jIiJIjlliJJiJill:
    nidefawl.qubes.path.PathList this$0 -> do
    15:15:int compare(nidefawl.qubes.path.PathPoint,nidefawl.qubes.path.PathPoint) -> do
    11:11:int compare(java.lang.Object,java.lang.Object) -> compare
nidefawl.qubes.path.PathPoint -> IjIjJijIiJ1LIj1L:
    int x -> do
    int y -> if
    int z -> for
    float totalPathDistance -> do
    float distanceToNext -> if
    float distanceToTarget -> for
    boolean isFirst -> do
    int pos -> int
    nidefawl.qubes.path.PathPoint previous -> do
    29:30:float distanceTo(nidefawl.qubes.path.PathPoint) -> do
    35:39:boolean equals(java.lang.Object) -> equals
    43:43:int hashCode() -> hashCode
    47:47:boolean inUse() -> do
    51:52:void getPosition(nidefawl.qubes.entity.EntityAI,nidefawl.qubes.vec.Vec3D) -> do
    56:56:java.lang.String toString() -> toString
nidefawl.qubes.path.RandomPosGen -> Ij1L1L1L1LllJiJi:
    nidefawl.qubes.vec.BlockPos tmp -> do
    12:36:nidefawl.qubes.vec.BlockPos find(nidefawl.qubes.entity.Entity,nidefawl.qubes.vec.Vec3D,int,int) -> do
nidefawl.qubes.perf.GPUProfiler -> IjIjjIIjL11LlljI:
    nidefawl.qubes.util.Pool taskPool -> do
    java.util.ArrayList queryObjects -> do
    int frameCounter -> do
    java.util.ArrayList completedFrames -> if
    boolean DISABLE_FRAME -> do
    63:69:void start(java.lang.String) -> do
    72:78:void end() -> do
nidefawl.qubes.perf.GPUProfiler$1 -> IjjIL1JijIll1LiJ:
nidefawl.qubes.perf.TimingHelper -> iJIjiJIjiJJiiJiJ:
    boolean useNanos -> do
    boolean init -> if
    int LEN -> do
    long[] nanos -> do
    long[] millis -> if
    long[] calls -> for
    long[] beginNanos -> int
    long[] beginMillis -> new
    boolean[] on -> do
    java.lang.String[] names -> do
    java.util.HashMap map -> do
    int jObjectIdx -> if
    java.util.Stack stack -> do
    63:77:boolean start(int) -> do
    80:83:void startSilent(int) -> do
    96:116:long end(int) -> do
    124:136:boolean hasChild(int) -> if
    139:180:void dump() -> do
    185:185:boolean hasName(int) -> for
    195:199:void reset() -> if
nidefawl.qubes.perf.TimingHelper$1 -> L1lliJL1iJiJ1LjI:
    java.util.HashMap val$entries -> do
    163:163:int compare(java.lang.Integer,java.lang.Integer) -> do
    160:160:int compare(java.lang.Object,java.lang.Object) -> compare
nidefawl.qubes.perf.TimingHelper$TimingEntry -> ll1LjIL1IjL1llll:
    float perCall -> do
    int idx -> do
nidefawl.qubes.player.EntityData -> L11LJillJiIjIj1L:
nidefawl.qubes.player.PlayerData -> IjlljIllL1iJlljI:
    java.util.UUID world -> do
    boolean flying -> do
    int chunkLoadDistance -> do
    java.util.HashSet joinedChannels -> do
    java.util.HashMap worldPositions -> do
    java.util.List invStacks -> do
    java.util.List[] invCraftStacks -> do
    nidefawl.qubes.nbt.Tag$Compound[] craftingStates -> do
    nidefawl.qubes.nbt.Tag$Compound properties -> do
    38:65:void load(nidefawl.qubes.nbt.Tag$Compound) -> do
    68:88:nidefawl.qubes.nbt.Tag save() -> do
nidefawl.qubes.render.AbstractRenderer -> lllliJlljI1LjIiJ:
    boolean recompileShaders -> if
    java.util.List resourcesShaders -> if
    java.util.List resourcesShadersNew -> for
    java.util.List resourcesFramebuffers -> int
    25:37:void addResource(nidefawl.qubes.util.IManagedResource) -> do
    41:47:void release() -> try
    53:54:void pushCurrentShaders() -> byte
    60:66:void popNewShaders() -> case
    72:76:void releaseNewShaders() -> char
    81:97:void releaseAll(nidefawl.qubes.util.EResourceType) -> do
nidefawl.qubes.render.AbstractRenderer$1 -> JiL1jIllJiiJiJiJ:
    int[] $SwitchMap$nidefawl$qubes$util$EResourceType -> do
nidefawl.qubes.render.BlurRenderer -> IjjIL1IjjI1Lll:
    nidefawl.qubes.gl.FrameBuffer fbBlur1 -> do
    nidefawl.qubes.gl.FrameBuffer fbBlur2 -> if
    nidefawl.qubes.gl.FrameBuffer fbSSRBlurredX -> for
    nidefawl.qubes.gl.FrameBuffer fbSSRBlurredY -> int
    nidefawl.qubes.shader.Shader shaderBlurSeperate -> do
    nidefawl.qubes.shader.Shader shaderBlurKawase -> if
    boolean startup -> do
    int[][] kawaseKernelSizePasses -> do
    float w1 -> do
    float h1 -> if
    46:69:void initShaders() -> do
    71:87:int renderBlur1PassDownsample(int) -> do
    90:102:int renderBlurSeperate(int,int) -> do
    105:108:void resize(int,int) -> do
    112:114:void initBlurSepeate(int,int,int) -> do
    116:121:void initBlurKawase(int,int,int) -> if
    124:125:void init() -> if
nidefawl.qubes.render.FinalRenderer -> JiiJJilllljIjIll:
    nidefawl.qubes.shader.Shader shaderBloomCombine -> do
    nidefawl.qubes.shader.Shader shaderFinal -> if
    nidefawl.qubes.shader.Shader shaderDeferred -> for
    nidefawl.qubes.shader.Shader shaderDeferredWater -> int
    nidefawl.qubes.shader.Shader shaderDeferredFirstPerson -> new
    nidefawl.qubes.shader.Shader shaderInterpLum -> try
    nidefawl.qubes.shader.Shader shaderThreshold -> byte
    nidefawl.qubes.shader.Shader shaderSSR -> case
    nidefawl.qubes.shader.Shader shaderSSRCombine -> char
    nidefawl.qubes.shader.Shader shaderDownsample4x -> else
    nidefawl.qubes.shader.Shader shaderDownsample4xLum -> goto
    nidefawl.qubes.shader.Shader shaderNormals -> long
    nidefawl.qubes.gl.FrameBuffer fbScene -> try
    nidefawl.qubes.gl.FrameBuffer fbSSR -> do
    nidefawl.qubes.gl.FrameBuffer fbSSRCombined -> if
    nidefawl.qubes.gl.FrameBuffer fbDeferred -> for
    nidefawl.qubes.gl.FrameBuffer fbSSAO -> int
    nidefawl.qubes.gl.FrameBuffer fbFinal -> new
    nidefawl.qubes.gl.FrameBuffer[] fbLuminanceDownsample -> do
    nidefawl.qubes.gl.FrameBuffer[] fbLuminanceInterp -> if
    int preWaterDepthTex -> do
    boolean startup -> for
    int ssr -> if
    int frame -> for
    nidefawl.qubes.render.post.SMAA smaa -> do
    boolean aoNeedsInit -> do
    int[] aoSize -> do
    67:130:void renderDeferred(nidefawl.qubes.world.World,float,int) -> do
    132:133:void bindFB() -> do
    135:136:void clearFrameBuffer() -> if
    140:183:void calcLum(nidefawl.qubes.world.World,float) -> do
    190:192:void render(nidefawl.qubes.world.World,float,int) -> if
    194:195:void renderBlur(nidefawl.qubes.world.World,float) -> if
    198:198:int getSsr() -> do
    206:219:void raytraceSSR(nidefawl.qubes.world.World,float) -> for
    230:257:void combineSSR(nidefawl.qubes.world.World,float) -> int
    261:300:void renderFinal(nidefawl.qubes.world.World,float) -> new
    312:316:void copyPreWaterDepth() -> for
    318:324:void copySceneDepthBuffer() -> int
    326:367:void renderBloom(nidefawl.qubes.world.World,float) -> try
    372:533:void initShaders() -> new
    538:565:void initAO() -> else
    575:586:void updateHBAOSettings() -> goto
    588:596:void initAA() -> long
    599:686:void resize(int,int) -> do
    689:693:void aoReinit() -> this
    697:699:void release() -> try
    704:707:void init() -> void
    712:714:void setSSR(int) -> do
nidefawl.qubes.render.FinalRenderer$1 -> L1iJL1iJ1LIjlljI:
    nidefawl.qubes.render.FinalRenderer this$0 -> do
    378:382:java.lang.String getDefinition(java.lang.String) -> getDefinition
nidefawl.qubes.render.FinalRenderer$2 -> L1Ij1LL1IjjIIjJi:
    nidefawl.qubes.render.FinalRenderer this$0 -> do
    389:392:java.lang.String getDefinition(java.lang.String) -> getDefinition
nidefawl.qubes.render.FinalRenderer$3 -> lllliJJilliJjIL1:
    nidefawl.qubes.render.FinalRenderer this$0 -> do
    398:401:java.lang.String getDefinition(java.lang.String) -> getDefinition
nidefawl.qubes.render.FinalRenderer$4 -> llJiJiL1L1jIiJ1L:
    nidefawl.qubes.render.FinalRenderer this$0 -> do
    407:410:java.lang.String getDefinition(java.lang.String) -> getDefinition
nidefawl.qubes.render.FinalRenderer$5 -> llL11LIjlllliJJi:
    nidefawl.qubes.render.FinalRenderer this$0 -> do
    416:419:java.lang.String getDefinition(java.lang.String) -> getDefinition
nidefawl.qubes.render.FinalRenderer$6 -> L1Ij1LL1L1L1jIjI:
    nidefawl.qubes.render.FinalRenderer this$0 -> do
    426:428:java.lang.String getDefinition(java.lang.String) -> getDefinition
nidefawl.qubes.render.FinalRenderer$7 -> jIjI1L1LL1Ji1LIj:
    nidefawl.qubes.render.FinalRenderer this$0 -> do
    439:441:java.lang.String getDefinition(java.lang.String) -> getDefinition
nidefawl.qubes.render.LightCompute -> L1ll1LiJIj1LiJjI:
    nidefawl.qubes.shader.Shader shaderComputerLight -> do
    int[] lightTiles -> do
    nidefawl.qubes.shader.ShaderBuffer lights -> do
    int lightTilesTex -> do
    boolean startup -> do
    int[] debugResults -> if
    int numLights -> if
    46:67:void initShaders() -> do
    73:75:void init() -> if
    78:88:void resize(int,int) -> do
    91:115:void updateLights(nidefawl.qubes.world.WorldClient,float) -> do
    117:145:void render(nidefawl.qubes.world.WorldClient,float,int) -> do
    149:236:void renderDebug() -> for
    239:239:int getTexture() -> do
nidefawl.qubes.render.ShadowRenderer -> L1iJ1LlljIL1Ijll:
    nidefawl.qubes.shader.Shader shadowShader -> do
    boolean startup -> do
    int renderMode -> do
    int SHADOW_BUFFER_SIZE -> if
    java.lang.String[] shaderNames -> do
    nidefawl.qubes.gl.FrameBuffer fbShadow -> do
    46:78:void initShaders() -> do
    82:84:void init() -> if
    89:134:void renderMultiPass(nidefawl.qubes.world.World,float) -> do
    139:176:void renderMultiPassTextured(nidefawl.qubes.world.World,float) -> if
    179:184:void renderShadowPass(nidefawl.qubes.world.World,float) -> for
    187:194:void resize(int,int) -> do
    197:197:int getDepthTex() -> do
    201:201:int getDebugTexture() -> if
    205:205:float getTextureSize() -> do
nidefawl.qubes.render.ShadowRenderer$1 -> JiJillllIjJiiJiJ:
    nidefawl.qubes.render.ShadowRenderer this$0 -> do
    52:55:java.lang.String getDefinition(java.lang.String) -> getDefinition
nidefawl.qubes.render.SkyRenderer -> IjJillL1jIiJ1Lll:
    nidefawl.qubes.gl.FrameBuffer fbSkybox -> do
    nidefawl.qubes.shader.Shader spriteShader -> do
    nidefawl.qubes.shader.Shader cloudsShader -> if
    boolean startup -> do
    nidefawl.qubes.gl.GLVBO vboAttr -> do
    nidefawl.qubes.gl.GLVBO vboStaticQuad -> if
    nidefawl.qubes.gl.GLVBO vboIdx -> for
    nidefawl.qubes.gl.CubeMapCamera cubeMatrix -> do
    nidefawl.qubes.meshing.BlockFaceAttr attr -> do
    int vaoPos -> for
    java.util.List clouds -> do
    nidefawl.qubes.gl.ReallocIntBuffer vertexUploadDirectBuf -> do
    int storedSprites -> do
    int totalSpritesRendered -> if
    nidefawl.qubes.gl.VertexBuffer vertexBuf -> do
    nidefawl.qubes.vec.Vector3f tmp -> do
    int[] texClouds -> do
    java.nio.ByteBuffer bufMat -> do
    java.nio.FloatBuffer bufMatFloat -> do
    float WEATHER -> do
    162:165:void increaseClouds() -> do
    167:170:void decreaseClouds() -> if
    173:198:void initShaders() -> for
    201:261:void init() -> int
    264:268:void updateSpritesTick() -> new
    270:275:void updateSprites(float) -> do
    277:289:void storeSprites(float,int) -> do
    291:336:void redraw() -> else
    338:342:void buildQuad(nidefawl.qubes.gl.VertexBuffer) -> do
    344:344:void resize(int,int) -> do
    346:363:void renderSky(nidefawl.qubes.world.WorldClient,float) -> do
    366:398:void renderSkyBox(nidefawl.qubes.world.WorldClient,float) -> if
    400:401:void tickUpdate() -> goto
nidefawl.qubes.render.SkyRenderer$Cloud -> llIjjIIjiJL1jIiJ:
    int texture -> do
    java.util.List sprites -> do
    nidefawl.qubes.vec.Vector3f mot -> do
    nidefawl.qubes.vec.Vector3f pos -> if
    nidefawl.qubes.vec.Vector3f lastPos -> for
    nidefawl.qubes.vec.Vector3f renderPos -> int
    75:83:int store(java.nio.FloatBuffer) -> do
    86:91:void update(float) -> do
    94:99:void tick() -> do
nidefawl.qubes.render.SkyRenderer$PointSprite -> iJL11LllIjjIiJL1:
    float size -> do
    float initSize -> if
    float lastSize -> for
    float renderSize -> int
    float rotspeed -> new
    float rot -> try
    float lastRot -> byte
    float renderRot -> case
    float xoffset -> char
    float yoffset -> else
    nidefawl.qubes.vec.Vector3f posOffset -> do
    nidefawl.qubes.vec.Vector3f col -> if
    nidefawl.qubes.vec.Vector3f lastCol -> for
    nidefawl.qubes.vec.Vector3f initCol -> int
    nidefawl.qubes.vec.Vector3f renderCol -> new
    nidefawl.qubes.vec.Vector3f renderPos -> try
    int tick -> do
    120:121:void setSize(float) -> do
    123:127:void setCol(float,float,float) -> do
    129:144:void update(float) -> if
    147:158:void tick() -> do
    101:101:nidefawl.qubes.vec.Vector3f access$000(nidefawl.qubes.render.SkyRenderer$PointSprite) -> do
nidefawl.qubes.render.WorldRenderer -> JilliJiJjIJiJiIj:
    nidefawl.qubes.vec.Vector3f skyColor -> do
    nidefawl.qubes.vec.Vector3f fogColor -> if
    java.util.HashMap debugBBs -> do
    java.util.HashMap debugPaths -> if
    int rendered -> do
    boolean startup -> do
    int texWaterNoise -> if
    nidefawl.qubes.shader.Shader terrainShader -> do
    nidefawl.qubes.shader.Shader terrainShaderFar -> if
    nidefawl.qubes.shader.Shader waterShader -> for
    nidefawl.qubes.shader.Shader shaderModelVoxel -> int
    nidefawl.qubes.shader.Shader shaderModelfirstPerson -> new
    nidefawl.qubes.shader.Shader shaderZPre -> try
    nidefawl.qubes.shader.Shader skybox -> byte
    int idx -> for
    int texNoise3D -> int
    nidefawl.qubes.models.qmodel.QModelProperties modelProperties -> do
    nidefawl.qubes.vec.Vector3f mPos -> for
    float modelRot -> do
    float lastModelRot -> if
    52:62:java.lang.String getPassName(int) -> do
    98:174:void initShaders() -> do
    178:248:void reloadModel() -> if
    252:292:void init() -> for
    298:370:void renderWorld(nidefawl.qubes.world.World,float) -> do
    422:437:void renderEntities(nidefawl.qubes.world.World,int,float,nidefawl.qubes.shader.Shader,int) -> do
    440:500:void renderEntitiesBatched(nidefawl.qubes.world.World,int,float,nidefawl.qubes.shader.Shader,int) -> if
    519:527:void renderTransparent(nidefawl.qubes.world.World,float) -> if
    530:631:void renderFirstPerson(nidefawl.qubes.world.World,float) -> for
    634:652:void renderNormals(nidefawl.qubes.world.World,float) -> int
    655:668:void renderTerrainWireFrame(nidefawl.qubes.world.World,float) -> new
    675:744:void renderDebugBB(nidefawl.qubes.world.World,float) -> try
    747:818:void resize(int,int) -> do
    827:828:void setModelPos(float,float,float) -> do
    831:837:void tickUpdate() -> int
nidefawl.qubes.render.WorldRenderer$1 -> IjiJL1iJJillL1ll:
    nidefawl.qubes.render.WorldRenderer this$0 -> do
    105:108:java.lang.String getDefinition(java.lang.String) -> getDefinition
nidefawl.qubes.render.WorldRenderer$2 -> JillJiJi1LL1iJIj:
    nidefawl.qubes.render.WorldRenderer this$0 -> do
    117:120:java.lang.String getDefinition(java.lang.String) -> getDefinition
nidefawl.qubes.render.WorldRenderer$3 -> IjlljIllllJilljI:
    nidefawl.qubes.render.WorldRenderer this$0 -> do
    182:182:boolean accept(java.io.File) -> accept
nidefawl.qubes.render.gui.SingleBlockDraw -> JiL1L1L1iJiJL1Ji:
    nidefawl.qubes.gl.GLVBO vbo -> do
    nidefawl.qubes.gl.GLVBO vboIdx -> if
    nidefawl.qubes.gl.ReallocIntBuffer vboBuf -> do
    nidefawl.qubes.gl.ReallocIntBuffer vboIdxBuf -> if
    nidefawl.qubes.gl.BufferedMatrix modelMatrix -> do
    nidefawl.qubes.gl.BufferedMatrix projMatrix -> if
    float x -> do
    float y -> if
    float z -> for
    float scale -> int
    float rotX -> new
    float rotY -> try
    float rotZ -> byte
    java.util.LinkedList queue -> do
    75:81:void init() -> do
    87:110:void drawBlockDefault(nidefawl.qubes.block.Block,int,nidefawl.qubes.item.StackData) -> do
    112:120:void addToQueue(nidefawl.qubes.block.Block,int,nidefawl.qubes.item.StackData) -> int
    123:175:void processQueue() -> if
    178:191:void drawBlock(nidefawl.qubes.block.Block,int,nidefawl.qubes.item.StackData) -> if
    194:206:void doRender(nidefawl.qubes.block.Block,int,nidefawl.qubes.item.StackData) -> for
    213:216:void setOffset(float,float,float) -> do
    222:223:void setScale(float) -> do
    232:235:void setRotation(float,float,float) -> if
nidefawl.qubes.render.gui.SingleBlockDraw$BlockDrawQueueEntry -> L1ll1LiJjIIjiJJi:
    nidefawl.qubes.block.Block block -> do
    int data -> do
    nidefawl.qubes.item.StackData stackData -> do
    60:60:boolean is(nidefawl.qubes.block.Block,int,nidefawl.qubes.item.StackData) -> do
nidefawl.qubes.render.gui.SingleBlockRenderAtlas -> iJ1LjI1LjIIjiJiJ:
    nidefawl.qubes.render.gui.SingleBlockRenderAtlas instance -> do
    byte[] defaultData -> do
    nidefawl.qubes.render.gui.SingleBlockRenderAtlas$TextureAtlas[] textures -> do
    java.util.Map map -> do
    63:63:float getTexW() -> do
    66:66:float getX(int) -> do
    69:69:float getY(int) -> if
    72:72:int getXPx(int) -> do
    75:75:int getYPx(int) -> if
    81:94:nidefawl.qubes.render.gui.SingleBlockRenderAtlas$TextureAtlas getFirstFreeTextureAtlas() -> do
    100:100:nidefawl.qubes.render.gui.SingleBlockRenderAtlas getInstance() -> do
    107:112:boolean needsRender(nidefawl.qubes.block.Block,int,nidefawl.qubes.item.StackData) -> do
    116:124:nidefawl.qubes.render.gui.SingleBlockRenderAtlas$TextureAtlas getAtlas(int,boolean) -> do
    127:129:nidefawl.qubes.render.gui.SingleBlockRenderAtlas$TextureAtlas getAtlas(nidefawl.qubes.block.Block,int,nidefawl.qubes.item.StackData) -> do
    135:135:void init() -> do
    139:147:void setupTextureAtlas(nidefawl.qubes.render.gui.SingleBlockRenderAtlas$TextureAtlas) -> do
    150:158:void reset() -> if
    163:168:int getTexture(nidefawl.qubes.block.Block,int,nidefawl.qubes.item.StackData) -> do
    172:177:int getTextureIdx(nidefawl.qubes.block.Block,int,nidefawl.qubes.item.StackData) -> if
    180:181:int getHash(nidefawl.qubes.block.Block,int,nidefawl.qubes.item.StackData) -> for
nidefawl.qubes.render.gui.SingleBlockRenderAtlas$TextureAtlas -> iJjIJill1LL1lljI:
    int[] hashes -> do
    int idx -> do
    nidefawl.qubes.gl.FrameBuffer frameBuffer -> do
    47:56:int getTextureIdx(int) -> do
    59:59:boolean hasFree() -> do
nidefawl.qubes.render.gui.SingleBlockRenderer -> llJiIjIjiJL1JijI:
    nidefawl.qubes.vec.BlockPos offset -> do
    nidefawl.qubes.util.SingleBlockWorld singleBlockWorld -> do
    nidefawl.qubes.gl.VertexBuffer singleBlockBuffer -> do
    32:46:nidefawl.qubes.gl.VertexBuffer renderSingleBlock(nidefawl.qubes.block.Block,int,nidefawl.qubes.item.StackData) -> do
    51:52:void putBuffer(nidefawl.qubes.block.Block,int) -> do
    54:55:void putSingleVert(nidefawl.qubes.block.Block,int,int) -> do
    57:58:void putTriIndex(nidefawl.qubes.block.Block,int,int[],int,int) -> do
    60:60:boolean isInventoryBlockRender() -> do
nidefawl.qubes.render.post.HBAOPlus -> nidefawl.qubes.render.post.HBAOPlus:
    boolean hasContext -> hasContext
    boolean needsInit -> needsInit
    void createContext(int,int) -> createContext
    void deleteContext() -> deleteContext
    void renderAO() -> renderAO
    void setProjMatrix(long) -> setProjMatrix
    void setViewMatrix(long) -> setViewMatrix
    void setOutputFBO(int) -> setOutputFBO
    void setDepthTex(int) -> setDepthTex
    void setRenderMask(int) -> setRenderMask
    void setNormalTex(int) -> setNormalTex
    void setBias(float) -> setBias
    void setNormalDecodeScaleBias(float,float) -> setNormalDecodeScaleBias
    void setRadius(float) -> setRadius
    void setDetailAO(float) -> setDetailAO
    void setCoarseAO(float) -> setCoarseAO
    void setPowerExponent(float) -> setPowerExponent
    void setDepthStorage(int) -> setDepthStorage
    void setDepthClampMode(int) -> setDepthClampMode
    void setDepthThreshold(boolean,float,float) -> setDepthThreshold
    void setBlur(boolean,int,float) -> setBlur
    void setBlurSharpen(boolean,float,float,float) -> setBlurSharpen
    void debugControl(int) -> debugControl
    java.lang.String[] getCallStack() -> getCallStack
nidefawl.qubes.render.post.SMAA -> llJillJilljIJiiJ:
    nidefawl.qubes.util.SimpleResourceManager mgr -> do
    nidefawl.qubes.shader.Shader shaderAAEdge -> do
    nidefawl.qubes.shader.Shader shaderAABlendWeight -> if
    nidefawl.qubes.shader.Shader shaderAANeighborBlend -> for
    nidefawl.qubes.gl.FrameBuffer fbAAEdge -> do
    nidefawl.qubes.gl.FrameBuffer fbAAWeightBlend -> if
    int areaTex -> do
    int searchTex -> if
    java.lang.String[] qualDefines -> do
    java.lang.String[] qualDesc -> if
    91:108:void init(int,int) -> do
    112:145:int makeAATexture(byte[],int,int,int,int,int) -> do
    149:151:void releaseAll(nidefawl.qubes.util.EResourceType) -> do
    158:219:void render(int,int) -> if
nidefawl.qubes.render.post.SMAA$1 -> jIJillIjL1L11LL1:
    int val$quality -> do
    nidefawl.qubes.render.post.SMAA this$0 -> do
    58:61:java.lang.String getDefinition(java.lang.String) -> getDefinition
nidefawl.qubes.render.region.MeshedRegion -> llL11L1LJiL1JiiJ:
    int[] vertexCount -> do
    int[] elementCount -> if
    boolean[] hasPass -> do
    int rX -> do
    int rZ -> if
    int rY -> for
    boolean xNeg -> do
    boolean xPos -> if
    boolean zPos -> for
    boolean zNeg -> int
    nidefawl.qubes.vec.AABBInt aabb -> do
    int[] frustumStates -> for
    boolean needsUpdate -> new
    boolean isUpdating -> try
    boolean isRenderable -> byte
    boolean isValid -> case
    int failedCached -> int
    boolean hasAnyPass -> char
    nidefawl.qubes.gl.GLVBO[] vbo -> do
    nidefawl.qubes.gl.GLVBO[] vboIndices -> if
    int shadowDrawMode -> else
    boolean frustumStateChanged -> else
    int occlusionQueryState -> new
    int occlusionResult -> try
    int occlFrameSkips -> byte
    int distance -> case
    nidefawl.qubes.vec.Vector3f queryPos -> do
    long totalBytes -> do
    long[] alloc -> do
    long[] totalBytesPass -> if
    int nextBuffer -> char
    60:66:void renderRegion(float,int) -> do
    70:81:void renderRegionIndirect(nidefawl.qubes.gl.MultiDrawIndirectBuffer,int) -> do
    86:104:void preUploadBuffers() -> do
    111:145:void uploadBuffer(int,nidefawl.qubes.gl.VertexBuffer,int) -> do
    149:168:void release() -> if
    171:171:int getNumVertices(int) -> do
    175:175:boolean hasPass(int) -> do
    179:190:void updateBB() -> for
    194:194:java.lang.String toString() -> toString
    200:200:boolean hasAnyPass() -> do
    203:203:int getShadowDrawMode() -> do
nidefawl.qubes.render.region.RegionRenderer -> iJiJ1LIjIjJiiJIj:
    int RENDER_DISTANCE -> do
    int OFFS_OVER -> if
    int LENGTH_OVER -> for
    int HEIGHT_SLICES -> int
    java.util.Comparator compareUpdateRenderers -> do
    java.util.Comparator compareRenderers -> if
    int rendered -> new
    int occlCulled -> try
    int renderChunkX -> byte
    int renderChunkY -> case
    int renderChunkZ -> char
    java.util.ArrayList renderList -> do
    java.util.ArrayList shadowRenderList -> if
    java.util.ArrayList regionsToUpdate -> for
    boolean needsSortingUpdateRenderers -> do
    int[] occlQueries -> do
    nidefawl.qubes.render.region.MeshedRegion[] occlQueriesRunning -> do
    int queriesRunning -> else
    nidefawl.qubes.shader.Shader occlQueryShader -> do
    boolean startup -> for
    float camX -> do
    float camY -> if
    float camZ -> for
    nidefawl.qubes.render.region.MeshedRegion[][] regions -> do
    int numV -> goto
    nidefawl.qubes.gl.ReallocIntBuffer[] buffers -> do
    nidefawl.qubes.gl.ReallocIntBuffer[] idxShortBuffers -> if
    nidefawl.qubes.gl.MultiDrawIndirectBuffer buffer -> do
    132:136:void init() -> do
    140:157:void initShaders() -> if
    160:174:nidefawl.qubes.render.region.MeshedRegion[][] create() -> do
    178:221:void reposition(int,int) -> if
    224:235:nidefawl.qubes.render.region.MeshedRegion getByChunkCoord(int,int,int) -> do
    238:244:nidefawl.qubes.render.region.MeshedRegion getByRegionCoord(int,int,int) -> if
    248:264:void resetAll() -> for
    267:271:void setRenderDistance(int) -> do
    274:299:void reRender() -> int
    303:320:void flagBlock(int,int,int) -> do
    323:336:void flagChunk(int,int) -> do
    424:527:void renderMain(nidefawl.qubes.world.World,float,nidefawl.qubes.render.WorldRenderer) -> do
    530:571:void renderRegions(nidefawl.qubes.world.World,float,int,int,int) -> do
    574:577:void flushRegions() -> new
    579:580:void putRegion(nidefawl.qubes.render.region.MeshedRegion) -> do
    585:712:void update(nidefawl.qubes.world.WorldClient,float,float,float,int,int,float) -> do
    717:736:void updateFrustum(nidefawl.qubes.render.region.MeshedRegion) -> if
    738:759:void tickUpdate() -> else
    762:766:void sortUpdateRenderers() -> goto
    770:771:void sortRenderers() -> long
    776:782:int sortUpdateRenderersCompare(nidefawl.qubes.render.region.MeshedRegion,nidefawl.qubes.render.region.MeshedRegion) -> do
    788:794:int sortRenderersCompare(nidefawl.qubes.render.region.MeshedRegion,nidefawl.qubes.render.region.MeshedRegion) -> if
nidefawl.qubes.render.region.RegionRenderer$1 -> JiL1JiiJL1iJIjjI:
    nidefawl.qubes.render.region.RegionRenderer this$0 -> do
    51:51:int compare(nidefawl.qubes.render.region.MeshedRegion,nidefawl.qubes.render.region.MeshedRegion) -> do
    48:48:int compare(java.lang.Object,java.lang.Object) -> compare
nidefawl.qubes.render.region.RegionRenderer$2 -> Ijll1L1L1L1L1LIj:
    nidefawl.qubes.render.region.RegionRenderer this$0 -> do
    57:57:int compare(nidefawl.qubes.render.region.MeshedRegion,nidefawl.qubes.render.region.MeshedRegion) -> do
    54:54:int compare(java.lang.Object,java.lang.Object) -> compare
nidefawl.qubes.server.GameServer -> JijIjIIjL1JiiJL1:
    nidefawl.qubes.config.ServerConfig config -> do
    nidefawl.qubes.server.commands.CommandHandler commands -> do
    java.lang.Thread mainThread -> do
    nidefawl.qubes.network.server.NetworkServer networkServer -> do
    boolean running -> do
    boolean finished -> if
    nidefawl.qubes.world.WorldServer[] worlds -> do
    java.util.HashMap worldsMap -> do
    long lastTick -> do
    long lastSaveTick -> if
    int lastSaveStep -> do
    nidefawl.qubes.util.GameError reportedException -> do
    int nextWorldID -> if
    java.util.concurrent.ConcurrentLinkedQueue commandQueue -> do
    nidefawl.qubes.server.PlayerManager playerManager -> do
    nidefawl.qubes.chat.ChannelManager channelManager -> do
    48:51:void startServer() -> do
    56:74:void run() -> run
    78:131:void load() -> int
    134:134:int getNextWorldID() -> do
    138:177:void loop() -> if
    179:186:void resyncTime() -> new
    189:197:void updateTick() -> try
    199:205:void saveAndUnloadData() -> byte
    208:208:boolean isRunning() -> do
    211:212:void stopServer() -> for
    215:240:void onShutdown() -> case
    255:255:nidefawl.qubes.config.ServerConfig getConfig() -> do
    259:259:nidefawl.qubes.server.commands.CommandHandler getCommandHandler() -> do
    264:265:void setException(nidefawl.qubes.util.GameError) -> setException
    268:268:nidefawl.qubes.server.PlayerManager getPlayerManager() -> do
    272:272:nidefawl.qubes.world.WorldServer getWorld(java.util.UUID) -> do
    276:276:nidefawl.qubes.world.WorldServer getSpawnWorld() -> do
    284:291:void save(boolean) -> do
    294:294:nidefawl.qubes.network.server.NetworkServer getNetwork() -> do
    298:298:nidefawl.qubes.world.WorldServer[] getWorlds() -> do
    306:306:nidefawl.qubes.chat.ChannelManager getChatChannelMgr() -> do
    310:310:long getServerTime() -> do
nidefawl.qubes.server.GameServer$1 -> Ij1LJiiJ1LIjlljI:
    nidefawl.qubes.server.GameServer this$0 -> do
    89:89:boolean accept(java.io.File) -> accept
nidefawl.qubes.server.LocalGameServer -> Ij1LJiIj1LIjjIIj:
    nidefawl.qubes.server.GameServer server -> do
    15:23:void start() -> do
    25:30:void stop() -> if
nidefawl.qubes.server.PlayerChunkTracker -> L1JillJijIIjjIiJ:
    java.util.Map map -> do
    java.util.Set flaggedInstances -> do
    nidefawl.qubes.world.WorldServer worldServer -> do
    int ticksLastCheck -> do
    java.util.List blocksToSend -> do
    nidefawl.qubes.vec.BlockBoundingBox box2 -> do
    153:190:void update(nidefawl.qubes.entity.PlayerServer) -> do
    200:203:void trackPlayerChunk(nidefawl.qubes.entity.PlayerServer,int,int) -> do
    213:227:void untrackPlayerChunk(nidefawl.qubes.entity.PlayerServer,int,int) -> if
    235:245:void removePlayer(nidefawl.qubes.entity.PlayerServer) -> if
    253:272:void addPlayer(nidefawl.qubes.entity.PlayerServer) -> for
    283:290:nidefawl.qubes.server.PlayerChunkTracker$Entry getEntry(int,int,boolean) -> do
    301:309:void flagBlock(int,int,int) -> do
    319:324:void flagChunk(int,int) -> do
    336:400:void sendBlockChanges() -> do
    407:412:nidefawl.qubes.network.server.ServerHandlerPlay[] getHandlerArr(nidefawl.qubes.server.PlayerChunkTracker$Entry) -> do
    421:421:int getSize() -> do
    432:440:boolean isRequired(int,int) -> do
    447:458:void recheckIfRequiredChunksLoaded(boolean) -> do
    468:478:void flagLights(int,int,nidefawl.qubes.vec.BlockBoundingBox) -> do
    495:503:void flagLights(int,int,int,int,int,int,int,int) -> do
nidefawl.qubes.server.PlayerChunkTracker$Entry -> JiJijIL11LL1iJll:
    int x -> do
    int z -> if
    java.util.List players -> do
    long hash -> do
    boolean wholeChunkUpdate -> do
    java.util.Set flaggedBlocks -> do
    nidefawl.qubes.vec.BlockBoundingBox flaggedLights -> do
    boolean hasFlaggedLights -> if
    75:76:void addPlayer(nidefawl.qubes.entity.PlayerServer) -> do
    84:85:void removePlayer(nidefawl.qubes.entity.PlayerServer) -> if
    93:93:boolean isEmpty() -> do
    118:123:void flag(int,int,int) -> do
nidefawl.qubes.server.PlayerEntityTracker -> JillJiJijIIjIjll:
    java.util.Map map -> do
    nidefawl.qubes.entity.PlayerServer player -> do
    63:64:void leaveWorld() -> do
    68:76:void joinWorld(nidefawl.qubes.world.WorldServer) -> do
    79:116:void update() -> if
    119:135:void track(nidefawl.qubes.entity.Entity) -> do
    142:153:nidefawl.qubes.network.packet.PacketSEntityTrack getPacket(nidefawl.qubes.server.PlayerEntityTracker$Entry) -> do
    156:166:void untrack(nidefawl.qubes.entity.Entity) -> if
nidefawl.qubes.server.PlayerEntityTracker$Entry -> Ij1L1L1LlliJiJ:
    nidefawl.qubes.entity.Entity entity -> do
    nidefawl.qubes.vec.Vec3D pos -> do
    float yaw -> do
    float pitch -> if
    float yawBodyOffset -> for
    nidefawl.qubes.item.BaseStack[] equipment -> do
nidefawl.qubes.server.PlayerManager -> JiiJll1L1LiJiJIj:
    java.io.File directory -> do
    java.util.Map players -> do
    java.util.Map playersLowerCase -> if
    nidefawl.qubes.entity.PlayerServer[] serverPlayers -> do
    nidefawl.qubes.server.GameServer server -> do
    40:41:void init() -> do
    43:43:java.io.File getPlayerFile(java.lang.String) -> do
    47:60:nidefawl.qubes.player.PlayerData loadPlayer(java.lang.String) -> do
    64:71:void savePlayer(java.lang.String,nidefawl.qubes.player.PlayerData) -> do
    74:100:nidefawl.qubes.entity.PlayerServer addPlayer(java.lang.String) -> do
    104:109:void removePlayer(nidefawl.qubes.entity.PlayerServer) -> do
    112:123:void savePlayers() -> if
    125:125:nidefawl.qubes.entity.PlayerServer getPlayer(java.lang.String) -> if
    129:140:nidefawl.qubes.entity.PlayerServer matchPlayer(java.lang.String) -> for
    147:147:java.util.Collection getPlayers() -> do
    151:159:void updateTick() -> for
nidefawl.qubes.server.commands.Command -> L1IjL1jIL1L1IjJi:
    java.util.HashSet aliases -> do
    java.lang.String name -> do
    18:19:void addAlias(java.lang.String) -> do
    22:22:boolean matches(java.lang.String,java.lang.String[],java.lang.String) -> do
    26:26:void testPermission(nidefawl.qubes.server.commands.ICommandSource,java.lang.String,java.lang.String[],java.lang.String) -> do
    void execute(nidefawl.qubes.server.commands.ICommandSource,java.lang.String,java.lang.String[],java.lang.String) -> if
    31:31:java.lang.String getName() -> do
    35:35:boolean runSynchronized() -> do
    39:41:void checkArgs(java.lang.String[],int,int,java.lang.String) -> do
    44:48:nidefawl.qubes.entity.PlayerServer matchPlayer(nidefawl.qubes.server.GameServer,java.lang.String) -> do
nidefawl.qubes.server.commands.CommandDebug -> L1L1L11Lll1LjI:
    28:83:void execute(nidefawl.qubes.server.commands.ICommandSource,java.lang.String,java.lang.String[],java.lang.String) -> if
nidefawl.qubes.server.commands.CommandEntity -> iJ1LIj1LIjJiiJiJ:
    15:59:void execute(nidefawl.qubes.server.commands.ICommandSource,java.lang.String,java.lang.String[],java.lang.String) -> if
nidefawl.qubes.server.commands.CommandException -> iJll1LJi1LIj1L1L:
nidefawl.qubes.server.commands.CommandHandler -> JiiJlliJIjL1Jill:
    java.util.HashSet commands -> do
    15:25:void registerBaseCommands() -> do
    29:34:void register(java.lang.Class) -> do
    37:47:void handle(nidefawl.qubes.server.commands.ICommandSource,java.lang.String) -> do
    51:64:void executeCommand(nidefawl.qubes.server.commands.ICommandSource,nidefawl.qubes.server.commands.Command,java.lang.String,java.lang.String[],java.lang.String) -> do
nidefawl.qubes.server.commands.CommandKick -> llIjlllllljIIjL1:
    14:23:void execute(nidefawl.qubes.server.commands.ICommandSource,java.lang.String,java.lang.String[],java.lang.String) -> if
nidefawl.qubes.server.commands.CommandList -> jIjIIjll1L1L1LIj:
    15:24:void execute(nidefawl.qubes.server.commands.ICommandSource,java.lang.String,java.lang.String[],java.lang.String) -> if
nidefawl.qubes.server.commands.CommandSave -> jIL1JiiJL1JiL1Ji:
    11:16:void execute(nidefawl.qubes.server.commands.ICommandSource,java.lang.String,java.lang.String[],java.lang.String) -> if
nidefawl.qubes.server.commands.CommandSetTime -> L1lllljIL1Ij1L1L:
    14:48:void execute(nidefawl.qubes.server.commands.ICommandSource,java.lang.String,java.lang.String[],java.lang.String) -> if
    54:59:void showTime(nidefawl.qubes.server.commands.ICommandSource) -> do
nidefawl.qubes.server.commands.CommandStats -> JiiJJi1LJiiJL11L:
    13:24:void execute(nidefawl.qubes.server.commands.ICommandSource,java.lang.String,java.lang.String[],java.lang.String) -> if
nidefawl.qubes.server.commands.CommandStop -> IjIjllJi1LjIiJ:
    11:12:void execute(nidefawl.qubes.server.commands.ICommandSource,java.lang.String,java.lang.String[],java.lang.String) -> if
    15:15:boolean runSynchronized() -> do
nidefawl.qubes.server.commands.CommandTP -> lliJllllIjIjllll:
    14:24:void execute(nidefawl.qubes.server.commands.ICommandSource,java.lang.String,java.lang.String[],java.lang.String) -> if
nidefawl.qubes.server.commands.CommandToCoord -> JiiJJillllllJiiJ:
    13:19:void execute(nidefawl.qubes.server.commands.ICommandSource,java.lang.String,java.lang.String[],java.lang.String) -> if
nidefawl.qubes.server.commands.ICommandSource -> L1iJiJL11LJijIjI:
    void preExecuteCommand(nidefawl.qubes.server.commands.Command) -> do
    void onUnknownCommand(java.lang.String,java.lang.String) -> if
    nidefawl.qubes.server.GameServer getServer() -> do
    void onError(nidefawl.qubes.server.commands.Command,nidefawl.qubes.server.commands.CommandException) -> do
    void sendMessage(java.lang.String) -> if
    nidefawl.qubes.world.WorldServer getWorld() -> do
nidefawl.qubes.server.commands.PreparedCommand -> JillIjllL1IjJi:
    nidefawl.qubes.server.commands.ICommandSource source -> do
    nidefawl.qubes.server.commands.Command c -> do
    java.lang.String cmd -> do
    java.lang.String[] args -> do
    java.lang.String line -> if
    20:28:void run() -> do
nidefawl.qubes.server.compress.CompressChunks -> llJijIL11LJiIjll:
    java.util.Collection chunks -> do
    int worldid -> do
    int[][] coords -> do
    nidefawl.qubes.network.server.ServerHandlerPlay[] handlers -> do
    boolean hasLight -> do
    33:37:void shortToByteArray(short[],byte[],int) -> do
    41:113:int fill(byte[]) -> do
    118:142:void finish(byte[]) -> do
    147:164:boolean isValid() -> do
nidefawl.qubes.server.compress.CompressLight -> llL11LllIjllJijI:
    nidefawl.qubes.chunk.Chunk chunks -> do
    int worldid -> do
    int chunkLen -> if
    nidefawl.qubes.network.server.ServerHandlerPlay[] handlers -> do
    int coordZ -> for
    int coordX -> int
    nidefawl.qubes.vec.BlockBoundingBox box -> do
    33:40:int fill(byte[]) -> do
    45:68:void finish(byte[]) -> do
    73:90:boolean isValid() -> do
nidefawl.qubes.server.compress.CompressThread -> L11LiJllllL11L:
    java.lang.Thread thread -> do
    java.util.concurrent.LinkedBlockingQueue queue -> do
    nidefawl.qubes.server.GameServer server -> do
    22:50:void run() -> run
    53:57:void startNewThread(nidefawl.qubes.server.GameServer) -> do
    60:61:void submit(nidefawl.qubes.server.compress.ICompressTask) -> do
nidefawl.qubes.server.compress.ICompressTask -> JiIjJijIiJJiiJll:
    int fill(byte[]) -> do
    void finish(byte[]) -> do
    boolean isValid() -> do
nidefawl.qubes.shader.AbstractUniform -> JillJillJi1LL1jI:
    java.lang.String name -> do
    int loc -> do
    boolean first -> do
    13:13:boolean validLoc() -> do
    18:18:void release() -> do
nidefawl.qubes.shader.ComputeShader -> JijIjIL1JiL1Ji:
    int computeShader -> do
    40:47:void attach() -> do
    49:66:void release() -> long
nidefawl.qubes.shader.GraphicShader -> JiL1iJJilliJL1L1:
    int fragShader -> do
    int vertShader -> if
    int geometryShader -> for
    java.lang.String attr -> if
    98:150:void attach() -> do
    152:177:void release() -> long
nidefawl.qubes.shader.IShaderDef -> llllIjIjJiJijI:
    java.lang.String getDefinition(java.lang.String) -> getDefinition
nidefawl.qubes.shader.Shader -> iJjIL1ll1LllJiL1:
    int SHADERS -> int
    int shader -> new
    java.lang.String name -> do
    java.util.HashMap locations -> do
    java.util.HashMap uniforms -> if
    java.util.HashMap missinglocations -> for
    boolean valid -> do
    nidefawl.qubes.shader.ShaderSourceBundle src -> do
    java.util.HashMap map -> int
    java.nio.IntBuffer buf -> do
    int lastBoundShader -> try
    31:32:void incUniformCalls() -> if
    36:51:int getUniformLocation(java.lang.String) -> do
    61:61:java.lang.String getName() -> do
    77:96:void linkProgram() -> for
    100:102:int getStatus(int,int) -> do
    106:114:java.lang.String getLog(int,int) -> do
    117:129:void enable() -> int
    132:135:void disable() -> new
    void release() -> long
    139:143:void setProgramUniform1i(java.lang.String,int) -> do
    152:156:void setProgramUniform2f(java.lang.String,float,float) -> do
    158:162:void setProgramUniform1f(java.lang.String,float) -> do
    164:168:void setProgramUniform3f(java.lang.String,float,float,float) -> do
    170:184:nidefawl.qubes.shader.AbstractUniform getUniform(java.lang.String,java.lang.Class) -> do
    188:192:void setProgramUniform4f(java.lang.String,float,float,float,float) -> do
    204:208:void setProgramUniformMatrix4(java.lang.String,boolean,java.nio.FloatBuffer,boolean) -> do
    234:234:nidefawl.qubes.util.EResourceType getType() -> do
    248:249:void setSource(nidefawl.qubes.shader.ShaderSourceBundle) -> do
    251:251:nidefawl.qubes.shader.ShaderSourceBundle getSource() -> do
nidefawl.qubes.shader.ShaderBuffer -> jIlljIJiL1jIlliJ:
    java.util.List buffers -> do
    int nextIdx -> do
    java.lang.String name -> do
    int buffer -> for
    int len -> if
    int bindingPoint -> int
    java.util.List shaders -> if
    java.nio.ByteBuffer buf -> if
    java.nio.FloatBuffer bufFloat -> if
    java.nio.IntBuffer bufInt -> do
    java.nio.ByteBuffer readBuf -> do
    java.nio.FloatBuffer readBufFloat -> do
    51:52:nidefawl.qubes.shader.ShaderBuffer setSize(int) -> do
    55:80:void update() -> do
    82:97:void setup() -> if
    100:107:void rebindShaders() -> for
    109:114:void init() -> int
    116:129:void bindBuffers(nidefawl.qubes.shader.Shader) -> do
    135:143:void addShader(nidefawl.qubes.shader.Shader) -> if
    145:145:java.nio.FloatBuffer getFloatBuffer() -> do
    149:149:java.nio.IntBuffer getIntBuffer() -> do
    152:152:java.nio.ByteBuffer getBuf() -> do
    155:167:java.nio.ByteBuffer map(boolean) -> do
    171:187:java.nio.ByteBuffer _map(boolean) -> if
    201:202:void unmap() -> new
    204:205:void unbind() -> try
    207:208:void bind() -> byte
    213:215:void clearBuffers() -> case
nidefawl.qubes.shader.ShaderCompileError -> jIlljIIjllllJiJi:
    java.lang.String name -> do
    java.lang.String log -> if
    nidefawl.qubes.shader.ShaderSource code -> do
    31:31:java.lang.String getName() -> do
    35:35:java.lang.String getLog() -> if
    43:43:nidefawl.qubes.shader.ShaderSource getShaderSource() -> do
nidefawl.qubes.shader.ShaderSource -> IjIjjIiJJi1LJiIj:
    java.util.regex.Pattern patternInclude -> do
    java.util.regex.Pattern patternDefine -> if
    java.util.regex.Pattern patternAttr -> for
    java.util.regex.Pattern lineErrorAMD -> int
    java.util.regex.Pattern lineErrorNVIDIA -> new
    java.util.HashMap sources -> do
    java.util.HashMap sourceNames -> if
    java.lang.String processed -> do
    int nInclude -> do
    java.lang.String attrTypes -> if
    nidefawl.qubes.shader.ShaderSourceBundle shaderSourceBundle -> do
    41:42:void load(nidefawl.qubes.assets.AssetManager,java.lang.String,java.lang.String,nidefawl.qubes.shader.IShaderDef) -> do
    44:149:java.lang.String readParse(nidefawl.qubes.assets.AssetManager,java.lang.String,java.lang.String,nidefawl.qubes.shader.IShaderDef,boolean) -> do
    157:187:java.lang.String getGlobalDef(java.lang.String) -> if
    190:190:boolean isEmpty() -> do
    193:193:java.lang.String getSource() -> do
    196:234:java.lang.String decorateErrors(java.lang.String) -> do
    237:237:java.lang.String getAttrTypes() -> if
nidefawl.qubes.shader.ShaderSourceBundle -> iJllJill1LIjL1Ji:
    nidefawl.qubes.shader.ShaderSource computeCode -> do
    nidefawl.qubes.shader.ShaderSource vertCode -> if
    nidefawl.qubes.shader.ShaderSource fragCode -> for
    nidefawl.qubes.shader.ShaderSource geomCode -> int
    java.lang.String name -> do
    19:23:void load(nidefawl.qubes.assets.AssetManager,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,nidefawl.qubes.shader.IShaderDef) -> do
    26:30:nidefawl.qubes.shader.Shader compileShader() -> do
    38:38:nidefawl.qubes.shader.ShaderSource getFragment() -> do
nidefawl.qubes.shader.Shaders -> IjjIL11LjIJiIjiJ:
    nidefawl.qubes.util.SimpleResourceManager shaders -> do
    nidefawl.qubes.util.SimpleResourceManager newshaders -> if
    boolean startup -> do
    nidefawl.qubes.shader.Shader depthBufShader -> do
    nidefawl.qubes.shader.Shader normals -> if
    nidefawl.qubes.shader.Shader wireframe -> for
    nidefawl.qubes.shader.Shader texturedAlphaTest -> int
    nidefawl.qubes.shader.Shader textured -> new
    nidefawl.qubes.shader.Shader colored -> try
    nidefawl.qubes.shader.Shader colored3D -> byte
    nidefawl.qubes.shader.Shader textured3D -> case
    nidefawl.qubes.shader.Shader renderUINT -> char
    nidefawl.qubes.shader.Shader singleblock -> else
    nidefawl.qubes.shader.Shader singleblock3D -> goto
    nidefawl.qubes.shader.Shader gui -> long
    nidefawl.qubes.shader.Shader item -> this
    nidefawl.qubes.shader.Shader tonemap -> void
    17:18:void init() -> do
    38:129:void initShaders() -> if
nidefawl.qubes.shader.Shaders$1 -> IjIjlljIL11LllIj:
    50:53:java.lang.String getDefinition(java.lang.String) -> getDefinition
nidefawl.qubes.shader.Uniform1f -> iJllIjJiiJiJiJ:
    float lastX -> do
    14:19:boolean set(float) -> do
    24:28:boolean set() -> if
nidefawl.qubes.shader.Uniform1i -> iJjIIjiJJiJiJiiJ:
    int lastX -> if
    14:21:boolean set(int) -> do
    26:30:boolean set() -> if
nidefawl.qubes.shader.Uniform2f -> iJL1L1JiIjiJIj1L:
    float lastX -> do
    float lastY -> if
    15:23:boolean set(float,float) -> do
    28:32:boolean set() -> if
nidefawl.qubes.shader.Uniform3f -> jIjIJiIjJijI1L1L:
    float lastX -> do
    float lastY -> if
    float lastZ -> for
    18:27:boolean set(float,float,float) -> do
    32:36:boolean set() -> if
nidefawl.qubes.shader.Uniform4f -> llJiL1jIL1Ijll:
    float lastX -> do
    float lastY -> if
    float lastZ -> for
    float lastW -> int
    17:27:boolean set(float,float,float,float) -> do
    32:36:boolean set() -> if
nidefawl.qubes.shader.UniformBuffer -> jI1LIjL1lliJlliJ:
    int nextIdx -> do
    nidefawl.qubes.shader.UniformBuffer[] buffers -> do
    java.lang.String name -> do
    int buffer -> for
    int len -> if
    java.nio.FloatBuffer floatBuffer -> do
    int bindingPoint -> int
    boolean autoBind -> if
    nidefawl.qubes.shader.UniformBuffer uboMatrix3D -> do
    nidefawl.qubes.shader.UniformBuffer uboMatrix3D_Temp -> if
    nidefawl.qubes.shader.UniformBuffer uboMatrix2D -> for
    nidefawl.qubes.shader.UniformBuffer uboMatrixShadow -> int
    nidefawl.qubes.shader.UniformBuffer uboSceneData -> new
    nidefawl.qubes.shader.UniformBuffer LightInfo -> try
    nidefawl.qubes.shader.UniformBuffer VertexDirections -> byte
    nidefawl.qubes.shader.UniformBuffer TBNMat -> case
    java.util.List shaders -> do
    boolean once -> do
    43:44:nidefawl.qubes.shader.UniformBuffer addMat4() -> do
    47:48:nidefawl.qubes.shader.UniformBuffer addVec4() -> if
    55:56:void setPosition(int) -> do
    58:59:void reset() -> do
    61:62:void put(java.nio.FloatBuffer) -> do
    64:65:void put(float[]) -> do
    70:71:void put(float) -> do
    77:81:void put(float,float,float) -> do
    83:84:void putNeg(float,float,float) -> if
    86:97:void update() -> if
    99:108:void setup() -> for
    110:119:void release() -> goto
    161:166:void init() -> int
    168:172:void destroy() -> new
    175:182:void rebindShaders() -> try
    185:197:void bindBuffers(nidefawl.qubes.shader.Shader) -> do
    201:204:void bind() -> byte
    210:218:void addShader(nidefawl.qubes.shader.Shader) -> if
    227:337:void updateUBO(nidefawl.qubes.world.WorldClient,float) -> do
    343:403:void updateTBNMatrices() -> long
    408:479:void updateVertDir() -> this
    484:490:void updateOrtho() -> case
    493:496:void setNormalMat(java.nio.FloatBuffer) -> if
    504:514:void updateSceneMatrices() -> char
    516:522:void updatePxOffset() -> else
nidefawl.qubes.shader.UniformMat4 -> L1jIll1LL1IjJiIj:
    float[] last -> do
    boolean transpose -> if
    java.nio.FloatBuffer buf -> do
    19:38:boolean set(java.nio.FloatBuffer,boolean) -> do
    56:60:void release() -> do
nidefawl.qubes.texture.PNGDecoder -> iJL1L1iJL11LiJll:
    byte[] SIGNATURE -> do
    java.io.InputStream input -> do
    java.util.zip.CRC32 crc -> do
    byte[] buffer -> if
    int chunkLength -> do
    int chunkType -> if
    int chunkRemaining -> for
    int width -> int
    int height -> new
    int bitdepth -> try
    int colorType -> byte
    int bytesPerPixel -> case
    byte[] palette -> for
    byte[] paletteA -> int
    byte[] transPixel -> new
    boolean $assertionsDisabled -> do
    109:109:int getBitdepth() -> do
    113:113:int getHeight() -> if
    117:117:int getWidth() -> for
    186:219:nidefawl.qubes.texture.PNGDecoder$Format decideTextureFormat(nidefawl.qubes.texture.PNGDecoder$Format) -> do
    236:350:void decode(java.nio.ByteBuffer,int,nidefawl.qubes.texture.PNGDecoder$Format) -> do
    376:377:void copy(java.nio.ByteBuffer,byte[]) -> do
    380:399:void copyRGBtoABGR(java.nio.ByteBuffer,byte[]) -> if
    402:421:void copyRGBtoRGBA(java.nio.ByteBuffer,byte[]) -> for
    424:443:void copyRGBtoBGRA(java.nio.ByteBuffer,byte[]) -> int
    446:449:void copyRGBAtoABGR(java.nio.ByteBuffer,byte[]) -> new
    452:455:void copyRGBAtoBGRA(java.nio.ByteBuffer,byte[]) -> try
    458:461:void copyRGBAtoRGB(java.nio.ByteBuffer,byte[]) -> byte
    464:468:void copyGreyscaleToARGB(java.nio.ByteBuffer,byte[]) -> case
    472:491:void copyPALtoARGB(java.nio.ByteBuffer,byte[]) -> char
    494:497:void copyRGBAtoARGB(java.nio.ByteBuffer,byte[]) -> else
    499:518:void copyRGBtoARGB(java.nio.ByteBuffer,byte[]) -> goto
    521:540:void copyPALtoABGR(java.nio.ByteBuffer,byte[]) -> long
    543:562:void copyPALtoRGBA(java.nio.ByteBuffer,byte[]) -> this
    565:584:void copyPALtoBGRA(java.nio.ByteBuffer,byte[]) -> void
    587:594:void expand4(byte[],byte[]) -> do
    597:606:void expand2(byte[],byte[]) -> if
    609:622:void expand1(byte[],byte[]) -> for
    624:642:void unfilter(byte[],byte[]) -> int
    645:649:void unfilterSub(byte[]) -> do
    652:656:void unfilterUp(byte[],byte[]) -> new
    659:668:void unfilterAverage(byte[],byte[]) -> try
    671:691:void unfilterPaeth(byte[],byte[]) -> byte
    694:751:void readIHDR() -> do
    754:760:void readPLTE() -> if
    763:785:void readtRNS() -> for
    788:802:void closeChunk() -> int
    805:811:void openChunk() -> new
    814:818:void openChunk(int) -> do
    821:824:void checkChunkLength(int) -> if
    827:833:int readChunk(byte[],int,int) -> do
    837:843:void refillInflater(java.util.zip.Inflater) -> do
    846:867:void readChunkUnzip(java.util.zip.Inflater,byte[],int,int) -> do
    871:878:void readFully(byte[],int,int) -> do
    881:881:int readInt(byte[],int) -> do
    889:896:void skip(long) -> do
    899:904:boolean checkSignature(byte[]) -> do
nidefawl.qubes.texture.PNGDecoder$1 -> ll1LIjiJiJiJjIIj:
    int[] $SwitchMap$nidefawl$qubes$texture$PNGDecoder$Format -> do
nidefawl.qubes.texture.PNGDecoder$Format -> L1JijI1LllIjjIjI:
    nidefawl.qubes.texture.PNGDecoder$Format ALPHA -> do
    nidefawl.qubes.texture.PNGDecoder$Format LUMINANCE -> if
    nidefawl.qubes.texture.PNGDecoder$Format LUMINANCE_ALPHA -> for
    nidefawl.qubes.texture.PNGDecoder$Format RGB -> int
    nidefawl.qubes.texture.PNGDecoder$Format RGBA -> new
    nidefawl.qubes.texture.PNGDecoder$Format BGRA -> try
    nidefawl.qubes.texture.PNGDecoder$Format ABGR -> byte
    nidefawl.qubes.texture.PNGDecoder$Format ARGB -> case
    int numComponents -> do
    boolean hasAlpha -> do
    nidefawl.qubes.texture.PNGDecoder$Format[] $VALUES -> do
    14:14:nidefawl.qubes.texture.PNGDecoder$Format[] values() -> values
    14:14:nidefawl.qubes.texture.PNGDecoder$Format valueOf(java.lang.String) -> valueOf
    33:33:int getNumComponents() -> do
nidefawl.qubes.texture.TMgr -> ll1L1L1LiJllJiIj:
    11:11:int getNoise() -> do
    15:15:int getBlocks() -> if
    19:19:int getItems() -> for
    27:27:int getEmpty() -> int
    31:31:int getEmptyWhite() -> new
    39:39:int getNormals() -> try
nidefawl.qubes.texture.TextureManager -> L1iJL1L11L1LiJ:
    nidefawl.qubes.texture.TextureManager instance -> do
    int texNoise -> do
    int texEmpty -> if
    int texEmptyNormal -> for
    java.nio.ByteBuffer directBuf -> do
    int texEmptyWhite -> int
    41:41:nidefawl.qubes.texture.TextureManager getInstance() -> do
    46:57:void init() -> do
    60:69:void reload() -> if
    77:92:int makeNewTexture(byte[],int,int,boolean,boolean,int) -> do
    96:96:int makeNewTexture(nidefawl.qubes.assets.AssetTexture,boolean,boolean,int) -> do
    106:155:void uploadTexture(byte[],int,int,int,int,int,boolean,boolean,int) -> do
    162:162:void destroy() -> for
nidefawl.qubes.texture.TextureUtil -> L1jIIj1LiJL11L1L:
    20:28:byte[] genNoise2(int) -> do
    173:191:int getAverageColor(byte[],int,int) -> do
    199:199:int clampRGB(int) -> do
    208:249:byte[] makeMipMap(byte[],int,int,int) -> do
    258:268:void clampAlpha(byte[],int,int) -> do
    271:283:byte[] toBytesRGBA(int[]) -> do
    327:327:float getR(int) -> do
    330:330:float getG(int) -> if
    333:333:float getB(int) -> for
    337:350:int mixRGB(int,int,float) -> do
    354:371:int mix3RGB(int,int,int) -> do
nidefawl.qubes.texture.array.BlockNormalMapArray -> JiIjiJIjJiiJIjL1:
    nidefawl.qubes.texture.array.BlockNormalMapArray instance -> do
    28:28:nidefawl.qubes.texture.array.BlockNormalMapArray getInstance() -> do
    40:45:void findMaxTileWidth() -> findMaxTileWidth
    50:75:void collectTextures(nidefawl.qubes.assets.AssetManager) -> collectTextures
    78:132:void uploadTextures() -> uploadTextures
    137:157:void postUpload() -> postUpload
nidefawl.qubes.texture.array.BlockTextureArray -> jIL1L11L1LIj1L:
    nidefawl.qubes.texture.array.BlockTextureArray instance -> do
    int totalSlots -> do
    31:31:nidefawl.qubes.texture.array.BlockTextureArray getInstance() -> do
    42:62:void postUpload() -> postUpload
    65:108:void uploadTextures() -> uploadTextures
    112:136:void collectTextures(nidefawl.qubes.assets.AssetManager) -> collectTextures
nidefawl.qubes.texture.array.ItemTextureArray -> ll1LL1iJL1jIJiIj:
    nidefawl.qubes.texture.array.ItemTextureArray instance -> do
    30:30:nidefawl.qubes.texture.array.ItemTextureArray getInstance() -> do
    40:84:void uploadTextures() -> uploadTextures
    88:112:void collectTextures(nidefawl.qubes.assets.AssetManager) -> collectTextures
    116:134:void postUpload() -> postUpload
nidefawl.qubes.texture.array.TextureArray -> iJ1LJiJiIjJi1LjI:
    boolean SKIP_LOAD_TEXTURES -> SKIP_LOAD_TEXTURES
    java.util.HashMap texNameToAssetMap -> texNameToAssetMap
    java.util.HashMap blockIDToAssetList -> blockIDToAssetList
    java.util.HashMap slotTextureMap -> slotTextureMap
    boolean firstInit -> firstInit
    int[] textures -> textures
    int glid -> glid
    int tileSize -> tileSize
    int numTextures -> numTextures
    int numMipmaps -> numMipmaps
    int subtypeBits -> subtypeBits
    boolean report -> report
    float loadprogress -> loadprogress
    float uploadprogress -> uploadprogress
    44:51:void unload() -> unload
    53:54:void init() -> init
    57:59:void preUpdate() -> preUpdate
    61:70:void _load() -> _load
    72:74:void load() -> load
    77:82:void reload() -> reload
    86:92:void postUpdate() -> postUpdate
    95:98:void free() -> free
    106:112:java.nio.ByteBuffer put(java.nio.ByteBuffer,byte[]) -> put
    116:116:int getTextureIdx(int,int) -> getTextureIdx
    119:120:void setTexture(int,int,int) -> setTexture
    125:131:void calculateSubtypeBits() -> calculateSubtypeBits
    133:152:void findMaxTileWidth() -> findMaxTileWidth
    155:160:void upscaleTextures() -> upscaleTextures
    164:173:void initGLStorage() -> initGLStorage
    void uploadTextures() -> uploadTextures
    void collectTextures(nidefawl.qubes.assets.AssetManager) -> collectTextures
    void postUpload() -> postUpload
    180:180:float getProgress() -> getProgress
nidefawl.qubes.util.BlockColl -> jIjI1LIjllL1llll:
    int x -> do
    int y -> if
    int z -> for
    int type -> int
    nidefawl.qubes.vec.AABB blockBB -> do
nidefawl.qubes.util.CharSequenceIterator -> llJiJijIlliJiJiJ:
    java.lang.CharSequence sequence -> do
    int pos -> do
    24:24:boolean hasNext() -> hasNext
    29:29:java.lang.Character next() -> do
    35:37:char nextChar() -> do
    42:42:void remove() -> remove
    12:12:java.lang.Object next() -> next
nidefawl.qubes.util.ClipboardHelper -> JillL1IjiJllL1iJ:
    10:11:void setClipboardString(java.lang.String) -> do
    14:15:java.lang.String getClipboardString() -> do
nidefawl.qubes.util.CollisionQuery -> Ji1L1LIjiJJiIj:
    java.util.ArrayList collisions -> do
    java.util.ArrayList tempList -> if
    nidefawl.qubes.vec.AABBFloat[] tmpBBs -> do
    int numCollisions -> do
    nidefawl.qubes.vec.AABBFloat tmpBB -> do
    23:26:nidefawl.qubes.util.BlockColl get() -> do
    29:60:boolean queryAny(nidefawl.qubes.world.World,nidefawl.qubes.vec.AABB) -> do
    63:100:void query(nidefawl.qubes.world.World,nidefawl.qubes.vec.AABB) -> do
    102:134:boolean queryAnyCollisions(nidefawl.qubes.world.World,nidefawl.qubes.vec.AABB,float) -> do
    138:138:int getNumCollisions() -> do
    141:141:nidefawl.qubes.util.BlockColl get(int) -> do
nidefawl.qubes.util.Color -> iJ1LL11LL1iJjI:
    7:49:int HSBtoRGB(float,float,float) -> do
    53:85:float[] RGBtoHSB(int,int,int,float[]) -> do
    89:94:void setColorVec(int,nidefawl.qubes.vec.Vector3f) -> do
nidefawl.qubes.util.CrashInfo -> nidefawl.qubes.util.CrashInfo:
    java.lang.String title -> title
    java.lang.String desc -> desc
    java.lang.String outBuf -> outBuf
    java.lang.String errBuf -> errBuf
    java.lang.String exc -> exc
    40:42:void setLogBuf(java.lang.String) -> setLogBuf
    48:50:void setErrBuf(java.lang.String) -> setErrBuf
    56:61:void setException(java.lang.Throwable) -> setException
nidefawl.qubes.util.EResourceType -> L1Ij1LjIjIL1IjIj:
    nidefawl.qubes.util.EResourceType SHADER -> do
    nidefawl.qubes.util.EResourceType FRAMEBUFFER -> if
    nidefawl.qubes.util.EResourceType[] $VALUES -> do
    10:10:nidefawl.qubes.util.EResourceType[] values() -> values
    10:10:nidefawl.qubes.util.EResourceType valueOf(java.lang.String) -> valueOf
nidefawl.qubes.util.GameContext -> IjJiiJIjJi1LiJJi:
    java.lang.Thread mainThread -> do
    nidefawl.qubes.util.Side side -> do
    nidefawl.qubes.util.GameError initError -> do
    long startBoot -> do
    23:23:long getTimeSinceStart() -> do
    28:29:void setMainThread(java.lang.Thread) -> do
    37:37:java.lang.Thread getMainThread() -> do
    44:44:nidefawl.qubes.util.Side getSide() -> do
    48:51:void setSideAndPath(nidefawl.qubes.util.Side,java.lang.String) -> do
    58:68:void earlyInit() -> do
    74:74:nidefawl.qubes.util.GameError getInitError() -> do
    81:100:void lateInit() -> if
nidefawl.qubes.util.GameError -> llL1L1L1jIIjJiJi:
nidefawl.qubes.util.GameMath -> lljIiJllJijIjI:
    float[] m -> do
    float[] inv -> if
    12:12:float cos(float) -> do
    15:15:float sin(float) -> if
    20:20:float atan(float) -> for
    25:25:float atan2(float,float) -> do
    39:40:int floor(double) -> do
    43:43:int ceil(double) -> if
    51:91:void invertMat4x(java.nio.FloatBuffer,java.nio.FloatBuffer) -> do
    120:120:float coTangent(float) -> int
    124:124:float degreesToRadians(float) -> new
    128:128:float sqrtf(float) -> try
    132:135:int randomI(long) -> do
    144:144:int lhToZ(long) -> if
    147:147:int lhToX(long) -> for
    150:150:long toLong(int,int) -> do
    160:160:int toInt(int,int) -> do
    164:166:double dist2d(double,double,double,double) -> do
    170:176:int log2(int) -> do
    179:179:int signum(float) -> do
    182:182:boolean isNormalFloat(float) -> do
    192:192:float clamp(float,float,float) -> do
    195:198:int distSq3Di(int,int,int,int,int,int) -> do
    206:206:float powf(float,float) -> if
    214:233:float pow(float,int) -> do
    237:251:double getAngle(double,double,double,double) -> if
    254:254:float tan(float) -> byte
    259:259:float easeInOutCubic(float) -> case
    262:273:int[] downsample(int,int,int) -> do
    277:277:int round(float) -> if
    280:285:float wrapAngle(float) -> char
    296:300:float wrapAngleToRange(float,float) -> for
nidefawl.qubes.util.Half -> IjIjJiiJL1L1iJL1:
    41:61:int fromFloat(float) -> do
nidefawl.qubes.util.IManagedResource -> IjL11LllL1llJiiJ:
    void release() -> long
    nidefawl.qubes.util.EResourceType getType() -> do
nidefawl.qubes.util.IResourceManager -> llllIjlljIllL1Ij:
    void addResource(nidefawl.qubes.util.IManagedResource) -> do
nidefawl.qubes.util.Pool -> iJjI1Lll1LIj1LL1:
    nidefawl.qubes.util.Poolable[] array -> do
    boolean[] inUse -> do
nidefawl.qubes.util.Poolable -> L11L1LJiIj1LIjjI:
nidefawl.qubes.util.Project -> L1JillJiJiIjL11L:
    float[] IDENTITY_MATRIX -> do
    java.nio.FloatBuffer finalMatrix -> do
    java.nio.FloatBuffer tempMatrix -> if
    float[] in -> if
    float[] out -> for
    nidefawl.qubes.vec.Vector3f tmp3 -> do
    nidefawl.qubes.vec.Vector3f tmp4 -> if
    nidefawl.qubes.vec.Vector3f tmp5 -> for
    45:78:boolean gluUnProject(float,float,float,java.nio.FloatBuffer,java.nio.FloatBuffer,java.nio.IntBuffer,java.nio.FloatBuffer) -> do
    90:155:boolean __gluInvertMatrixf(java.nio.FloatBuffer,java.nio.FloatBuffer) -> do
    162:165:void __gluMakeIdentityf(java.nio.FloatBuffer) -> do
    172:178:void __gluMultMatricesf(java.nio.FloatBuffer,java.nio.FloatBuffer,java.nio.FloatBuffer) -> do
    188:196:void __gluMultMatrixVecf(java.nio.FloatBuffer,float[],float[]) -> do
    199:210:void fovProjMat(float,float,float,float,nidefawl.qubes.vec.Matrix4f) -> do
    213:221:void orthoMat(float,float,float,float,float,float,nidefawl.qubes.vec.Matrix4f) -> do
    229:261:void lookAt(float,float,float,float,float,float,float,float,float,nidefawl.qubes.vec.Matrix4f) -> do
nidefawl.qubes.util.RayTrace -> L1IjL1jI1LL1Ijll:
    nidefawl.qubes.vec.Vector3f dirFrac -> do
    nidefawl.qubes.vec.AABBFloat bb -> do
    nidefawl.qubes.util.RayTrace$RayTraceIntersection intersection -> do
    nidefawl.qubes.vec.BlockPos quarter -> do
    boolean quarterMode -> do
    41:42:void reset() -> do
    45:142:void doRaytrace(nidefawl.qubes.world.World,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f,int) -> do
    146:173:boolean callback(nidefawl.qubes.world.World,int,int,int,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f) -> do
    177:177:boolean rayTraceBlock(nidefawl.qubes.block.Block) -> do
    189:189:float intbound(float,float) -> do
    194:194:boolean hasHit() -> do
    197:197:nidefawl.qubes.util.RayTrace$RayTraceIntersection getHit() -> do
    205:205:nidefawl.qubes.vec.AABBFloat getTempBB() -> do
    215:226:void setIntersection(nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f,float,int) -> do
nidefawl.qubes.util.RayTrace$HitType -> iJll1LL11LllJi1L:
    nidefawl.qubes.util.RayTrace$HitType BLOCK -> do
    nidefawl.qubes.util.RayTrace$HitType NONE -> if
    nidefawl.qubes.util.RayTrace$HitType[] $VALUES -> do
    13:13:nidefawl.qubes.util.RayTrace$HitType[] values() -> values
    13:13:nidefawl.qubes.util.RayTrace$HitType valueOf(java.lang.String) -> valueOf
nidefawl.qubes.util.RayTrace$RayTraceIntersection -> JilljI1L1LIjjI1L:
    nidefawl.qubes.util.RayTrace$HitType hit -> do
    int blockId -> do
    nidefawl.qubes.vec.BlockPos blockPos -> do
    nidefawl.qubes.vec.BlockPos q -> if
    nidefawl.qubes.vec.Vector3f pos -> do
    float distance -> do
    int face -> if
nidefawl.qubes.util.RegionEntry -> Ji1LL1jI1LlliJjI:
    void addKey(int) -> do
    int getMinX() -> do
    int getMinZ() -> if
    int getMaxX() -> for
    int getMaxZ() -> int
nidefawl.qubes.util.RegionMap -> JijIIj1LiJIjL1Ij:
    com.google.common.collect.Multimap mmap -> do
    byte bits -> do
    20:20:int toRegion(int) -> do
    28:40:void add(nidefawl.qubes.util.RegionEntry) -> do
    76:88:java.util.Collection getRegions(int,int,int) -> do
    181:182:void clear() -> do
    185:185:java.util.Collection values() -> do
nidefawl.qubes.util.RenderUtil -> jI1LiJ1LJiJijI:
    33:87:void makeCube(nidefawl.qubes.gl.VertexBuffer,float,nidefawl.qubes.gl.GLVAO) -> do
    90:149:void makeSphere(nidefawl.qubes.gl.VertexBuffer,float,int,int) -> do
    151:151:int packNormal(nidefawl.qubes.vec.Vector3f) -> do
    154:161:int packNormal(float,float,float) -> do
    164:164:int packTexCoord(float,float) -> do
nidefawl.qubes.util.Renderable -> jIL1Ij1LJijIIjIj:
    void render(float,double,double) -> render
    void initGui(boolean) -> initGui
nidefawl.qubes.util.ServerStats -> jIJiL11LL1IjJiL1:
    java.util.concurrent.ConcurrentHashMap map -> do
    15:20:void add(java.lang.String,long) -> do
nidefawl.qubes.util.Side -> IjllIjjIiJllIjiJ:
    nidefawl.qubes.util.Side CLIENT -> do
    nidefawl.qubes.util.Side SERVER -> if
    nidefawl.qubes.util.Side[] $VALUES -> do
    3:3:nidefawl.qubes.util.Side[] values() -> values
    3:3:nidefawl.qubes.util.Side valueOf(java.lang.String) -> valueOf
nidefawl.qubes.util.SimpleResourceManager -> JiJi1LlllliJ1L:
    java.util.List resources -> do
    20:21:void addResource(nidefawl.qubes.util.IManagedResource) -> do
    25:28:void release() -> do
    32:38:void releaseAll(nidefawl.qubes.util.EResourceType) -> do
nidefawl.qubes.util.SingleBlockWorld -> llJiL1IjiJ1LL1L1:
    int id -> do
    int data -> if
    nidefawl.qubes.vec.BlockPos pos -> do
    int airId -> for
    int airData -> int
    int light -> new
    nidefawl.qubes.chunk.blockdata.BlockData bdata -> do
    nidefawl.qubes.biome.Biome biome -> do
    32:35:void set(int,int,int,int,int) -> do
    47:50:int getType(int,int,int) -> if
    60:60:boolean is(int,int,int) -> do
    80:82:int getData(int,int,int) -> do
    87:90:boolean isNormalBlock(int,int,int,int) -> do
    95:95:boolean setTypeData(int,int,int,int,int,int) -> do
    100:100:int getLight(int,int,int) -> int
    105:105:nidefawl.qubes.chunk.blockdata.BlockData getBlockData(int,int,int) -> do
    112:113:void setBlockData(nidefawl.qubes.chunk.blockdata.BlockData) -> do
    129:129:int getBiomeFaceColor(int,int,int,int,int,nidefawl.qubes.biome.BiomeColor) -> do
    134:134:int getWater(int,int,int) -> for
nidefawl.qubes.util.SnakeIterator -> jIJiiJL1jIiJ1LL1:
    int dx -> do
    int dz -> if
    int currentFace -> for
    int pos -> int
    int legPos -> new
    int legsize -> try
    int currentLeg -> byte
    int max -> case
    int[][] direction -> do
    18:25:void reset() -> do
    31:49:void next() -> if
    53:53:int getX() -> do
    56:56:int getZ() -> if
nidefawl.qubes.util.Stats -> JiIjJiiJJiL1Jill:
    int fpsCounter -> do
    int uniformCalls -> if
    float avgFrameTime -> do
    double timeMeshing -> do
    double timeRendering -> if
    double fpsInteval -> for
    int regionUpdates -> for
    float lastFrameTimeD -> if
    int tessDrawCalls -> int
    int modelDrawCalls -> new
    int regionDrawCalls -> try
    int lastFrameDrawCalls -> byte
    int uploadBytes -> case
    19:24:void resetDrawCalls() -> do
nidefawl.qubes.util.StringUtil -> JiIjllllJiIjjIL1:
    8:18:java.lang.String[] dropArrIdx(java.lang.String[],int) -> do
    23:26:long parseLong(java.lang.String,long,int) -> do
    32:34:java.util.UUID parseUUID(java.lang.String,java.util.UUID) -> do
    40:42:int parseInt(java.lang.String,int) -> do
    47:54:java.lang.String combine(java.lang.String[],int,int) -> do
nidefawl.qubes.util.SysInfo -> L1Ji1LiJL1IjIj:
    java.lang.String osName -> do
    boolean isWindows -> do
    boolean is64Bit -> if
    java.lang.String javaVersion -> if
    long memoryMb -> do
    java.lang.String javaMachineVersion -> for
    java.lang.String openGLVersion -> int
    java.lang.String openGLVendor -> new
nidefawl.qubes.util.Timer -> IjiJjIJiiJL11L1L:
    int tickspersec -> if
    long ms -> for
    long ns -> int
    long last -> new
    int ticks -> do
    float partialTick -> do
    long el -> do
    long absTime -> if
    25:83:long getTime() -> do
    87:93:void calculate() -> do
nidefawl.qubes.util.TripletIntHash -> jIjIIjL1L11LJiL1:
    6:8:int toHash(int,int,int) -> do
    11:11:int getX(int) -> do
    14:14:int getZ(int) -> if
    17:17:int getY(int) -> for
nidefawl.qubes.util.TripletLongHash -> lliJJiIjJiL11LJi:
    6:8:long toHash(long,long,long) -> do
    11:11:int getX(long) -> do
    14:14:int getZ(long) -> if
    17:17:int getY(long) -> for
nidefawl.qubes.util.TripletShortHash -> L1iJIj1LllIjIjJi:
    6:6:short toHash(int,int,int) -> do
    9:9:int getX(int) -> do
    12:12:int getZ(int) -> if
    15:15:int getY(int) -> for
nidefawl.qubes.util.UnsafeHelper -> JilliJJi1LiJL1iJ:
    long ADDRESS -> do
    long CAPACITY -> if
    sun.misc.Unsafe UNSAFE -> do
    java.nio.ByteBuffer BYTE_BUFFER -> do
    java.nio.ShortBuffer SHORT_BUFFER -> do
    java.nio.CharBuffer CHAR_BUFFER -> do
    java.nio.IntBuffer INT_BUFFER -> do
    java.nio.LongBuffer LONG_BUFFER -> do
    java.nio.FloatBuffer FLOAT_BUFFER -> do
    java.nio.DoubleBuffer DOUBLE_BUFFER -> do
    long PARENT_BYTE -> for
    long PARENT_SHORT -> int
    long PARENT_CHAR -> new
    long PARENT_INT -> try
    long PARENT_LONG -> byte
    long PARENT_FLOAT -> case
    long PARENT_DOUBLE -> char
    71:98:sun.misc.Unsafe getUnsafeInstance() -> do
    102:125:java.lang.reflect.Field getField(java.nio.Buffer,java.lang.Object) -> do
    131:143:java.lang.reflect.Field getDeclaredField(java.lang.Class,java.lang.String) -> do
    147:147:long alloc(long) -> do
    150:151:void free(long) -> do
    154:158:java.nio.ByteBuffer memByteBuffer(long,int) -> do
    162:162:long memAddress0(java.nio.Buffer) -> do
    166:172:java.nio.Buffer setup(java.nio.Buffer,long,int,long) -> do
    177:180:java.nio.ByteBuffer memSetupBuffer(java.nio.ByteBuffer,long,int) -> do
    183:187:void copyDoubleArray(long,double[]) -> do
nidefawl.qubes.vec.AABB -> iJlljIIjL1L1llL1:
    double minX -> do
    double minY -> if
    double minZ -> for
    double maxX -> int
    double maxY -> new
    double maxZ -> try
    33:33:double getWidth() -> do
    36:36:double getHeight() -> if
    39:39:double getLength() -> for
    43:49:void offset(double,double,double) -> do
    52:64:void expandTo(double,double,double) -> if
    77:83:void set(double,double,double,double,double,double) -> do
    88:89:void set(nidefawl.qubes.vec.AABB) -> do
    92:93:nidefawl.qubes.vec.AABB setWithOffset(nidefawl.qubes.vec.AABB,double,double,double) -> do
    97:98:void set(nidefawl.qubes.vec.AABBFloat) -> do
    102:102:double getCenterX() -> int
    110:110:double getCenterZ() -> new
    114:118:void centerXZ(double,double,double) -> for
    131:147:double getXOffset(nidefawl.qubes.vec.AABB,double) -> do
    151:167:double getZOffset(nidefawl.qubes.vec.AABB,double) -> if
    171:187:double getYOffset(nidefawl.qubes.vec.AABB,double) -> for
    192:192:java.lang.String toString() -> toString
    197:203:void read(java.io.DataInput) -> do
    207:213:void write(java.io.DataOutput) -> do
nidefawl.qubes.vec.AABBFloat -> JilllljIjIiJL1jI:
    float minX -> do
    float minY -> if
    float minZ -> for
    float maxX -> int
    float maxY -> new
    float maxZ -> try
    long negativeZeroFloatBits -> do
    35:41:void offset(float,float,float) -> do
    44:56:void expandBounds(float,float,float) -> if
    69:75:void set(float,float,float,float,float,float) -> do
    80:81:void set(nidefawl.qubes.vec.AABBFloat) -> do
    116:122:boolean intersects(nidefawl.qubes.vec.AABB) -> do
    128:128:java.lang.String toString() -> toString
    144:195:boolean raytrace(nidefawl.qubes.util.RayTrace,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f) -> do
    200:205:boolean min(float,float) -> do
    208:213:boolean max(float,float) -> if
    216:216:boolean isEqual(nidefawl.qubes.vec.AABBFloat) -> do
nidefawl.qubes.vec.AABBInt -> llJillllIjIjL1iJ:
    int minX -> do
    int minY -> if
    int minZ -> for
    int maxX -> int
    int maxY -> new
    int maxZ -> try
    70:76:void set(int,int,int,int,int,int) -> do
    81:82:void set(nidefawl.qubes.vec.AABBInt) -> do
    115:115:java.lang.String toString() -> toString
    119:126:nidefawl.qubes.nbt.Tag$Compound saveTag() -> do
    130:136:void loadTag(nidefawl.qubes.nbt.Tag$Compound) -> do
    139:139:boolean contains(int,int,int) -> do
    143:143:boolean contains(nidefawl.qubes.vec.BlockPos) -> do
nidefawl.qubes.vec.BlockBoundingBox -> JiL1iJiJiJ1LiJ:
    int lowX -> do
    int highX -> if
    int lowY -> for
    int highY -> int
    int lowZ -> new
    int highZ -> try
    30:32:void expandTo(int,int,int,int,int,int) -> do
    35:54:void flag(int,int,int) -> do
    62:64:void checkBounds(int,int,int) -> if
    67:73:void set(int,int,int,int,int,int) -> if
    76:77:nidefawl.qubes.vec.BlockBoundingBox copyTo(nidefawl.qubes.vec.BlockBoundingBox) -> do
    81:81:int getLength() -> do
    85:85:int getWidth() -> if
    89:89:int getHeight() -> for
    93:93:int getVolume() -> int
    112:113:void reset() -> do
    123:125:void extend(nidefawl.qubes.vec.BlockBoundingBox) -> do
    132:132:java.lang.String toString() -> toString
    139:139:short getMinHash() -> do
    145:145:short getMaxHash() -> if
    154:154:nidefawl.qubes.vec.BlockBoundingBox fromShorts(short,short) -> do
nidefawl.qubes.vec.BlockPos -> lliJllIjjIiJlljI:
    int x -> do
    int y -> if
    int z -> for
    24:24:java.lang.String toString() -> toString
    29:33:boolean equals(java.lang.Object) -> equals
    38:38:int hashCode() -> hashCode
    42:42:nidefawl.qubes.vec.BlockPos copy() -> do
    50:53:void set(int,int,int) -> do
    58:61:void offset(int) -> do
    64:67:void read(java.io.DataInput) -> do
    70:73:void write(java.io.DataOutput) -> do
    78:81:void set(nidefawl.qubes.vec.BlockPos) -> do
    95:95:boolean isEqualTo(int,int,int) -> do
nidefawl.qubes.vec.ChunkPos -> L1JiL1L11LJiIjll:
    int x -> do
    int z -> if
    22:22:java.lang.String toString() -> toString
    27:31:boolean equals(java.lang.Object) -> equals
    36:36:int hashCode() -> hashCode
    44:46:void read(java.io.DataInput) -> do
    49:51:void write(java.io.DataOutput) -> do
nidefawl.qubes.vec.Dir -> iJ1LL1iJIjL1jIIj:
    12:12:int getDirX(int) -> do
    16:16:int getDirZ(int) -> if
    20:20:int getDirY(int) -> for
    28:28:boolean isTopBottom(int) -> do
    53:67:java.lang.String asString(int) -> do
    88:88:int opposite(int) -> int
nidefawl.qubes.vec.Frustum -> JilljIIj1L1LjIiJ:
    nidefawl.qubes.vec.Vector4f[] frustum -> do
    nidefawl.qubes.vec.Vector3f up -> do
    nidefawl.qubes.vec.Vector3f forward -> if
    nidefawl.qubes.vec.Vector3f cam -> for
    nidefawl.qubes.vec.Vector3f tmp -> int
    nidefawl.qubes.vec.Vector3f X -> new
    nidefawl.qubes.vec.Vector3f Y -> try
    nidefawl.qubes.vec.Vector3f Z -> byte
    float znear -> do
    float zfar -> if
    float ratio -> for
    float tang -> int
    float angle -> new
    float sphereFactorY -> try
    float sphereFactorX -> byte
    34:46:void setCamInternals(float,float,float,float) -> do
    81:111:void set(nidefawl.qubes.vec.Matrix4f) -> do
    116:121:void normalize(int) -> do
    124:124:float planeDistance(nidefawl.qubes.vec.Vector4f,float,float,float) -> do
    166:195:int sphereInFrustum(nidefawl.qubes.vec.Vector3f,float) -> do
    246:246:int checkFrustum(nidefawl.qubes.vec.AABBInt,float) -> do
    256:277:int checkFrustum(nidefawl.qubes.vec.AABBInt) -> do
    281:302:void setPos(nidefawl.qubes.vec.Vector3f,nidefawl.qubes.gl.BufferedMatrix) -> do
nidefawl.qubes.vec.Matrix4f -> IjiJIjJiiJjIL1Ij:
    float m00 -> do
    float m01 -> if
    float m02 -> for
    float m03 -> int
    float m10 -> new
    float m11 -> try
    float m12 -> byte
    float m13 -> case
    float m20 -> char
    float m21 -> else
    float m22 -> goto
    float m23 -> long
    float m30 -> this
    float m31 -> void
    float m32 -> break
    float m33 -> catch
    51:56:java.lang.String toString() -> toString
    72:72:nidefawl.qubes.vec.Matrix4f setIdentity() -> if
    81:98:nidefawl.qubes.vec.Matrix4f setIdentity(nidefawl.qubes.vec.Matrix4f) -> do
    106:106:nidefawl.qubes.vec.Matrix4f setZero() -> for
    115:132:nidefawl.qubes.vec.Matrix4f setZero(nidefawl.qubes.vec.Matrix4f) -> if
    141:141:nidefawl.qubes.vec.Matrix4f load(nidefawl.qubes.vec.Matrix4f) -> for
    151:170:nidefawl.qubes.vec.Matrix4f load(nidefawl.qubes.vec.Matrix4f,nidefawl.qubes.vec.Matrix4f) -> do
    206:224:nidefawl.qubes.vec.Matrix4f load(float[]) -> do
    262:278:nidefawl.qubes.vec.Matrix4f store(java.nio.FloatBuffer) -> do
    290:307:nidefawl.qubes.vec.Matrix4f store(float[],int) -> do
    423:460:nidefawl.qubes.vec.Matrix4f mul(nidefawl.qubes.vec.Matrix4f,nidefawl.qubes.vec.Matrix4f,nidefawl.qubes.vec.Matrix4f) -> do
    497:510:nidefawl.qubes.vec.Vector3f transform(nidefawl.qubes.vec.Matrix4f,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f) -> do
    547:559:nidefawl.qubes.vec.Vector3f transformTransposed(nidefawl.qubes.vec.Matrix4f,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f) -> if
    567:567:nidefawl.qubes.vec.Matrix4f transpose() -> int
    576:576:nidefawl.qubes.vec.Matrix4f translate(float,float,float) -> do
    585:585:nidefawl.qubes.vec.Matrix4f translate(nidefawl.qubes.vec.Vector3f) -> do
    594:594:nidefawl.qubes.vec.Matrix4f scale(nidefawl.qubes.vec.Vector3f) -> if
    603:603:nidefawl.qubes.vec.Matrix4f scale(float) -> do
    606:618:nidefawl.qubes.vec.Matrix4f scale(float,float,float) -> if
    629:643:nidefawl.qubes.vec.Matrix4f scale(nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Matrix4f,nidefawl.qubes.vec.Matrix4f) -> do
    653:653:nidefawl.qubes.vec.Matrix4f rotate(float,float,float,float) -> do
    664:664:nidefawl.qubes.vec.Matrix4f rotate(float,float,float,float,nidefawl.qubes.vec.Matrix4f) -> do
    733:777:nidefawl.qubes.vec.Matrix4f rotate(float,float,float,float,nidefawl.qubes.vec.Matrix4f,nidefawl.qubes.vec.Matrix4f) -> do
    787:787:nidefawl.qubes.vec.Matrix4f translate(float,float,float,nidefawl.qubes.vec.Matrix4f) -> do
    798:806:nidefawl.qubes.vec.Matrix4f translate(float,float,float,nidefawl.qubes.vec.Matrix4f,nidefawl.qubes.vec.Matrix4f) -> do
    815:815:nidefawl.qubes.vec.Matrix4f transpose(nidefawl.qubes.vec.Matrix4f) -> int
    825:861:nidefawl.qubes.vec.Matrix4f transpose(nidefawl.qubes.vec.Matrix4f,nidefawl.qubes.vec.Matrix4f) -> if
    868:889:float determinant() -> do
    901:901:float determinant3x3(float,float,float,float,float,float,float,float,float) -> do
    911:911:nidefawl.qubes.vec.Matrix4f invert() -> new
    966:1019:nidefawl.qubes.vec.Matrix4f invert(nidefawl.qubes.vec.Matrix4f,nidefawl.qubes.vec.Matrix4f) -> for
    1071:1076:void transformVec(nidefawl.qubes.vec.Vector3f) -> do
    1080:1128:void mulMat(nidefawl.qubes.vec.Matrix4f) -> do
    1212:1228:void addWeighted(nidefawl.qubes.vec.Matrix4f,float) -> do
    1298:1305:void clearTranslation() -> for
nidefawl.qubes.vec.StackChangeCallBack -> iJiJIjjIL1L1L1jI:
    void onChange(nidefawl.qubes.vec.Vector3f) -> do
nidefawl.qubes.vec.TransformStack -> llIjiJ1LlliJ1L:
    nidefawl.qubes.vec.Vector3f[] stack -> do
    int stackSize -> do
    nidefawl.qubes.vec.Vector3f tmp -> do
    nidefawl.qubes.vec.StackChangeCallBack cb -> do
    24:34:void translate(float,float,float) -> do
    36:40:void push() -> do
    42:47:void push(float,float,float) -> if
    49:54:void pop() -> if
    56:60:nidefawl.qubes.vec.Vector3f get() -> do
    63:64:void setCallBack(nidefawl.qubes.vec.StackChangeCallBack) -> do
    66:76:void setTranslation(float,float,float) -> for
    79:81:void setScissors(int,int,int,int) -> do
nidefawl.qubes.vec.Vec3D -> L11L1Lllllll1L1L:
    double x -> do
    double y -> if
    double z -> for
    24:24:nidefawl.qubes.vec.BlockPos toBlock() -> do
    28:31:void set(nidefawl.qubes.vec.Vec3D) -> do
    39:42:void set(double,double,double) -> do
    45:45:double lengthSquared() -> do
    56:60:nidefawl.qubes.vec.Vec3D add(nidefawl.qubes.vec.Vec3D,nidefawl.qubes.vec.Vec3D,nidefawl.qubes.vec.Vec3D) -> do
    64:68:nidefawl.qubes.vec.Vec3D sub(nidefawl.qubes.vec.Vec3D,nidefawl.qubes.vec.Vec3D,nidefawl.qubes.vec.Vec3D) -> if
    128:132:nidefawl.qubes.vec.Vec3D scale(double) -> do
    143:152:java.lang.String toString() -> toString
    180:180:double length() -> if
    205:208:double distanceSq(nidefawl.qubes.vec.Vec3D) -> do
    212:215:void addVec(nidefawl.qubes.vec.Vec3D) -> if
    217:223:void interp(nidefawl.qubes.vec.Vec3D,nidefawl.qubes.vec.Vec3D,double,nidefawl.qubes.vec.Vec3D) -> do
nidefawl.qubes.vec.Vector2f -> iJ1LjIIj1LIj1LIj:
    float x -> do
    float y -> if
    56:58:void set(double,double) -> do
nidefawl.qubes.vec.Vector3f -> Ij1LiJiJjIJi1LL1:
    nidefawl.qubes.vec.Vector3f ZERO -> do
    nidefawl.qubes.vec.Vector3f ONE -> if
    float x -> do
    float y -> if
    float z -> for
    56:57:void set(nidefawl.qubes.vec.Vector3f) -> do
    63:66:void set(float,float,float) -> do
    72:72:float lengthSquared() -> do
    85:88:nidefawl.qubes.vec.Vector3f translate(float,float,float) -> do
    103:107:nidefawl.qubes.vec.Vector3f add(nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f) -> do
    123:127:nidefawl.qubes.vec.Vector3f sub(nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f) -> if
    144:149:nidefawl.qubes.vec.Vector3f cross(nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f) -> for
    208:208:float dot(nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f) -> do
    244:248:nidefawl.qubes.vec.Vector3f scale(float) -> do
    257:261:nidefawl.qubes.vec.Vector3f store(java.nio.FloatBuffer) -> do
    268:277:java.lang.String toString() -> toString
    300:301:void setX(float) -> do
    309:310:void setY(float) -> if
    318:319:void setZ(float) -> for
    332:332:float length() -> if
    341:346:nidefawl.qubes.vec.Vector3f normalise() -> do
    350:355:nidefawl.qubes.vec.Vector3f normaliseNull() -> if
    366:367:void set(nidefawl.qubes.vec.Vec3D) -> do
    373:376:void addVec(nidefawl.qubes.vec.Vector3f) -> if
    385:388:float distanceSq(float,float,float) -> do
    392:395:void write(java.io.DataOutput) -> do
    398:401:void read(java.io.DataInput) -> do
    414:415:void subtract(nidefawl.qubes.vec.Vector3f) -> for
    418:423:void interp(nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Vector3f,float,nidefawl.qubes.vec.Vector3f) -> do
    425:430:void interp(nidefawl.qubes.vec.Vec3D,nidefawl.qubes.vec.Vec3D,float,nidefawl.qubes.vec.Vector3f) -> do
nidefawl.qubes.vec.Vector4f -> JiiJiJiJ1L1LJi:
    float x -> do
    float y -> if
    float z -> for
    float w -> int
    57:61:void set(float,float,float,float) -> do
    67:67:float lengthSquared() -> do
    239:239:java.lang.String toString() -> toString
    308:308:float length() -> if
nidefawl.qubes.world.BlockPlacer -> Ij1LJiIjL1IjJi1L:
    nidefawl.qubes.entity.PlayerServer player -> do
    nidefawl.qubes.item.BlockStack stack -> do
    long startTime -> do
    nidefawl.qubes.world.biomes.HexBiome biome -> do
    nidefawl.qubes.world.structure.tree.Tree tree -> do
    int resolved -> do
    nidefawl.qubes.vec.BlockPos pos -> do
    47:47:nidefawl.qubes.entity.Player getPlayer() -> do
    50:50:nidefawl.qubes.world.World getWorld() -> do
    54:67:nidefawl.qubes.world.structure.tree.Tree getTree() -> do
    70:74:nidefawl.qubes.world.biomes.HexBiome getBiome() -> do
    79:110:void tryMine(nidefawl.qubes.vec.BlockPos,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.item.BaseStack,int,int) -> do
    112:257:void tryPlace(nidefawl.qubes.vec.BlockPos,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.item.BlockStack,int) -> do
    267:277:void tryHarvest(int,int,int) -> do
    291:300:boolean canPlaceDefault(nidefawl.qubes.block.Block,nidefawl.qubes.vec.BlockPos,nidefawl.qubes.vec.BlockPos,int,int,int) -> do
    310:315:void placeDefault(nidefawl.qubes.vec.BlockPos,int,int,int) -> do
    320:325:nidefawl.qubes.chunk.blockdata.BlockData getBlockData() -> do
nidefawl.qubes.world.IBlockWorld -> jIL1L1IjIjIjlliJ:
    int getType(int,int,int) -> if
    int getData(int,int,int) -> do
    boolean isNormalBlock(int,int,int,int) -> do
    boolean setTypeData(int,int,int,int,int,int) -> do
    int getLight(int,int,int) -> int
    nidefawl.qubes.chunk.blockdata.BlockData getBlockData(int,int,int) -> do
    int getBiomeFaceColor(int,int,int,int,int,nidefawl.qubes.biome.BiomeColor) -> do
    int getWater(int,int,int) -> for
nidefawl.qubes.world.IWorldSettings -> jIiJjIiJL1L1IjiJ:
    long getSeed() -> do
    java.util.UUID getUUID() -> do
    long getTime() -> if
    int getId() -> do
    java.lang.String getName() -> do
    long getDayLen() -> for
    boolean isFixedTime() -> do
    void setTime(long) -> do
    void setDayLen(long) -> if
    void setFixedTime(boolean) -> do
nidefawl.qubes.world.SunLightModel -> L1JillIjJiL11LjI:
    float dayLightIntensity -> do
    float nightNoon -> if
    float dayNoon -> for
    float lightAngleUp -> int
    nidefawl.qubes.vec.Matrix4f sunModelView -> do
    nidefawl.qubes.vec.Matrix4f moonModelView -> if
    nidefawl.qubes.vec.Vector3f sunPosition -> do
    nidefawl.qubes.vec.Vector3f moonPosition -> if
    nidefawl.qubes.vec.Vector3f lightPosition -> for
    nidefawl.qubes.vec.Vector3f lightDirection -> int
    nidefawl.qubes.vec.Vector3f tmp1 -> new
    long time -> do
    long dayLen -> if
    float sunPathRotation -> new
    float moonPathRotation -> try
    42:76:void updateFrame(float) -> do
    78:79:void setDayLen(long) -> do
    81:82:void setTime(long) -> if
    97:106:float getSunAngle(float) -> do
    115:115:nidefawl.qubes.vec.Vector3f getLightPosition() -> do
    118:118:float getLightAngleUp() -> do
    122:122:float getDayLightIntensity() -> if
    126:126:float getDayNoonFloat() -> for
    130:130:float getNightNoonFloat() -> int
nidefawl.qubes.world.World -> JiiJjIL1JiIj1LJi:
    java.util.ArrayList lights -> do
    int worldHeight -> do
    int worldHeightMinusOne -> if
    int worldHeightBits -> for
    int worldHeightBitsPlusFour -> int
    int worldSeaLevel -> new
    long seed -> do
    nidefawl.qubes.chunk.ChunkManager chunkMgr -> do
    java.util.Random rand -> do
    java.util.UUID uuid -> do
    int id -> try
    nidefawl.qubes.world.IWorldSettings settings -> do
    nidefawl.qubes.world.biomes.IBiomeManager biomeManager -> do
    java.lang.String name -> do
    nidefawl.qubes.chunk.ChunkManager makeChunkManager() -> do
    74:86:float getSunAngle(float) -> do
    102:102:int getType(nidefawl.qubes.vec.BlockPos) -> do
    112:112:int getData(nidefawl.qubes.vec.BlockPos) -> if
    116:124:nidefawl.qubes.chunk.blockdata.BlockData getBlockData(int,int,int) -> do
    128:136:int getType(int,int,int) -> if
    140:148:int getWater(int,int,int) -> for
    152:160:int getData(int,int,int) -> do
    167:183:boolean setData(int,int,int,int,int) -> do
    191:208:boolean setType(int,int,int,int,int) -> if
    211:217:void updateBlocks(int,int,int,int,int) -> do
    220:224:nidefawl.qubes.block.Block getBlock(int,int,int) -> do
    229:246:boolean setBlockData(int,int,int,nidefawl.qubes.chunk.blockdata.BlockData,int) -> do
    250:250:boolean setBlockData(nidefawl.qubes.vec.BlockPos,nidefawl.qubes.chunk.blockdata.BlockData,int) -> do
    255:270:boolean setTypeData(int,int,int,int,int,int) -> do
    274:274:void updateLight(int,int,int) -> do
    void flagBlock(int,int,int) -> if
    279:279:nidefawl.qubes.chunk.Chunk getChunk(int,int) -> do
    284:284:void onLoad() -> do
    287:290:void removeLight(int) -> do
    293:304:void addLight(nidefawl.qubes.vec.Vector3f) -> do
    307:329:void spawnLights(nidefawl.qubes.vec.BlockPos) -> do
    333:337:int getHeight(int,int) -> do
    340:340:nidefawl.qubes.chunk.ChunkManager getChunkManager() -> if
    345:345:java.util.UUID getUUID() -> do
    353:353:long getTime() -> do
    357:357:long getDayLength() -> if
    361:363:long getDayTime() -> for
    371:371:int getId() -> do
    379:379:void updateLightHeightMap(nidefawl.qubes.chunk.Chunk,int,int,int,int,boolean) -> do
    382:392:nidefawl.qubes.chunk.Chunk getChunkIfNeightboursLoaded(int,int) -> if
    396:397:boolean canSeeSky(int,int,int) -> do
    401:402:boolean isTransparent(int,int,int) -> if
    414:417:int getLight(int,int,int) -> int
    430:430:void flagChunkLightUpdate(int,int) -> do
    433:433:java.lang.String getName() -> do
    441:441:nidefawl.qubes.world.IWorldSettings getSettings() -> do
    447:450:boolean isNormalBlock(int,int,int,int) -> do
    453:453:java.util.Random getRand() -> do
    java.util.List getEntityList() -> do
    463:463:int getBiomeFaceColor(int,int,int,int,int,nidefawl.qubes.biome.BiomeColor) -> do
    467:467:nidefawl.qubes.world.biomes.HexBiome getHex(int,int) -> do
    471:471:void spawnParticles(int,int,int,int,int) -> if
nidefawl.qubes.world.WorldClient -> jI1LiJL11LiJL1Ji:
    float dayLightIntensity -> do
    float nightNoon -> if
    float dayNoon -> for
    float lightAngleUp -> int
    nidefawl.qubes.vec.Matrix4f sunModelView -> do
    nidefawl.qubes.vec.Matrix4f moonModelView -> if
    nidefawl.qubes.vec.Vector3f sunPosition -> do
    nidefawl.qubes.vec.Vector3f moonPosition -> if
    nidefawl.qubes.vec.Vector3f lightPosition -> for
    nidefawl.qubes.vec.Vector3f lightDirection -> int
    nidefawl.qubes.vec.Vector3f tmp1 -> new
    java.util.HashMap entities -> do
    java.util.ArrayList entityList -> if
    java.util.ArrayList entityRemove -> for
    55:61:nidefawl.qubes.world.biomes.IBiomeManager createBiomeManager(nidefawl.qubes.world.biomes.IBiomeSettings) -> do
    67:67:nidefawl.qubes.chunk.ChunkManager makeChunkManager() -> do
    71:103:void updateFrame(float) -> do
    105:105:nidefawl.qubes.vec.Vector3f getLightPosition() -> do
    108:108:float getLightAngleUp() -> do
    112:112:float getDayLightIntensity() -> if
    116:116:float getDayNoonFloat() -> for
    120:120:float getNightNoonFloat() -> int
    124:125:void flagBlock(int,int,int) -> if
    129:151:void tickUpdate() -> if
    156:158:void onLeave() -> for
    161:168:boolean addEntity(nidefawl.qubes.entity.Entity) -> do
    172:178:boolean removeEntity(nidefawl.qubes.entity.Entity) -> if
    183:183:nidefawl.qubes.entity.Entity getEntity(int) -> do
    187:187:java.util.List getEntityList() -> do
nidefawl.qubes.world.WorldClient$1 -> jIiJIjllJiiJ1Lll:
    int[] $SwitchMap$nidefawl$qubes$world$biomes$BiomeManagerType -> do
nidefawl.qubes.world.WorldServer -> L1L1jI1LJilllljI:
    nidefawl.qubes.server.GameServer server -> do
    nidefawl.qubes.server.PlayerChunkTracker chunkTracker -> do
    java.util.List players -> do
    nidefawl.qubes.chunk.server.ChunkManagerServer chunkServer -> do
    nidefawl.qubes.worldgen.terrain.ITerrainGen generator -> do
    nidefawl.qubes.worldgen.populator.IChunkPopulator populator -> do
    java.util.Set generatorQueue -> do
    java.util.Set lightUpdateQueue -> if
    nidefawl.qubes.blocklight.BlockLightThread lightUpdater -> do
    java.util.HashMap entities -> do
    java.util.ArrayList entityList -> if
    java.util.ArrayList entityRemove -> for
    java.util.Iterator updateIt -> do
    69:73:void onLeave() -> if
    77:79:void onLoad() -> do
    85:85:nidefawl.qubes.worldgen.terrain.ITerrainGen getGenerator() -> do
    89:108:void tickUpdate() -> for
    111:113:void resyncTime() -> int
    116:121:void broadcastPacket(nidefawl.qubes.network.packet.Packet) -> do
    124:124:nidefawl.qubes.chunk.ChunkManager makeChunkManager() -> do
    128:128:nidefawl.qubes.server.GameServer getServer() -> do
    133:196:void updateChunks() -> new
    202:203:void unloadUnused() -> try
    206:217:void addPlayer(nidefawl.qubes.entity.PlayerServer) -> do
    220:226:void removePlayer(nidefawl.qubes.entity.PlayerServer) -> if
    230:241:boolean addEntity(nidefawl.qubes.entity.Entity) -> do
    245:256:boolean removeEntity(nidefawl.qubes.entity.Entity) -> if
    259:259:nidefawl.qubes.vec.Vector3f getSpawnPosition() -> do
    263:267:void save(boolean) -> do
    270:271:void flagBlock(int,int,int) -> if
    273:274:void flagChunk(int,int) -> if
    277:277:nidefawl.qubes.server.PlayerChunkTracker getPlayerChunkTracker() -> do
    281:283:void calcSunLight(nidefawl.qubes.chunk.Chunk) -> do
    287:314:void updateLightHeightMap(nidefawl.qubes.chunk.Chunk,int,int,int,int,boolean) -> do
    317:319:void updateLight(int,int,int) -> do
    322:323:void flagChunkLightUpdate(int,int) -> do
    328:328:nidefawl.qubes.worldgen.populator.IChunkPopulator getChunkPopulator() -> do
    334:349:int deleteAllChunks() -> if
    352:366:int regenChunks(java.util.Collection) -> do
    374:374:java.util.List getEntityList() -> do
    381:381:nidefawl.qubes.world.biomes.IBiomeManager getBiomeManager() -> do
    384:385:void queueGenTask(nidefawl.qubes.worldgen.structure.GenTask) -> do
    387:408:void genStructures() -> byte
    410:410:nidefawl.qubes.world.biomes.BiomeManagerType getBiomeType() -> do
    413:416:void spawnParticles(int,int,int,int,int) -> if
nidefawl.qubes.world.WorldSettings -> L1IjlljIIjlljI:
    long time -> do
    long dayLen -> if
    boolean isFixedTime -> do
    long seed -> for
    java.util.UUID uuid -> do
    java.io.File dir -> do
    int id -> do
    java.lang.String generatorName -> do
    java.lang.String worldName -> if
    29:29:long getDayLen() -> for
    34:34:boolean isFixedTime() -> do
    38:38:void read(java.io.DataInput) -> do
    42:51:void write(java.io.DataOutput) -> do
    61:66:void setDefaults() -> do
    70:78:void load() -> if
    81:81:java.io.File getWorldDirectory() -> do
    86:92:void save() -> for
    96:96:long getSeed() -> do
    101:101:java.util.UUID getUUID() -> do
    106:106:long getTime() -> if
    111:111:int getId() -> do
    115:116:void setId(int) -> do
    124:124:java.lang.String getName() -> do
    132:136:void saveFile() -> int
    140:141:void setTime(long) -> do
    145:146:void setFixedTime(boolean) -> do
    150:151:void setDayLen(long) -> if
nidefawl.qubes.world.WorldSettingsClient -> llllL11L1L1LiJjI:
    java.util.UUID uuid -> do
    long seed -> do
    long time -> if
    int id -> do
    java.lang.String worldName -> do
    long dayLen -> for
    boolean isFixedTime -> do
    21:28:void read(java.io.DataInput) -> do
    32:32:void write(java.io.DataOutput) -> do
    41:41:long getSeed() -> do
    46:46:java.util.UUID getUUID() -> do
    51:51:long getTime() -> if
    56:56:int getId() -> do
    61:61:java.lang.String getName() -> do
    66:66:long getDayLen() -> for
    71:71:boolean isFixedTime() -> do
    76:77:void setTime(long) -> do
    81:82:void setFixedTime(boolean) -> do
    86:87:void setDayLen(long) -> if
nidefawl.qubes.world.biomes.BiomeManagerType -> JiL1iJJiJiL1L11L:
    nidefawl.qubes.world.biomes.BiomeManagerType SINGLE -> do
    nidefawl.qubes.world.biomes.BiomeManagerType HEX -> if
    nidefawl.qubes.world.biomes.BiomeManagerType[] $VALUES -> do
    3:3:nidefawl.qubes.world.biomes.BiomeManagerType[] values() -> values
    3:3:nidefawl.qubes.world.biomes.BiomeManagerType valueOf(java.lang.String) -> valueOf
    7:7:nidefawl.qubes.world.biomes.BiomeManagerType fromId(int) -> do
nidefawl.qubes.world.biomes.BiomeSettingsHex -> jIJi1LiJ1LJiL1L1:
    6:6:nidefawl.qubes.world.biomes.BiomeManagerType getType() -> do
nidefawl.qubes.world.biomes.BiomeSettingsStatic -> L11LjIIjJiiJiJ1L:
    6:6:nidefawl.qubes.world.biomes.BiomeManagerType getType() -> do
nidefawl.qubes.world.biomes.EmptyBiomeManager -> IjiJjIjIIj1LL1L1:
    nidefawl.qubes.world.biomes.BiomeSettingsStatic settings -> do
    28:28:nidefawl.qubes.biome.Biome getBiome(int,int) -> do
    33:33:int getBiomeFaceColor(nidefawl.qubes.world.World,int,int,int,int,int,nidefawl.qubes.biome.BiomeColor) -> do
    38:38:nidefawl.qubes.network.packet.PacketSWorldBiomes getPacket() -> do
    42:42:void recvData(nidefawl.qubes.network.packet.PacketSWorldBiomes) -> do
    46:46:void sendChanges() -> do
    50:50:void saveChanges() -> if
    53:53:nidefawl.qubes.world.biomes.HexBiome blockToHex(int,int) -> do
    58:58:void deleteAll() -> for
    62:62:nidefawl.qubes.world.biomes.IBiomeSettings getBiomeSettings() -> do
nidefawl.qubes.world.biomes.HexBiome -> Ij1L1LJiiJL1IjjI:
    boolean needsSave -> do
    int version -> for
    nidefawl.qubes.biome.Biome biome -> do
    nidefawl.qubes.world.structure.StructureMap trees -> do
    nidefawl.qubes.world.structure.StructureMap mines -> if
    int subtype -> int
    53:79:void load(java.io.File) -> do
    85:115:void save(java.io.File) -> if
    118:120:void registerTree(nidefawl.qubes.world.structure.tree.Tree) -> do
    123:125:void registerMine(nidefawl.qubes.world.structure.mine.Mine) -> do
    128:138:nidefawl.qubes.world.structure.tree.Tree getTree(int,int,int) -> do
    142:148:nidefawl.qubes.world.biomes.HexBiome[] getClosest3(double,double) -> do
    153:153:nidefawl.qubes.world.structure.StructureMap getTrees() -> do
    156:156:nidefawl.qubes.world.structure.StructureMap getMines() -> if
nidefawl.qubes.world.biomes.HexBiome$1 -> jIll1L1LiJJijIL1:
    nidefawl.qubes.world.biomes.HexBiome this$0 -> do
    32:32:nidefawl.qubes.world.structure.tree.Tree newInstance() -> do
    29:29:java.lang.Object newInstance() -> do
nidefawl.qubes.world.biomes.HexBiome$2 -> L1L1JijIJiiJL1ll:
    nidefawl.qubes.world.biomes.HexBiome this$0 -> do
    38:38:nidefawl.qubes.world.structure.mine.Mine newInstance() -> do
    35:35:java.lang.Object newInstance() -> do
nidefawl.qubes.world.biomes.HexBiomeEnd -> lljIjIlliJllL1iJ:
    17:17:void save(java.io.File) -> if
    20:20:void registerTree(nidefawl.qubes.world.structure.tree.Tree) -> do
    23:23:void load(java.io.File) -> do
nidefawl.qubes.world.biomes.HexBiomes -> L1llIjjIIjjI1LIj:
    nidefawl.qubes.world.World world -> do
    27:28:nidefawl.qubes.biome.Biome getBiome(int,int) -> do
    35:91:int getBiomeFaceColor(nidefawl.qubes.world.World,int,int,int,int,int,nidefawl.qubes.biome.BiomeColor) -> do
    18:18:nidefawl.qubes.world.biomes.HexBiome blockToHex(int,int) -> do
nidefawl.qubes.world.biomes.HexBiomesClient -> JiIjiJIjIjIjiJJi:
    22:22:nidefawl.qubes.world.biomes.HexBiome loadCell(int,int) -> if
    26:26:nidefawl.qubes.world.biomes.HexBiome oobCell(int,int) -> for
    31:31:nidefawl.qubes.network.packet.PacketSWorldBiomes getPacket() -> do
    35:42:void recvData(nidefawl.qubes.network.packet.PacketSWorldBiomes) -> do
    46:46:void sendChanges() -> do
    49:49:void saveChanges() -> if
    53:53:void deleteAll() -> for
    56:56:nidefawl.qubes.world.biomes.IBiomeSettings getBiomeSettings() -> do
    15:15:java.lang.Object oobCell(int,int) -> for
    15:15:java.lang.Object loadCell(int,int) -> if
nidefawl.qubes.world.biomes.HexBiomesServer -> iJ1LJiIjIjjIL1L1:
    java.util.regex.Pattern FILE_PATTERN -> do
    boolean SAVE_LOAD -> do
    java.io.File dir -> do
    java.util.Set flaggedInstances -> do
    java.util.Set flaggedInstances2 -> if
    nidefawl.qubes.world.biomes.BiomeSettingsHex biomesettings -> do
    47:48:java.io.File getFile(int,int) -> do
    55:81:void loadFiles() -> int
    94:104:nidefawl.qubes.world.biomes.HexBiome loadCell(int,int) -> if
    108:111:void flagBiome(int,int) -> if
    116:121:nidefawl.qubes.network.packet.PacketSWorldBiomes getPacket() -> do
    128:141:nidefawl.qubes.network.packet.PacketSWorldBiomes makePacket(java.util.ArrayList) -> do
    146:146:void recvData(nidefawl.qubes.network.packet.PacketSWorldBiomes) -> do
    152:162:void sendChanges() -> do
    165:165:nidefawl.qubes.world.biomes.HexBiome oobCell(int,int) -> for
    169:183:void saveChanges() -> if
    186:187:void flag(int,int) -> do
    191:216:void deleteAll() -> for
    219:219:nidefawl.qubes.world.biomes.IBiomeSettings getBiomeSettings() -> do
    27:27:java.lang.Object oobCell(int,int) -> for
    27:27:java.lang.Object loadCell(int,int) -> if
nidefawl.qubes.world.biomes.HexBiomesServer$1 -> JiIjIjL1JiiJiJL1:
    nidefawl.qubes.world.biomes.HexBiomesServer this$0 -> do
    60:60:boolean accept(java.io.File) -> accept
nidefawl.qubes.world.biomes.IBiomeManager -> L1IjjIjIlliJIjjI:
    nidefawl.qubes.biome.Biome getBiome(int,int) -> do
    nidefawl.qubes.world.biomes.IBiomeSettings getBiomeSettings() -> do
    int getBiomeFaceColor(nidefawl.qubes.world.World,int,int,int,int,int,nidefawl.qubes.biome.BiomeColor) -> do
    nidefawl.qubes.network.packet.PacketSWorldBiomes getPacket() -> do
    void recvData(nidefawl.qubes.network.packet.PacketSWorldBiomes) -> do
    void sendChanges() -> do
    void saveChanges() -> if
    nidefawl.qubes.world.biomes.HexBiome blockToHex(int,int) -> do
    void deleteAll() -> for
nidefawl.qubes.world.biomes.IBiomeSettings -> L1jI1LJijIjIjIJi:
    8:15:nidefawl.qubes.world.biomes.IBiomeSettings fromId(int) -> do
    18:25:int getId(nidefawl.qubes.world.biomes.IBiomeSettings) -> do
    nidefawl.qubes.world.biomes.BiomeManagerType getType() -> do
    29:29:void read(java.io.DataInput) -> do
    31:31:void write(java.io.DataOutput) -> do
nidefawl.qubes.world.biomes.IBiomeSettings$1 -> iJL1jIL1Ij1LJi:
    int[] $SwitchMap$nidefawl$qubes$world$biomes$BiomeManagerType -> do
nidefawl.qubes.world.structure.Structure -> iJjIjIJiJi1LiJ:
    java.util.Set keys -> do
    nidefawl.qubes.vec.AABBInt bb -> do
    int[] blocks -> do
    34:36:void addKey(int) -> do
    46:46:int getMinX() -> do
    51:51:int getMinZ() -> if
    56:56:int getMaxX() -> for
    61:61:int getMaxZ() -> int
    70:76:nidefawl.qubes.nbt.Tag$Compound save() -> do
    80:87:void load(nidefawl.qubes.nbt.Tag$Compound) -> do
    90:97:byte[] intToByteArray(int[],byte[]) -> do
    101:109:int[] byteToIntArray(byte[],int[]) -> do
    117:117:java.util.Iterator iterator() -> do
    120:129:void setBlocks(long[]) -> do
    132:134:boolean has(int,int,int) -> do
nidefawl.qubes.world.structure.StructureBlockIterator -> llll1L1LiJL11LIj:
    nidefawl.qubes.world.structure.Structure tree -> do
    int pos -> do
    int[] blocks -> do
    nidefawl.qubes.vec.BlockPos bPos -> do
    nidefawl.qubes.vec.AABBInt bb -> do
    44:44:boolean hasNext() -> hasNext
    49:53:nidefawl.qubes.vec.BlockPos next() -> do
    58:58:void remove() -> remove
    11:11:java.lang.Object next() -> next
nidefawl.qubes.world.structure.StructureFactory -> IjlliJjIL1JijIJi:
    java.lang.Object newInstance() -> do
nidefawl.qubes.world.structure.StructureMap -> IjjIJiIjJiiJiJ1L:
    nidefawl.qubes.world.structure.StructureFactory fac -> do
    nidefawl.qubes.util.RegionMap structures -> do
    28:36:void load(nidefawl.qubes.nbt.Tag$Compound) -> do
    39:49:nidefawl.qubes.nbt.Tag$Compound save() -> do
    60:61:boolean add(nidefawl.qubes.world.structure.Structure) -> do
    89:89:java.util.Collection getRegions(int,int,int) -> do
    101:102:void clear() -> do
nidefawl.qubes.world.structure.mine.Mine -> JiIjIj1Lll1LjI1L:
    int dir -> do
    nidefawl.qubes.vec.BlockPos pos -> do
    23:26:nidefawl.qubes.nbt.Tag$Compound save() -> do
    31:34:void load(nidefawl.qubes.nbt.Tag$Compound) -> do
    37:51:void regen(nidefawl.qubes.world.WorldServer) -> do
nidefawl.qubes.world.structure.tree.Tree -> Ij1LiJJiL1IjiJL1:
    nidefawl.qubes.vec.AABBInt trunkBB -> if
    26:29:nidefawl.qubes.nbt.Tag$Compound save() -> do
    33:36:void load(nidefawl.qubes.nbt.Tag$Compound) -> do
    39:39:java.util.Iterator trunkIterator() -> if
    43:110:void onMine(nidefawl.qubes.world.BlockPlacer,nidefawl.qubes.block.Block,nidefawl.qubes.world.World,nidefawl.qubes.vec.BlockPos,nidefawl.qubes.entity.PlayerServer,nidefawl.qubes.item.ItemStack) -> do
nidefawl.qubes.worldgen.TerrainGen -> JiIjIjIjiJJiiJ1L:
    17:28:void init() -> do
nidefawl.qubes.worldgen.WorldGenInit -> L1IjiJL1llJilliJ:
    nidefawl.qubes.worldgen.terrain.ITerrainGen generator -> do
    nidefawl.qubes.world.biomes.IBiomeManager biomeManager -> do
    nidefawl.qubes.worldgen.populator.IChunkPopulator populator -> do
    14:14:nidefawl.qubes.worldgen.terrain.ITerrainGen getGenerator() -> do
    18:18:nidefawl.qubes.world.biomes.IBiomeManager getBiomeManager() -> do
    22:22:nidefawl.qubes.worldgen.populator.IChunkPopulator getPopulator() -> do
nidefawl.qubes.worldgen.populator.ChunkPopulator -> iJjIllL1L11LllL1:
    nidefawl.qubes.world.WorldServer world -> do
    nidefawl.qubes.worldgen.populator.TreeGen1 tree -> do
    41:257:void populate(nidefawl.qubes.chunk.Chunk) -> do
    263:263:boolean isSoil(int) -> do
nidefawl.qubes.worldgen.populator.EmptyChunkPopulator -> IjjIJiiJjIIjjIIj:
    24:24:void populate(nidefawl.qubes.chunk.Chunk) -> do
nidefawl.qubes.worldgen.populator.IChunkPopulator -> jIiJ1LJi1LIjll1L:
    void populate(nidefawl.qubes.chunk.Chunk) -> do
nidefawl.qubes.worldgen.populator.TreeGen1 -> jIIjL1iJjIjIJi1L:
    int log -> do
    int leaves -> if
nidefawl.qubes.worldgen.populator.TreeGeneratorLSystem -> iJlliJIjiJll1L:
    float MAX_ANGLE_OFFSET -> do
    int maxDepth -> do
    float angle -> if
    int leaves -> if
    int log -> for
    java.lang.String initialAxiom -> do
    java.util.Map ruleSet -> for
    java.util.Map blocks -> do
    java.util.Map trunk -> if
    int variation -> int
    nidefawl.qubes.block.Block vines -> do
    nidefawl.qubes.vec.Matrix4f tempRotation -> do
    nidefawl.qubes.vec.Vector3f dir -> do
    nidefawl.qubes.vec.Vector3f dir2 -> if
    36:37:void setVines(nidefawl.qubes.block.Block) -> do
    61:62:nidefawl.qubes.worldgen.populator.TreeGeneratorLSystem setLeafType(int) -> do
    70:71:nidefawl.qubes.worldgen.populator.TreeGeneratorLSystem setBarkType(int) -> if
    78:89:boolean generate(nidefawl.qubes.world.IBlockWorld,int,int,int,java.util.Random) -> do
    92:144:void postGenerate(nidefawl.qubes.world.IBlockWorld,int,int,int,java.util.Random) -> do
    152:367:void recurse(nidefawl.qubes.world.IBlockWorld,java.util.Random,int,int,int,float,nidefawl.qubes.util.CharSequenceIterator,nidefawl.qubes.vec.Vector3f,nidefawl.qubes.vec.Matrix4f,int,int) -> do
    370:371:void safelySetBlock(nidefawl.qubes.world.IBlockWorld,int,int,int,int) -> do
    373:382:void safelySetBlock(nidefawl.qubes.world.IBlockWorld,int,int,int,int,int,int) -> do
    385:440:nidefawl.qubes.world.structure.tree.Tree getTree() -> do
nidefawl.qubes.worldgen.populator.TreeGenerators -> L1llll1LllJiiJ:
    20:84:nidefawl.qubes.worldgen.populator.TreeGeneratorLSystem get(int,java.util.Random) -> do
nidefawl.qubes.worldgen.populator.TreeRule -> jIIjllllJi1LllL1:
    java.lang.String string -> do
    float weight -> do
    27:27:java.lang.String getRule() -> do
    34:34:float getWeight() -> do
nidefawl.qubes.worldgen.structure.GenTask -> jIllllJijIIjiJiJ:
    nidefawl.qubes.worldgen.structure.StructureGen generator -> do
    int chunkX -> do
    int chunkZ -> if
    nidefawl.qubes.world.WorldServer world -> do
    java.util.List neededChunks -> do
    boolean prepared -> do
    27:51:boolean run() -> do
nidefawl.qubes.worldgen.structure.MineGen -> IjJijIL1iJL1Ij1L:
    nidefawl.qubes.vec.BlockPos pos -> do
    int[] lvl -> do
    int height -> do
    int max -> if
    int min -> for
    int dir -> int
    java.util.Random rand -> do
    int chunkX -> new
    int chunkZ -> try
    java.util.Set blocks -> do
    nidefawl.qubes.vec.BlockPos minePos -> if
    44:51:java.util.List prepare(nidefawl.qubes.world.WorldServer,int,int) -> do
    55:111:int generate(nidefawl.qubes.world.WorldServer) -> do
    115:185:boolean canBuild(nidefawl.qubes.world.World) -> do
    190:318:int gen(nidefawl.qubes.world.WorldServer) -> if
    322:357:nidefawl.qubes.world.structure.mine.Mine getMine() -> do
nidefawl.qubes.worldgen.structure.StructureGen -> JijIIjjI1LIjJiIj:
    java.util.List prepare(nidefawl.qubes.world.WorldServer,int,int) -> do
    int generate(nidefawl.qubes.world.WorldServer) -> do
nidefawl.qubes.worldgen.terrain.ITerrainGen -> llIjjIIj1LiJiJll:
    nidefawl.qubes.chunk.Chunk generateChunk(int,int) -> do
    nidefawl.qubes.worldgen.WorldGenInit getWorldGen(nidefawl.qubes.world.WorldServer,long,nidefawl.qubes.world.WorldSettings) -> do
nidefawl.qubes.worldgen.terrain.TerrainGenBlockTest -> iJ1L1LIj1LiJll:
    nidefawl.qubes.world.WorldServer world -> do
    long seed -> do
    25:33:nidefawl.qubes.chunk.Chunk generateChunk(int,int) -> do
    37:58:void generateTerrain(nidefawl.qubes.chunk.Chunk,short[]) -> do
    62:66:nidefawl.qubes.worldgen.WorldGenInit getWorldGen(nidefawl.qubes.world.WorldServer,long,nidefawl.qubes.world.WorldSettings) -> do
nidefawl.qubes.worldgen.terrain.TerrainGenFlatSand128 -> iJiJll1LJiL1iJiJ:
    nidefawl.qubes.world.WorldServer world -> do
    22:27:nidefawl.qubes.chunk.Chunk generateChunk(int,int) -> do
    31:38:void generateTerrain(nidefawl.qubes.chunk.Chunk,short[]) -> do
    42:46:nidefawl.qubes.worldgen.WorldGenInit getWorldGen(nidefawl.qubes.world.WorldServer,long,nidefawl.qubes.world.WorldSettings) -> do
nidefawl.qubes.worldgen.terrain.TerrainGenMines -> JiJiJi1LjIJijIiJ:
    nidefawl.qubes.world.WorldServer world -> do
    long seed -> do
    27:35:nidefawl.qubes.chunk.Chunk generateChunk(int,int) -> do
    39:40:void generateTerrain(nidefawl.qubes.chunk.Chunk,short[]) -> do
    45:49:nidefawl.qubes.worldgen.WorldGenInit getWorldGen(nidefawl.qubes.world.WorldServer,long,nidefawl.qubes.world.WorldSettings) -> do
nidefawl.qubes.worldgen.terrain.TerrainGenQTest -> llJijIIjjIiJL1Ji:
    nidefawl.qubes.world.WorldServer world -> do
    long seed -> do
    nidefawl.qubes.noise.TerrainNoise2D noiseM2 -> do
    46:59:nidefawl.qubes.chunk.Chunk generateChunk(int,int) -> do
    63:262:void generateTerrain(nidefawl.qubes.chunk.Chunk,short[]) -> do
    265:297:double[] generateNoise(int,int) -> do
    362:362:double clamp10(double) -> do
    384:388:nidefawl.qubes.worldgen.WorldGenInit getWorldGen(nidefawl.qubes.world.WorldServer,long,nidefawl.qubes.world.WorldSettings) -> do
nidefawl.qubes.worldgen.terrain.TerrainGeneratorIsland -> iJjI1Lll1LL1JiJi:
    nidefawl.qubes.world.WorldServer world -> do
    nidefawl.qubes.noise.TerrainNoiseMap2D test2d -> do
    28:39:nidefawl.qubes.chunk.Chunk generateChunk(int,int) -> do
    69:69:double clamp10(double) -> do
    89:184:void generateTerrain(nidefawl.qubes.chunk.Chunk,short[],byte[]) -> do
    188:192:nidefawl.qubes.worldgen.WorldGenInit getWorldGen(nidefawl.qubes.world.WorldServer,long,nidefawl.qubes.world.WorldSettings) -> do
nidefawl.qubes.worldgen.terrain.TerrainGeneratorOther -> iJ1LIj1LJiIjlljI:
    nidefawl.qubes.world.WorldServer world -> do
    long seed -> do
    nidefawl.qubes.noise.TerrainNoise noise3 -> do
    nidefawl.qubes.noise.TerrainNoise noise -> if
    nidefawl.qubes.noise.TerrainNoise2D noiseM2 -> do
    nidefawl.qubes.noise.TerrainNoiseCustom1 noise2 -> do
    nidefawl.qubes.noise.TerrainNoise noise4 -> for
    nidefawl.qubes.noise.TerrainNoise2D noise2D -> if
    nidefawl.qubes.noise.RiverNoise2D r2D -> do
    nidefawl.qubes.noise.RiverNoise2D r2D2 -> if
    nidefawl.qubes.noise.TerrainNoiseCustom1 noise5 -> if
    63:71:nidefawl.qubes.chunk.Chunk generateChunk(int,int) -> do
    155:263:void generateTerrain(nidefawl.qubes.chunk.Chunk,short[]) -> do
    265:278:double func2(double,double,double) -> do
    291:291:double clamp10(double) -> do
    313:317:nidefawl.qubes.worldgen.WorldGenInit getWorldGen(nidefawl.qubes.world.WorldServer,long,nidefawl.qubes.world.WorldSettings) -> do
nidefawl.qubes.worldgen.terrain.main.SubTerrainGen -> IjIjJiJi1LIjll1L:
    nidefawl.qubes.worldgen.terrain.main.SubTerrainGen$SubTerrainData prepare(int,int,nidefawl.qubes.world.biomes.HexBiome) -> do
    double generate(int,int,int,int,int,int,nidefawl.qubes.world.biomes.HexBiome,nidefawl.qubes.worldgen.terrain.main.SubTerrainGen$SubTerrainData,double[],double[]) -> do
nidefawl.qubes.worldgen.terrain.main.SubTerrainGen$SubTerrainData -> IjiJ1LlliJIjllll:
    nidefawl.qubes.worldgen.terrain.main.SubTerrainGen this$0 -> do
nidefawl.qubes.worldgen.terrain.main.SubTerrainGen4 -> iJIjL1jIJiJiIj:
    nidefawl.qubes.noise.TerrainNoiseScale noise3 -> do
    nidefawl.qubes.noise.TerrainNoiseScale noise -> if
    nidefawl.qubes.noise.TerrainNoise2D noiseM2 -> do
    nidefawl.qubes.noise.TerrainNoiseScale noise2 -> for
    nidefawl.qubes.noise.TerrainNoise2D noise2D -> if
    nidefawl.qubes.noise.RiverNoise2D r2D -> do
    nidefawl.qubes.noise.RiverNoise2D r2D2 -> if
    nidefawl.qubes.noise.TerrainNoiseScale noise5 -> int
    nidefawl.qubes.worldgen.terrain.main.TerrainGeneratorMain main -> do
    89:96:nidefawl.qubes.worldgen.terrain.main.SubTerrainGen$SubTerrainData prepare(int,int,nidefawl.qubes.world.biomes.HexBiome) -> do
    100:181:double generate(int,int,int,int,int,int,nidefawl.qubes.world.biomes.HexBiome,nidefawl.qubes.worldgen.terrain.main.SubTerrainGen$SubTerrainData,double[],double[]) -> do
nidefawl.qubes.worldgen.terrain.main.SubTerrainGen4$NoiseData -> llL1L1L1jIL1L11L:
    nidefawl.qubes.noise.RiverNoise2D$RiverNoiseResult r2Dn -> do
    nidefawl.qubes.noise.RiverNoise2D$RiverNoiseResult r2Dn2 -> if
    double[] dNoise2_ -> do
    double[] dnoise5_ -> if
    double[] dnoise_ -> for
    double[] dnoise3_ -> int
    nidefawl.qubes.worldgen.terrain.main.SubTerrainGen4 this$0 -> do
nidefawl.qubes.worldgen.terrain.main.SubTerrainGen5 -> L11LJiiJL11LJi1L:
    nidefawl.qubes.noise.TerrainNoiseScale noise3 -> do
    nidefawl.qubes.noise.TerrainNoiseScale noise -> if
    nidefawl.qubes.noise.TerrainNoise2D noiseM2 -> do
    nidefawl.qubes.noise.TerrainNoiseScale noise2 -> for
    nidefawl.qubes.noise.TerrainNoise2D noise2D -> if
    nidefawl.qubes.noise.TerrainNoiseScale noise5 -> int
    nidefawl.qubes.worldgen.terrain.main.TerrainGeneratorMain main -> do
    nidefawl.qubes.noise.TerrainNoiseMap2D test2d -> do
    83:104:nidefawl.qubes.worldgen.terrain.main.SubTerrainGen$SubTerrainData prepare(int,int,nidefawl.qubes.world.biomes.HexBiome) -> do
    108:193:double generate(int,int,int,int,int,int,nidefawl.qubes.world.biomes.HexBiome,nidefawl.qubes.worldgen.terrain.main.SubTerrainGen$SubTerrainData,double[],double[]) -> do
nidefawl.qubes.worldgen.terrain.main.SubTerrainGen5$NoiseData -> jIiJIjIjllJill1L:
    double[] dNoise2_ -> do
    double[] dnoise5_ -> if
    double[] dnoise_ -> for
    double[] dnoise3_ -> int
    nidefawl.qubes.noise.TerrainNoiseMap2DResult dnoise2da -> do
    nidefawl.qubes.worldgen.terrain.main.SubTerrainGen5 this$0 -> do
nidefawl.qubes.worldgen.terrain.main.SubTerrainGen6 -> jIL1L1jIjIiJIjL1:
    nidefawl.qubes.noise.TerrainNoiseScale noise3 -> do
    nidefawl.qubes.noise.TerrainNoiseScale noise -> if
    nidefawl.qubes.noise.TerrainNoise2D noiseM2 -> do
    nidefawl.qubes.noise.TerrainNoiseScale noise2 -> for
    nidefawl.qubes.noise.TerrainNoise2D noise2D -> if
    nidefawl.qubes.noise.TerrainNoiseScale noise5 -> int
    nidefawl.qubes.worldgen.terrain.main.TerrainGeneratorMain main -> do
    nidefawl.qubes.noise.TerrainNoiseMap2D test2d -> do
    83:104:nidefawl.qubes.worldgen.terrain.main.SubTerrainGen$SubTerrainData prepare(int,int,nidefawl.qubes.world.biomes.HexBiome) -> do
    108:193:double generate(int,int,int,int,int,int,nidefawl.qubes.world.biomes.HexBiome,nidefawl.qubes.worldgen.terrain.main.SubTerrainGen$SubTerrainData,double[],double[]) -> do
nidefawl.qubes.worldgen.terrain.main.SubTerrainGen6$NoiseData -> jIjIIjIj1LiJll:
    double[] dNoise2_ -> do
    double[] dnoise5_ -> if
    double[] dnoise_ -> for
    double[] dnoise3_ -> int
    nidefawl.qubes.noise.TerrainNoiseMap2DResult dnoise2da -> do
    nidefawl.qubes.worldgen.terrain.main.SubTerrainGen6 this$0 -> do
nidefawl.qubes.worldgen.terrain.main.SubTerrainGen7 -> JiiJJiJilljI1LjI:
    nidefawl.qubes.noise.TerrainNoiseScale noise3 -> do
    nidefawl.qubes.noise.TerrainNoiseScale noise -> if
    nidefawl.qubes.noise.TerrainNoise2D noiseM2 -> do
    nidefawl.qubes.noise.TerrainNoiseScale noise2 -> for
    nidefawl.qubes.noise.TerrainNoise2D noise2D -> if
    nidefawl.qubes.noise.TerrainNoiseScale noise5 -> int
    nidefawl.qubes.worldgen.terrain.main.TerrainGeneratorMain main -> do
    nidefawl.qubes.noise.TerrainNoiseMap2D test2d -> do
    81:108:nidefawl.qubes.worldgen.terrain.main.SubTerrainGen$SubTerrainData prepare(int,int,nidefawl.qubes.world.biomes.HexBiome) -> do
    112:200:double generate(int,int,int,int,int,int,nidefawl.qubes.world.biomes.HexBiome,nidefawl.qubes.worldgen.terrain.main.SubTerrainGen$SubTerrainData,double[],double[]) -> do
nidefawl.qubes.worldgen.terrain.main.SubTerrainGen7$NoiseData -> JiL1JiL1L1JijIll:
    double[] dNoise2_ -> do
    double[] dnoise5_ -> if
    double[] dnoise_ -> for
    double[] dnoise3_ -> int
    nidefawl.qubes.noise.TerrainNoiseMap2DResult dnoise2da -> do
    nidefawl.qubes.worldgen.terrain.main.SubTerrainGen7 this$0 -> do
nidefawl.qubes.worldgen.terrain.main.SubTerrainGenDesert -> iJjIJiIj1LIjiJIj:
    nidefawl.qubes.noise.TerrainNoise2D noiseM2 -> do
    nidefawl.qubes.noise.TerrainNoiseScale noise2 -> do
    nidefawl.qubes.noise.TerrainNoise2D noise2D -> if
    nidefawl.qubes.noise.TerrainNoiseScale noise5 -> if
    nidefawl.qubes.worldgen.terrain.main.TerrainGeneratorMain main -> do
    61:73:nidefawl.qubes.worldgen.terrain.main.SubTerrainGen$SubTerrainData prepare(int,int,nidefawl.qubes.world.biomes.HexBiome) -> do
    77:122:double generate(int,int,int,int,int,int,nidefawl.qubes.world.biomes.HexBiome,nidefawl.qubes.worldgen.terrain.main.SubTerrainGen$SubTerrainData,double[],double[]) -> do
nidefawl.qubes.worldgen.terrain.main.SubTerrainGenDesert$NoiseData -> IjIjL1JiIjiJjIJi:
    double[] dNoise -> do
    double[] dNoise2 -> if
    double[] dNoise2_ -> for
    double[] dnoise5_ -> int
    nidefawl.qubes.worldgen.terrain.main.SubTerrainGenDesert this$0 -> do
nidefawl.qubes.worldgen.terrain.main.SubTerrainGenFlattish -> L1L1lljIiJ1LL1Ij:
    nidefawl.qubes.noise.TerrainNoiseScale noise3 -> do
    nidefawl.qubes.noise.TerrainNoiseScale noise -> if
    nidefawl.qubes.noise.TerrainNoise2D noiseM2 -> do
    nidefawl.qubes.noise.TerrainNoiseScale noise2 -> for
    nidefawl.qubes.noise.TerrainNoise2D noise2D -> if
    nidefawl.qubes.noise.RiverNoise2D r2D -> do
    nidefawl.qubes.noise.RiverNoise2D r2D2 -> if
    nidefawl.qubes.noise.TerrainNoiseScale noise5 -> int
    nidefawl.qubes.worldgen.terrain.main.TerrainGeneratorLight main -> do
    96:120:nidefawl.qubes.worldgen.terrain.main.SubTerrainGen$SubTerrainData prepare(int,int,nidefawl.qubes.world.biomes.HexBiome) -> do
    124:235:double generate(int,int,int,int,int,int,nidefawl.qubes.world.biomes.HexBiome,nidefawl.qubes.worldgen.terrain.main.SubTerrainGen$SubTerrainData,double[],double[]) -> do
nidefawl.qubes.worldgen.terrain.main.SubTerrainGenFlattish$NoiseData -> jIJiL1llIjjIll1L:
    nidefawl.qubes.noise.RiverNoise2D$RiverNoiseResult r2Dn -> do
    nidefawl.qubes.noise.RiverNoise2D$RiverNoiseResult r2Dn2 -> if
    double[] dNoise2_ -> do
    double[] dnoise5_ -> if
    double[] dnoise_ -> for
    double[] dnoise3_ -> int
    nidefawl.qubes.worldgen.terrain.main.SubTerrainGenFlattish this$0 -> do
nidefawl.qubes.worldgen.terrain.main.SubTerrainGenMeadow -> IjL1jIjIL11LIj1L:
    nidefawl.qubes.noise.TerrainNoiseScale noise3 -> do
    nidefawl.qubes.noise.TerrainNoiseScale noise -> if
    nidefawl.qubes.noise.TerrainNoise2D noiseM2 -> do
    nidefawl.qubes.noise.TerrainNoiseScale noise2 -> for
    nidefawl.qubes.noise.TerrainNoise2D noise2D -> if
    nidefawl.qubes.noise.RiverNoise2D r2D -> do
    nidefawl.qubes.noise.RiverNoise2D r2D2 -> if
    nidefawl.qubes.noise.TerrainNoiseScale noise5 -> int
    nidefawl.qubes.worldgen.terrain.main.TerrainGeneratorMain main -> do
    96:120:nidefawl.qubes.worldgen.terrain.main.SubTerrainGen$SubTerrainData prepare(int,int,nidefawl.qubes.world.biomes.HexBiome) -> do
    124:235:double generate(int,int,int,int,int,int,nidefawl.qubes.world.biomes.HexBiome,nidefawl.qubes.worldgen.terrain.main.SubTerrainGen$SubTerrainData,double[],double[]) -> do
nidefawl.qubes.worldgen.terrain.main.SubTerrainGenMeadow$NoiseData -> ll1LllJi1LJijIL1:
    nidefawl.qubes.noise.RiverNoise2D$RiverNoiseResult r2Dn -> do
    nidefawl.qubes.noise.RiverNoise2D$RiverNoiseResult r2Dn2 -> if
    double[] dNoise2_ -> do
    double[] dnoise5_ -> if
    double[] dnoise_ -> for
    double[] dnoise3_ -> int
    nidefawl.qubes.worldgen.terrain.main.SubTerrainGenMeadow this$0 -> do
nidefawl.qubes.worldgen.terrain.main.SubTerrainGenSnowHills -> iJ1LiJ1LJijIiJ:
    nidefawl.qubes.noise.TerrainNoise2D noiseM2 -> do
    nidefawl.qubes.noise.TerrainNoiseScale noise2 -> do
    nidefawl.qubes.noise.TerrainNoise2D noise2D -> if
    nidefawl.qubes.noise.TerrainNoiseScale noise5 -> if
    nidefawl.qubes.worldgen.terrain.main.TerrainGeneratorMain main -> do
    61:73:nidefawl.qubes.worldgen.terrain.main.SubTerrainGen$SubTerrainData prepare(int,int,nidefawl.qubes.world.biomes.HexBiome) -> do
    77:122:double generate(int,int,int,int,int,int,nidefawl.qubes.world.biomes.HexBiome,nidefawl.qubes.worldgen.terrain.main.SubTerrainGen$SubTerrainData,double[],double[]) -> do
nidefawl.qubes.worldgen.terrain.main.SubTerrainGenSnowHills$NoiseData -> IjiJllllIjjIL1ll:
    double[] dNoise -> do
    double[] dNoise2 -> if
    double[] dNoise2_ -> for
    double[] dnoise5_ -> int
    nidefawl.qubes.worldgen.terrain.main.SubTerrainGenSnowHills this$0 -> do
nidefawl.qubes.worldgen.terrain.main.TerrainGeneratorLight -> iJJi1LiJIjIjiJll:
    nidefawl.qubes.world.WorldServer world -> do
    long seed -> do
    nidefawl.qubes.world.biomes.HexBiomesServer biomes -> do
    nidefawl.qubes.noise.opennoise.OpenSimplexNoise j -> do
    nidefawl.qubes.noise.opennoise.OpenSimplexNoise j2 -> if
    nidefawl.qubes.noise.opennoise.OpenSimplexNoise j4 -> for
    nidefawl.qubes.noise.opennoise.OpenSimplexNoise j5 -> int
    nidefawl.qubes.noise.opennoise.OpenSimplexNoise j6 -> new
    nidefawl.qubes.noise.opennoise.OpenSimplexNoise j7 -> try
    nidefawl.qubes.worldgen.terrain.main.SubTerrainGenFlattish gen -> do
    56:76:nidefawl.qubes.chunk.Chunk generateChunk(int,int) -> do
    79:79:nidefawl.qubes.worldgen.terrain.main.SubTerrainGen getTerrainGenInstance(nidefawl.qubes.world.biomes.HexBiome) -> do
    83:311:void generateTerrain(nidefawl.qubes.chunk.Chunk,short[],byte[],nidefawl.qubes.world.biomes.HexBiome[],java.util.ArrayList) -> do
    316:338:int getStone(nidefawl.qubes.world.WorldServer,int,int,int,nidefawl.qubes.world.biomes.HexBiome,java.util.Random) -> do
    359:364:double mix(double,double,double) -> do
    368:368:double clamp10(double) -> do
    390:394:nidefawl.qubes.worldgen.WorldGenInit getWorldGen(nidefawl.qubes.world.WorldServer,long,nidefawl.qubes.world.WorldSettings) -> do
nidefawl.qubes.worldgen.terrain.main.TerrainGeneratorMain -> JiIjllJiIjllIjIj:
    nidefawl.qubes.world.WorldServer world -> do
    long seed -> do
    nidefawl.qubes.world.biomes.HexBiomesServer biomes -> do
    nidefawl.qubes.noise.opennoise.OpenSimplexNoise j -> do
    nidefawl.qubes.noise.opennoise.OpenSimplexNoise j2 -> if
    nidefawl.qubes.noise.opennoise.OpenSimplexNoise j4 -> for
    nidefawl.qubes.noise.opennoise.OpenSimplexNoise j5 -> int
    nidefawl.qubes.noise.opennoise.OpenSimplexNoise j6 -> new
    nidefawl.qubes.noise.opennoise.OpenSimplexNoise j7 -> try
    nidefawl.qubes.worldgen.terrain.main.SubTerrainGen[] gens -> do
    76:96:nidefawl.qubes.chunk.Chunk generateChunk(int,int) -> do
    99:123:nidefawl.qubes.worldgen.terrain.main.SubTerrainGen getTerrainGenInstance(nidefawl.qubes.world.biomes.HexBiome) -> do
    127:344:void generateTerrain(nidefawl.qubes.chunk.Chunk,short[],byte[],nidefawl.qubes.world.biomes.HexBiome[],java.util.ArrayList) -> do
    347:360:double func2(double,double,double) -> do
    364:369:double mix(double,double,double) -> if
    373:373:double clamp10(double) -> do
    394:398:nidefawl.qubes.worldgen.WorldGenInit getWorldGen(nidefawl.qubes.world.WorldServer,long,nidefawl.qubes.world.WorldSettings) -> do
nidefawl.qubes.worldgen.terrain.main.TerrainGeneratorTest2 -> lliJjI1L1LL1iJjI:
    nidefawl.qubes.world.WorldServer world -> do
    long seed -> do
    nidefawl.qubes.noise.opennoise.OpenSimplexNoise j -> do
    nidefawl.qubes.noise.opennoise.OpenSimplexNoise j2 -> if
    nidefawl.qubes.noise.opennoise.OpenSimplexNoise j4 -> for
    nidefawl.qubes.noise.opennoise.OpenSimplexNoise j5 -> int
    nidefawl.qubes.noise.opennoise.OpenSimplexNoise j6 -> new
    nidefawl.qubes.noise.opennoise.OpenSimplexNoise j7 -> try
    nidefawl.qubes.noise.TerrainNoiseScale noise3 -> do
    nidefawl.qubes.noise.TerrainNoiseScale noise -> if
    nidefawl.qubes.noise.TerrainNoise2D noiseM2 -> do
    nidefawl.qubes.noise.TerrainNoiseScale noise2 -> for
    nidefawl.qubes.noise.TerrainNoise2D noise2D -> if
    nidefawl.qubes.noise.RiverNoise2D r2D -> do
    nidefawl.qubes.noise.RiverNoise2D r2D2 -> if
    nidefawl.qubes.noise.TerrainNoiseScale noise5 -> int
    104:110:nidefawl.qubes.chunk.Chunk generateChunk(int,int) -> do
    124:413:void generateTerrain(nidefawl.qubes.chunk.Chunk,short[],byte[]) -> do
    419:432:double func2(double,double,double) -> do
    436:441:double mix(double,double,double) -> if
    445:445:double clamp10(double) -> do
    467:471:nidefawl.qubes.worldgen.WorldGenInit getWorldGen(nidefawl.qubes.world.WorldServer,long,nidefawl.qubes.world.WorldSettings) -> do
nidefawl.qubes.worldgen.terrain.main.TerrainGeneratorTest2$NoiseData -> L1iJIjll1L1L1L:
    nidefawl.qubes.noise.RiverNoise2D$RiverNoiseResult r2Dn -> do
    nidefawl.qubes.noise.RiverNoise2D$RiverNoiseResult r2Dn2 -> if
    double[] dNoise2_ -> do
    double[] dnoise5_ -> if
    double[] dnoise_ -> for
    double[] dnoise3_ -> int
nidefawl.swing.TextDialog -> iJ1LL1jIL1L11LL1:
    javax.swing.JPanel topPanel -> do
    nidefawl.swing.TextDialog$JTextAreaWithScroll errorText -> do
    javax.swing.JLabel errorOccured -> do
    boolean reqRestart -> do
    java.lang.Throwable throwable -> do
    javax.swing.AbstractButton shaderBtn -> do
    nidefawl.qubes.shader.ShaderSource shader -> do
    java.lang.String flip -> do
    115:129:void setVisible(int,int) -> do
    136:139:void appendLine(java.lang.String) -> do
    141:144:void prepend(java.lang.String) -> if
    148:175:void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    179:179:void lostOwnership(java.awt.datatransfer.Clipboard,java.awt.datatransfer.Transferable) -> lostOwnership
nidefawl.swing.TextDialog$JTextAreaWithScroll -> llIjJiIj1LiJJiIj:
    javax.swing.JScrollPane scrollPane -> do
    nidefawl.swing.TextDialog this$0 -> do
    36:36:javax.swing.JScrollPane getScrollPane() -> do
test.game.CameraController -> test.game.CameraController:
    nidefawl.qubes.vec.Vec3D pos -> pos
    nidefawl.qubes.vec.Vec3D lastPos -> lastPos
    nidefawl.qubes.vec.Vec3D mot -> mot
    nidefawl.qubes.vec.Vec3D lastMot -> lastMot
    float yaw -> yaw
    float lastYaw -> lastYaw
    float pitch -> pitch
    float lastPitch -> lastPitch
    float forward -> forward
    float strafe -> strafe
    float maxSpeed -> maxSpeed
    float jump -> jump
    boolean sneak -> sneak
    32:49:void update(nidefawl.qubes.input.KeybindManager) -> update
    51:105:void tickUpdate() -> tickUpdate
    108:112:void set(float,float,float,float,float) -> set
test.game.EmptyGame -> test.game.EmptyGame:
    14:15:void main(java.lang.String[]) -> main
    20:21:void onStatsUpdated() -> onStatsUpdated
    27:27:void onTextInput(long,int) -> onTextInput
    33:33:void onKeyPress(long,int,int,int,int) -> onKeyPress
    39:39:void render(float) -> render
    45:45:void preRenderUpdate(float) -> preRenderUpdate
    51:51:void postRenderUpdate(float) -> postRenderUpdate
    57:57:void setRenderResolution(int,int) -> setRenderResolution
    63:63:void tick() -> tick
    68:69:void initGame() -> initGame
    75:75:void lateInitGame() -> lateInitGame
    85:85:void onWheelScroll(long,double,double) -> onWheelScroll
test.game.FrameBufferChainTest -> test.game.FrameBufferChainTest:
    nidefawl.qubes.util.SimpleResourceManager resMgr -> resMgr
    int NUM_FRAMEBUFFERS -> NUM_FRAMEBUFFERS
    int ticks -> ticks
    nidefawl.qubes.shader.Shader shader -> shader
    nidefawl.qubes.shader.Shader shader2 -> shader2
    nidefawl.qubes.gl.FrameBuffer[] buffers -> buffers
    25:28:void main(java.lang.String[]) -> main
    39:52:void onStatsUpdated() -> onStatsUpdated
    61:76:void reloadShaders() -> reloadShaders
    82:82:void onTextInput(long,int) -> onTextInput
    88:88:void onKeyPress(long,int,int,int,int) -> onKeyPress
    92:120:void render(float) -> render
    124:125:void preRenderUpdate(float) -> preRenderUpdate
    131:131:void postRenderUpdate(float) -> postRenderUpdate
    135:146:void setRenderResolution(int,int) -> setRenderResolution
    152:152:void tick() -> tick
    156:161:void initGame() -> initGame
    165:165:void lateInitGame() -> lateInitGame
    175:175:void onWheelScroll(long,double,double) -> onWheelScroll
test.game.FrustumTest -> test.game.FrustumTest:
    test.game.CameraController cameraController -> cameraController
    nidefawl.qubes.gl.FrameBuffer sceneFB -> sceneFB
    int tick -> tick
    nidefawl.qubes.util.SimpleResourceManager shaders -> shaders
    nidefawl.qubes.util.SimpleResourceManager newshaders -> newshaders
    boolean startup -> startup
    nidefawl.qubes.shader.Shader modelShader -> modelShader
    int action -> action
    boolean once -> once
    nidefawl.qubes.vec.Vector3f tmp -> tmp
    nidefawl.qubes.vec.Vec3D tmpPos -> tmpPos
    boolean hadContext -> hadContext
    nidefawl.qubes.gl.VertexBuffer vertexBuf -> vertexBuf
    nidefawl.qubes.gl.GLTriBuffer buf -> buf
    34:37:void main(java.lang.String[]) -> main
    51:69:void initShaders() -> initShaders
    74:88:void onStatsUpdated() -> onStatsUpdated
    92:92:void onTextInput(long,int) -> onTextInput
    96:96:void onKeyPress(long,int,int,int,int) -> onKeyPress
    102:143:void render(float) -> render
    148:156:void preRenderUpdate(float) -> preRenderUpdate
    160:160:void postRenderUpdate(float) -> postRenderUpdate
    168:187:void setRenderResolution(int,int) -> setRenderResolution
    191:192:void tick() -> tick
    196:201:void initGame() -> initGame
    204:208:void redraw() -> redraw
    212:218:void lateInitGame() -> lateInitGame
    223:223:void onWheelScroll(long,double,double) -> onWheelScroll
test.game.GuiModelViewer -> test.game.GuiModelViewer:
    int nextID -> nextID
    nidefawl.qubes.gui.controls.Button back -> back
    java.util.List list -> list
    java.util.List listDyn -> listDyn
    test.game.GuiModelViewer$Setting testSetting -> testSetting
    test.game.ModelViewer viewer -> viewer
    nidefawl.qubes.gui.controls.CheckBox checkBoxRenderMode -> checkBoxRenderMode
    nidefawl.qubes.gui.controls.CheckBox checkboxWireframe -> checkboxWireframe
    nidefawl.qubes.gui.controls.CheckBox checkboxNormals -> checkboxNormals
    nidefawl.qubes.gui.controls.CheckBox checkboxBones -> checkboxBones
    131:146:void setModel(nidefawl.qubes.models.EntityModel,nidefawl.qubes.models.render.QModelRender,nidefawl.qubes.models.qmodel.QModelProperties) -> setModel
    150:182:void initGui(boolean) -> initGui
    185:227:int layout() -> layout
    231:235:void render(float,double,double) -> render
    238:238:java.lang.String getTitle() -> getTitle
    242:299:boolean onGuiClicked(nidefawl.qubes.gui.AbstractUI) -> onGuiClicked
    18:18:test.game.ModelViewer access$000(test.game.GuiModelViewer) -> access$000
test.game.GuiModelViewer$1 -> test.game.GuiModelViewer$1:
    java.util.List val$l -> val$l
    test.game.GuiModelViewer this$0 -> this$0
    164:169:void callback(int) -> callback
test.game.GuiModelViewer$2 -> test.game.GuiModelViewer$2:
    test.game.GuiModelViewer$Setting val$s -> val$s
    test.game.GuiModelViewer this$0 -> this$0
    286:291:void call(nidefawl.qubes.gui.controls.ComboBox$ComboBoxList,int) -> call
test.game.GuiModelViewer$ModelActionList -> test.game.GuiModelViewer$ModelActionList:
    nidefawl.qubes.models.EntityModel entityModel -> entityModel
    int idx -> idx
    101:112:void callback(int) -> callback
test.game.GuiModelViewer$ModelSettingControl -> test.game.GuiModelViewer$ModelSettingControl:
    nidefawl.qubes.models.ModelOption option -> option
    64:69:void callback(int) -> callback
test.game.GuiModelViewer$Setting -> test.game.GuiModelViewer$Setting:
    java.lang.Object[] vals -> vals
    nidefawl.qubes.gui.controls.ComboBox box -> box
    nidefawl.qubes.gui.controls.Button button1 -> button1
    nidefawl.qubes.gui.controls.Button button2 -> button2
    int curVal -> curVal
    40:40:void callback(int) -> callback
test.game.Hex -> test.game.Hex:
    test.game.CameraController cameraController -> cameraController
    nidefawl.qubes.gl.FrameBuffer sceneFB -> sceneFB
    boolean ortho -> ortho
    int tick -> tick
    nidefawl.qubes.util.SimpleResourceManager shaders -> shaders
    nidefawl.qubes.util.SimpleResourceManager newshaders -> newshaders
    boolean startup -> startup
    double halfLen -> halfLen
    nidefawl.qubes.shader.Shader modelShader -> modelShader
    int action -> action
    boolean drag -> drag
    java.util.Stack stack -> stack
    nidefawl.qubes.vec.Vector3f tmp -> tmp
    boolean once -> once
    nidefawl.qubes.world.biomes.HexBiomesServer biomes -> biomes
    boolean update -> update
    float mapOffsetX -> mapOffsetX
    float mapOffsetZ -> mapOffsetZ
    float scale2 -> scale2
    float inOffsetX -> inOffsetX
    float inOffsetZ -> inOffsetZ
    float scaleWidth -> scaleWidth
    float scaleHeight -> scaleHeight
    float floatzpos1 -> floatzpos1
    int zPos1 -> zPos1
    int zPos -> zPos
    float rOffsetZ -> rOffsetZ
    float floatxpos1 -> floatxpos1
    int xPos1 -> xPos1
    int xPos -> xPos
    float rOffsetX -> rOffsetX
    nidefawl.qubes.vec.Vec3D tmpPos -> tmpPos
    nidefawl.qubes.vec.Vector3f hit -> hit
    float left -> left
    float top -> top
    float rWidth -> rWidth
    float rHeight -> rHeight
    boolean hadContext -> hadContext
    int tex -> tex
    double zoom -> zoom
    boolean diddrag -> diddrag
    42:45:void main(java.lang.String[]) -> main
    58:76:void initShaders() -> initShaders
    81:93:void onStatsUpdated() -> onStatsUpdated
    97:97:void onTextInput(long,int) -> onTextInput
    101:126:void onKeyPress(long,int,int,int,int) -> onKeyPress
    131:167:void onMouseClick(long,int,int,int) -> onMouseClick
    193:211:void updateOffset() -> updateOffset
    215:342:void render(float) -> render
    344:346:double mousePosX() -> mousePosX
    349:351:double mousePosY() -> mousePosY
    354:457:void render2(float) -> render2
    466:500:int getBlockColor(int,int) -> getBlockColor
    512:575:void preRenderUpdate(float) -> preRenderUpdate
    579:579:void postRenderUpdate(float) -> postRenderUpdate
    587:606:void setRenderResolution(int,int) -> setRenderResolution
    610:611:void tick() -> tick
    615:620:void initGame() -> initGame
    624:638:void lateInitGame() -> lateInitGame
    644:654:void renderQuad() -> renderQuad
    658:668:void input(float) -> input
    670:672:double mousePosX2() -> mousePosX2
    675:677:double mousePosY2() -> mousePosY2
    681:708:void onWheelScroll(long,double,double) -> onWheelScroll
test.game.ModelAdjuster -> test.game.ModelAdjuster:
    test.game.CameraController cameraController -> cameraController
    nidefawl.qubes.gl.FrameBuffer sceneFB -> sceneFB
    boolean wasGrabbed -> wasGrabbed
    test.game.ModelAdjuster instance -> instance
    int tick -> tick
    boolean startup -> startup
    boolean once -> once
    nidefawl.qubes.vec.Vec3D tmpPos -> tmpPos
    55:59:void main(java.lang.String[]) -> main
    67:76:void onStatsUpdated() -> onStatsUpdated
    84:84:void onTextInput(long,int) -> onTextInput
    88:92:void onKeyPress(long,int,int,int,int) -> onKeyPress
    96:131:void render(float) -> render
    134:160:void showGUI(nidefawl.qubes.gui.Gui) -> showGUI
    164:172:void preRenderUpdate(float) -> preRenderUpdate
    176:176:void postRenderUpdate(float) -> postRenderUpdate
    181:208:void setRenderResolution(int,int) -> setRenderResolution
    212:218:void tick() -> tick
    222:230:void initGame() -> initGame
    234:241:void lateInitGame() -> lateInitGame
    246:246:void onWheelScroll(long,double,double) -> onWheelScroll
test.game.ModelViewer -> test.game.ModelViewer:
    test.game.CameraController cameraController -> cameraController
    nidefawl.qubes.gl.FrameBuffer buf -> buf
    nidefawl.qubes.gl.FrameBuffer sceneFB -> sceneFB
    nidefawl.qubes.gl.TesselatorState tessState -> tessState
    nidefawl.qubes.shader.Shader shaderModelSingle -> shaderModelSingle
    nidefawl.qubes.shader.Shader shaderDeferred -> shaderDeferred
    int action -> action
    nidefawl.qubes.gui.Gui gui -> gui
    boolean wasGrabbed -> wasGrabbed
    test.game.ModelViewer instance -> instance
    int tick -> tick
    nidefawl.qubes.util.SimpleResourceManager shaders -> shaders
    nidefawl.qubes.util.SimpleResourceManager newshaders -> newshaders
    boolean startup -> startup
    boolean showNormals -> showNormals
    boolean showBones -> showBones
    boolean showWireframe -> showWireframe
    boolean renderBatchedMode -> renderBatchedMode
    nidefawl.qubes.models.render.QModelRender renderBatched -> renderBatched
    nidefawl.qubes.models.render.QModelRender renderSingle -> renderSingle
    nidefawl.qubes.models.render.QModelRender curRender -> curRender
    nidefawl.qubes.models.EntityModel entityModel -> entityModel
    int modelidx -> modelidx
    boolean once -> once
    nidefawl.qubes.vec.Vec3D tmpPos -> tmpPos
    boolean hadContext -> hadContext
    nidefawl.qubes.gl.FrameBuffer buf2 -> buf2
    nidefawl.qubes.models.qmodel.QModelProperties config -> config
    java.util.Stack stack -> stack
    nidefawl.qubes.vec.Vector3f tmp -> tmp
    60:66:void main(java.lang.String[]) -> main
    80:122:void initShaders() -> initShaders
    125:134:void onStatsUpdated() -> onStatsUpdated
    153:163:void reloadModel() -> reloadModel
    167:167:void onTextInput(long,int) -> onTextInput
    171:180:void onKeyPress(long,int,int,int,int) -> onKeyPress
    183:192:void setModel(int) -> setModel
    196:338:void render(float) -> render
    341:367:void showGUI(nidefawl.qubes.gui.Gui) -> showGUI
    375:446:void renderBones(nidefawl.qubes.models.qmodel.ModelRigged,nidefawl.qubes.gl.BufferedMatrix) -> renderBones
    450:464:void preRenderUpdate(float) -> preRenderUpdate
    468:468:void postRenderUpdate(float) -> postRenderUpdate
    473:538:void setRenderResolution(int,int) -> setRenderResolution
    542:548:void tick() -> tick
    552:563:void initGame() -> initGame
    567:617:void lateInitGame() -> lateInitGame
    622:622:void onWheelScroll(long,double,double) -> onWheelScroll
test.game.ModelViewer$1 -> test.game.ModelViewer$1:
    test.game.ModelViewer this$0 -> this$0
    87:90:java.lang.String getDefinition(java.lang.String) -> getDefinition
test.game.ParticlePerformanceTest -> test.game.ParticlePerformanceTest:
    int MAX_PARTICLES -> MAX_PARTICLES
    nidefawl.qubes.shader.ShaderBuffer ssbo_particle_cubes -> ssbo_particle_cubes
    nidefawl.qubes.shader.ShaderBuffer ssbo_particle_cubes_blockinfo -> ssbo_particle_cubes_blockinfo
    nidefawl.qubes.shader.ShaderBuffer ssbo_particle_structs -> ssbo_particle_structs
    nidefawl.qubes.shader.ShaderBuffer ssbo_particle_arrays -> ssbo_particle_arrays
    int MAX_SPRITES -> MAX_SPRITES
    nidefawl.qubes.util.SimpleResourceManager newshaders -> newshaders
    nidefawl.qubes.util.SimpleResourceManager shaders -> shaders
    boolean startup -> startup
    nidefawl.qubes.vec.Vector3f tmp -> tmp
    nidefawl.qubes.font.FontRenderer font -> font
    test.game.CameraController cameraController -> cameraController
    nidefawl.qubes.gl.FrameBuffer fbDeferred -> fbDeferred
    nidefawl.qubes.gl.FrameBuffer sceneFB -> sceneFB
    nidefawl.qubes.gl.GLTriBuffer cubeFormat1 -> cubeFormat1
    nidefawl.qubes.gl.GLTriBuffer cubeFormat2 -> cubeFormat2
    nidefawl.qubes.shader.Shader shaderDeferred -> shaderDeferred
    nidefawl.qubes.shader.Shader skybox -> skybox
    nidefawl.qubes.shader.Shader particleShaderStruct -> particleShaderStruct
    nidefawl.qubes.shader.Shader particleShaderSeperateBuffer -> particleShaderSeperateBuffer
    nidefawl.qubes.shader.Shader particleShaderArrays -> particleShaderArrays
    nidefawl.qubes.gl.TesselatorState tessState -> tessState
    boolean once -> once
    boolean hadContext -> hadContext
    int fireUpdate -> fireUpdate
    float lastUpdate -> lastUpdate
    boolean pause -> pause
    float pauseTime -> pauseTime
    int totalSpritesRendered -> totalSpritesRendered
    int storedSprites -> storedSprites
    int tick -> tick
    int renderMode -> renderMode
    int selFormat -> selFormat
    int selShader -> selShader
    java.lang.String error -> error
    java.lang.String stats -> stats
    int maxSprites -> maxSprites
    java.util.List particles -> particles
    java.util.Random r -> r
    nidefawl.qubes.vec.Vec3D tmpPos -> tmpPos
    boolean init -> init
    float SPEED -> SPEED
    boolean draw -> draw
    218:221:void main(java.lang.String[]) -> main
    272:282:void initGame() -> initGame
    286:386:void initShaders() -> initShaders
    390:490:void lateInitGame() -> lateInitGame
    493:587:void onKeyPress(long,int,int,int,int) -> onKeyPress
    590:593:void onWindowResize(int,int) -> onWindowResize
    596:620:void setRenderResolution(int,int) -> setRenderResolution
    623:637:void onStatsUpdated() -> onStatsUpdated
    640:640:void onTextInput(long,int) -> onTextInput
    644:644:void onWheelScroll(long,double,double) -> onWheelScroll
    647:647:void postRenderUpdate(float) -> postRenderUpdate
    651:669:void preRenderUpdate(float) -> preRenderUpdate
    672:677:void preRenderUpdateParticles(float) -> preRenderUpdateParticles
    679:687:void redraw() -> redraw
    693:794:void render(float) -> render
    796:827:void renderParticles(float) -> renderParticles
    830:864:void spawnParticles(int) -> spawnParticles
    867:908:void storeParticles(float,int) -> storeParticles
    912:928:void tick() -> tick
    931:938:void updateTickParticles() -> updateTickParticles
    36:36:float access$000() -> access$000
test.game.ParticlePerformanceTest$1 -> test.game.ParticlePerformanceTest$1:
    test.game.ParticlePerformanceTest this$0 -> this$0
    290:299:java.lang.String getDefinition(java.lang.String) -> getDefinition
test.game.ParticlePerformanceTest$2 -> test.game.ParticlePerformanceTest$2:
    test.game.ParticlePerformanceTest this$0 -> this$0
    305:314:java.lang.String getDefinition(java.lang.String) -> getDefinition
test.game.ParticlePerformanceTest$3 -> test.game.ParticlePerformanceTest$3:
    test.game.ParticlePerformanceTest this$0 -> this$0
    320:329:java.lang.String getDefinition(java.lang.String) -> getDefinition
test.game.ParticlePerformanceTest$4 -> test.game.ParticlePerformanceTest$4:
    test.game.ParticlePerformanceTest this$0 -> this$0
    335:338:java.lang.String getDefinition(java.lang.String) -> getDefinition
test.game.ParticlePerformanceTest$5 -> test.game.ParticlePerformanceTest$5:
    nidefawl.qubes.texture.array.TextureArray val$arr -> val$arr
    test.game.ParticlePerformanceTest this$0 -> this$0
    408:412:void pre() -> pre
    415:416:void post() -> post
    420:424:java.lang.Void call() -> call
    428:428:nidefawl.qubes.async.AsyncTask$TaskType getType() -> getType
    404:404:java.lang.Object call() -> call
test.game.ParticlePerformanceTest$Particle -> test.game.ParticlePerformanceTest$Particle:
    boolean dead -> dead
    int maxLive -> maxLive
    nidefawl.qubes.vec.Vector3f mot -> mot
    nidefawl.qubes.vec.Vector3f lastMot -> lastMot
    nidefawl.qubes.vec.Vector3f pos -> pos
    nidefawl.qubes.vec.Vector3f lastPos -> lastPos
    nidefawl.qubes.vec.Vector3f renderPos -> renderPos
    nidefawl.qubes.vec.Vector3f renderRot -> renderRot
    nidefawl.qubes.vec.Vector3f rot -> rot
    nidefawl.qubes.vec.Vector3f lastRot -> lastRot
    nidefawl.qubes.vec.Vector3f rotspeed -> rotspeed
    nidefawl.qubes.vec.Vector2f texOffset -> texOffset
    float size -> size
    float initSize -> initSize
    float lastSize -> lastSize
    float renderSize -> renderSize
    int tick -> tick
    int tex -> tex
    int normalMap -> normalMap
    int type -> type
    int pass -> pass
    79:80:void setTex(int) -> setTex
    82:83:void setType(int) -> setType
    86:87:void die() -> die
    90:92:void setMotion(float,float,float) -> setMotion
    95:97:void setPos(float,float,float) -> setPos
    100:102:void setRot(float,float,float) -> setRot
    105:106:void setRotSpeed(float,float,float) -> setRotSpeed
    109:110:void setSize(float) -> setSize
    114:127:int store(int,java.nio.FloatBuffer,java.nio.IntBuffer) -> store
    131:150:int storeInterlacedStruct(int,nidefawl.qubes.shader.ShaderBuffer) -> storeInterlacedStruct
    153:171:int storeArrays(int,nidefawl.qubes.shader.ShaderBuffer) -> storeArrays
    175:191:void tick() -> tick
    194:198:void update(float) -> update
    201:202:void setTextureOffset(float,float) -> setTextureOffset
test.game.ParticleTest -> test.game.ParticleTest:
    int MAX_PARTICLES -> MAX_PARTICLES
    nidefawl.qubes.shader.ShaderBuffer ssbo_particle_cubes -> ssbo_particle_cubes
    nidefawl.qubes.shader.ShaderBuffer ssbo_particle_cubes_blockinfo -> ssbo_particle_cubes_blockinfo
    int MAX_SPRITES -> MAX_SPRITES
    nidefawl.qubes.util.SimpleResourceManager newshaders -> newshaders
    nidefawl.qubes.util.SimpleResourceManager shaders -> shaders
    boolean startup -> startup
    nidefawl.qubes.vec.Vector3f tmp -> tmp
    nidefawl.qubes.font.FontRenderer font -> font
    test.game.CameraController cameraController -> cameraController
    nidefawl.qubes.gl.FrameBuffer fbDeferred -> fbDeferred
    nidefawl.qubes.gl.FrameBuffer sceneFB -> sceneFB
    nidefawl.qubes.gl.GLTriBuffer cubeFormat1 -> cubeFormat1
    nidefawl.qubes.gl.GLTriBuffer cubeFormat2 -> cubeFormat2
    nidefawl.qubes.shader.Shader shaderDeferred -> shaderDeferred
    nidefawl.qubes.shader.Shader skybox -> skybox
    nidefawl.qubes.shader.Shader spriteShader -> spriteShader
    nidefawl.qubes.gl.TesselatorState tessState -> tessState
    int texNoise -> texNoise
    boolean once -> once
    boolean hadContext -> hadContext
    int fireUpdate -> fireUpdate
    float lastUpdate -> lastUpdate
    boolean pause -> pause
    float pauseTime -> pauseTime
    int totalSpritesRendered -> totalSpritesRendered
    int storedSprites -> storedSprites
    int tick -> tick
    int renderMode -> renderMode
    int selFormat -> selFormat
    java.lang.String error -> error
    java.lang.String stats -> stats
    int maxSprites -> maxSprites
    java.util.List particles -> particles
    java.util.Random r -> r
    nidefawl.qubes.vec.Vec3D tmpPos -> tmpPos
    140:143:void main(java.lang.String[]) -> main
    189:194:void initGame() -> initGame
    198:242:void initShaders() -> initShaders
    247:296:void lateInitGame() -> lateInitGame
    299:376:void onKeyPress(long,int,int,int,int) -> onKeyPress
    379:401:void setRenderResolution(int,int) -> setRenderResolution
    404:417:void onStatsUpdated() -> onStatsUpdated
    420:420:void onTextInput(long,int) -> onTextInput
    424:424:void onWheelScroll(long,double,double) -> onWheelScroll
    427:427:void postRenderUpdate(float) -> postRenderUpdate
    431:448:void preRenderUpdate(float) -> preRenderUpdate
    451:456:void preRenderUpdateParticles(float) -> preRenderUpdateParticles
    458:466:void redraw() -> redraw
    470:534:void render(float) -> render
    536:561:void renderParticles(float) -> renderParticles
    564:582:void spawnParticles(int) -> spawnParticles
    585:598:void storeParticles(float,int) -> storeParticles
    602:613:void tick() -> tick
    616:623:void updateTickParticles() -> updateTickParticles
test.game.ParticleTest$1 -> test.game.ParticleTest$1:
    test.game.ParticleTest this$0 -> this$0
    203:206:java.lang.String getDefinition(java.lang.String) -> getDefinition
test.game.ParticleTest$Particle -> test.game.ParticleTest$Particle:
    boolean dead -> dead
    int maxLive -> maxLive
    nidefawl.qubes.vec.Vector3f mot -> mot
    nidefawl.qubes.vec.Vector3f lastMot -> lastMot
    nidefawl.qubes.vec.Vector3f pos -> pos
    nidefawl.qubes.vec.Vector3f lastPos -> lastPos
    nidefawl.qubes.vec.Vector3f renderPos -> renderPos
    nidefawl.qubes.vec.Vector3f renderRot -> renderRot
    nidefawl.qubes.vec.Vector3f rot -> rot
    nidefawl.qubes.vec.Vector3f lastRot -> lastRot
    nidefawl.qubes.vec.Vector3f rotspeed -> rotspeed
    float size -> size
    float initSize -> initSize
    float lastSize -> lastSize
    float renderSize -> renderSize
    int texture -> texture
    int tick -> tick
    64:65:void die() -> die
    68:70:void setMotion(float,float,float) -> setMotion
    73:75:void setPos(float,float,float) -> setPos
    78:80:void setRot(float,float,float) -> setRot
    83:84:void setRotSpeed(float,float,float) -> setRotSpeed
    87:88:void setSize(float) -> setSize
    92:100:int store(java.nio.FloatBuffer) -> store
    104:120:void tick() -> tick
    123:127:void update(float) -> update
test.game.ParticleTextured -> test.game.ParticleTextured:
    int MAX_PARTICLES -> MAX_PARTICLES
    nidefawl.qubes.shader.ShaderBuffer ssbo_particle_cubes -> ssbo_particle_cubes
    nidefawl.qubes.shader.ShaderBuffer ssbo_particle_cubes_blockinfo -> ssbo_particle_cubes_blockinfo
    nidefawl.qubes.util.SimpleResourceManager newshaders -> newshaders
    nidefawl.qubes.util.SimpleResourceManager shaders -> shaders
    boolean startup -> startup
    nidefawl.qubes.vec.Vector3f tmp -> tmp
    nidefawl.qubes.font.FontRenderer font -> font
    test.game.CameraController cameraController -> cameraController
    nidefawl.qubes.gl.FrameBuffer fbDeferred -> fbDeferred
    nidefawl.qubes.gl.FrameBuffer sceneFB -> sceneFB
    nidefawl.qubes.gl.GLTriBuffer cubeFormat1 -> cubeFormat1
    nidefawl.qubes.gl.GLTriBuffer cubeFormat2 -> cubeFormat2
    nidefawl.qubes.shader.Shader shaderDeferred -> shaderDeferred
    nidefawl.qubes.shader.Shader skybox -> skybox
    nidefawl.qubes.shader.Shader particleShaderSeperateBuffer -> particleShaderSeperateBuffer
    nidefawl.qubes.gl.TesselatorState tessState -> tessState
    boolean once -> once
    boolean hadContext -> hadContext
    int fireUpdate -> fireUpdate
    float lastUpdate -> lastUpdate
    boolean pause -> pause
    float pauseTime -> pauseTime
    int totalSpritesRendered -> totalSpritesRendered
    int storedSprites -> storedSprites
    int tick -> tick
    int renderMode -> renderMode
    int selFormat -> selFormat
    java.lang.String error -> error
    java.lang.String stats -> stats
    int maxSprites -> maxSprites
    java.util.List particles -> particles
    java.util.Random r -> r
    nidefawl.qubes.vec.Vec3D tmpPos -> tmpPos
    boolean init -> init
    166:169:void main(java.lang.String[]) -> main
    215:225:void initGame() -> initGame
    229:281:void initShaders() -> initShaders
    285:384:void lateInitGame() -> lateInitGame
    387:464:void onKeyPress(long,int,int,int,int) -> onKeyPress
    467:489:void setRenderResolution(int,int) -> setRenderResolution
    492:505:void onStatsUpdated() -> onStatsUpdated
    508:508:void onTextInput(long,int) -> onTextInput
    512:512:void onWheelScroll(long,double,double) -> onWheelScroll
    515:515:void postRenderUpdate(float) -> postRenderUpdate
    519:536:void preRenderUpdate(float) -> preRenderUpdate
    539:544:void preRenderUpdateParticles(float) -> preRenderUpdateParticles
    546:554:void redraw() -> redraw
    558:622:void render(float) -> render
    624:649:void renderParticles(float) -> renderParticles
    652:678:void spawnParticles(int) -> spawnParticles
    681:701:void storeParticles(float,int) -> storeParticles
    705:721:void tick() -> tick
    724:731:void updateTickParticles() -> updateTickParticles
test.game.ParticleTextured$1 -> test.game.ParticleTextured$1:
    test.game.ParticleTextured this$0 -> this$0
    234:234:java.lang.String getDefinition(java.lang.String) -> getDefinition
test.game.ParticleTextured$2 -> test.game.ParticleTextured$2:
    test.game.ParticleTextured this$0 -> this$0
    240:243:java.lang.String getDefinition(java.lang.String) -> getDefinition
test.game.ParticleTextured$3 -> test.game.ParticleTextured$3:
    nidefawl.qubes.texture.array.TextureArray val$arr -> val$arr
    test.game.ParticleTextured this$0 -> this$0
    303:307:void pre() -> pre
    310:311:void post() -> post
    315:319:java.lang.Void call() -> call
    323:323:nidefawl.qubes.async.AsyncTask$TaskType getType() -> getType
    299:299:java.lang.Object call() -> call
test.game.ParticleTextured$Particle -> test.game.ParticleTextured$Particle:
    boolean dead -> dead
    int maxLive -> maxLive
    nidefawl.qubes.vec.Vector3f mot -> mot
    nidefawl.qubes.vec.Vector3f lastMot -> lastMot
    nidefawl.qubes.vec.Vector3f pos -> pos
    nidefawl.qubes.vec.Vector3f lastPos -> lastPos
    nidefawl.qubes.vec.Vector3f renderPos -> renderPos
    nidefawl.qubes.vec.Vector3f renderRot -> renderRot
    nidefawl.qubes.vec.Vector3f rot -> rot
    nidefawl.qubes.vec.Vector3f lastRot -> lastRot
    nidefawl.qubes.vec.Vector3f rotspeed -> rotspeed
    nidefawl.qubes.vec.Vector2f texOffset -> texOffset
    float size -> size
    float initSize -> initSize
    float lastSize -> lastSize
    float renderSize -> renderSize
    int tick -> tick
    int tex -> tex
    int normalMap -> normalMap
    int type -> type
    int pass -> pass
    74:75:void setTex(int) -> setTex
    77:78:void setType(int) -> setType
    81:82:void die() -> die
    85:87:void setMotion(float,float,float) -> setMotion
    90:92:void setPos(float,float,float) -> setPos
    95:97:void setRot(float,float,float) -> setRot
    100:101:void setRotSpeed(float,float,float) -> setRotSpeed
    104:105:void setSize(float) -> setSize
    109:122:int store(int,java.nio.FloatBuffer,java.nio.IntBuffer) -> store
    127:143:void tick() -> tick
    146:150:void update(float) -> update
    153:154:void setTextureOffset(float,float) -> setTextureOffset
test.game.SkyboxSpriteTest -> test.game.SkyboxSpriteTest:
    int MAX_SPRITES -> MAX_SPRITES
    int SKYBOX_RES -> SKYBOX_RES
    test.game.CameraController cameraController -> cameraController
    nidefawl.qubes.gl.FrameBuffer sceneFB -> sceneFB
    nidefawl.qubes.gl.FrameBuffer fbDeferred -> fbDeferred
    nidefawl.qubes.gl.FrameBuffer fbSkybox -> fbSkybox
    int tick -> tick
    nidefawl.qubes.util.SimpleResourceManager shaders -> shaders
    nidefawl.qubes.util.SimpleResourceManager newshaders -> newshaders
    boolean startup -> startup
    nidefawl.qubes.gl.GLVBO vboAttr -> vboAttr
    nidefawl.qubes.gl.GLVBO vboStaticQuad -> vboStaticQuad
    nidefawl.qubes.gl.GLVBO vboIdx -> vboIdx
    nidefawl.qubes.shader.Shader spriteShader -> spriteShader
    nidefawl.qubes.shader.Shader shaderDeferred -> shaderDeferred
    nidefawl.qubes.shader.Shader skyShader -> skyShader
    nidefawl.qubes.shader.Shader cloudsShader -> cloudsShader
    nidefawl.qubes.shader.Shader skybox -> skybox
    nidefawl.qubes.gl.TesselatorState skybox1 -> skybox1
    nidefawl.qubes.gl.TesselatorState skybox2 -> skybox2
    nidefawl.qubes.vec.Vector3f skyColor -> skyColor
    nidefawl.qubes.vec.Vector3f fogColor -> fogColor
    java.lang.String error -> error
    nidefawl.qubes.gl.CubeMapCamera cubeMatrix -> cubeMatrix
    int action -> action
    java.lang.String stats -> stats
    boolean once -> once
    nidefawl.qubes.vec.Vector3f tmp -> tmp
    nidefawl.qubes.vec.Vec3D tmpPos -> tmpPos
    float curWeather -> curWeather
    float lastWeather -> lastWeather
    boolean hadContext -> hadContext
    nidefawl.qubes.gl.VertexBuffer vertexBuf -> vertexBuf
    nidefawl.qubes.meshing.BlockFaceAttr attr -> attr
    int vaoPos -> vaoPos
    java.util.List clouds -> clouds
    java.nio.ByteBuffer bufMat -> bufMat
    java.nio.FloatBuffer bufMatFloat -> bufMatFloat
    nidefawl.qubes.gl.ReallocIntBuffer vertexUploadDirectBuf -> vertexUploadDirectBuf
    nidefawl.qubes.font.FontRenderer font -> font
    int storedSprites -> storedSprites
    int totalSpritesRendered -> totalSpritesRendered
    int[] texClouds -> texClouds
    int texNoise -> texNoise
    float WEATHER -> WEATHER
    int TIME -> TIME
    43:46:void main(java.lang.String[]) -> main
    77:128:void initShaders() -> initShaders
    142:165:void onStatsUpdated() -> onStatsUpdated
    169:169:void onTextInput(long,int) -> onTextInput
    173:203:void onKeyPress(long,int,int,int,int) -> onKeyPress
    210:283:void render(float) -> render
    286:318:void renderSky(float) -> renderSky
    326:340:void preRenderUpdate(float) -> preRenderUpdate
    344:344:void postRenderUpdate(float) -> postRenderUpdate
    351:378:void setRenderResolution(int,int) -> setRenderResolution
    382:389:void tick() -> tick
    393:399:void initGame() -> initGame
    412:417:void updateSprites(float) -> updateSprites
    419:431:void storeSprites(float,int) -> storeSprites
    435:439:void updateSpritesTick() -> updateSpritesTick
    441:523:void redraw() -> redraw
    525:529:void buildQuad(nidefawl.qubes.gl.VertexBuffer) -> buildQuad
    633:693:void lateInitGame() -> lateInitGame
    698:698:void onWheelScroll(long,double,double) -> onWheelScroll
test.game.SkyboxSpriteTest$1 -> test.game.SkyboxSpriteTest$1:
    test.game.SkyboxSpriteTest this$0 -> this$0
    85:88:java.lang.String getDefinition(java.lang.String) -> getDefinition
test.game.SkyboxSpriteTest$Cloud -> test.game.SkyboxSpriteTest$Cloud:
    int texture -> texture
    java.util.List sprites -> sprites
    nidefawl.qubes.vec.Vector3f mot -> mot
    nidefawl.qubes.vec.Vector3f pos -> pos
    nidefawl.qubes.vec.Vector3f lastPos -> lastPos
    nidefawl.qubes.vec.Vector3f renderPos -> renderPos
    544:552:int store(java.nio.FloatBuffer) -> store
    555:560:void update(float) -> update
    563:568:void tick() -> tick
test.game.SkyboxSpriteTest$PointSprite -> test.game.SkyboxSpriteTest$PointSprite:
    float size -> size
    float initSize -> initSize
    float lastSize -> lastSize
    float renderSize -> renderSize
    float rotspeed -> rotspeed
    float rot -> rot
    float lastRot -> lastRot
    float renderRot -> renderRot
    float xoffset -> xoffset
    float yoffset -> yoffset
    nidefawl.qubes.vec.Vector3f posOffset -> posOffset
    nidefawl.qubes.vec.Vector3f col -> col
    nidefawl.qubes.vec.Vector3f lastCol -> lastCol
    nidefawl.qubes.vec.Vector3f initCol -> initCol
    nidefawl.qubes.vec.Vector3f renderCol -> renderCol
    nidefawl.qubes.vec.Vector3f renderPos -> renderPos
    int tick -> tick
    589:590:void setSize(float) -> setSize
    592:596:void setCol(float,float,float) -> setCol
    598:613:void update(float) -> update
    616:627:void tick() -> tick
    570:570:nidefawl.qubes.vec.Vector3f access$000(test.game.SkyboxSpriteTest$PointSprite) -> access$000
test.game.SkyboxTest -> test.game.SkyboxTest:
    int MAX_SPRITES -> MAX_SPRITES
    test.game.CameraController cameraController -> cameraController
    nidefawl.qubes.gl.FrameBuffer sceneFB -> sceneFB
    nidefawl.qubes.gl.FrameBuffer fbDeferred -> fbDeferred
    int tick -> tick
    nidefawl.qubes.util.SimpleResourceManager shaders -> shaders
    nidefawl.qubes.util.SimpleResourceManager newshaders -> newshaders
    boolean startup -> startup
    nidefawl.qubes.gl.GLVBO vboMat -> vboMat
    nidefawl.qubes.gl.GLVBO vboQuad -> vboQuad
    nidefawl.qubes.gl.GLVBO vboIdx -> vboIdx
    nidefawl.qubes.shader.Shader spriteShader -> spriteShader
    nidefawl.qubes.shader.Shader shaderDeferred -> shaderDeferred
    nidefawl.qubes.shader.Shader skyShader -> skyShader
    nidefawl.qubes.shader.Shader cloudsShader -> cloudsShader
    nidefawl.qubes.gl.TesselatorState skybox1 -> skybox1
    nidefawl.qubes.gl.TesselatorState skybox2 -> skybox2
    nidefawl.qubes.vec.Vector3f skyColor -> skyColor
    nidefawl.qubes.vec.Vector3f fogColor -> fogColor
    java.lang.String error -> error
    int action -> action
    java.lang.String stats -> stats
    boolean once -> once
    nidefawl.qubes.vec.Vector3f tmp -> tmp
    nidefawl.qubes.vec.Vec3D tmpPos -> tmpPos
    boolean hadContext -> hadContext
    nidefawl.qubes.gl.VertexBuffer vertexBuf -> vertexBuf
    nidefawl.qubes.meshing.BlockFaceAttr attr -> attr
    int vaoPos -> vaoPos
    java.util.List clouds -> clouds
    java.nio.ByteBuffer bufMat -> bufMat
    java.nio.FloatBuffer bufMatFloat -> bufMatFloat
    nidefawl.qubes.gl.ReallocIntBuffer vertexUploadDirectBuf -> vertexUploadDirectBuf
    int texCloud -> texCloud
    nidefawl.qubes.font.FontRenderer font -> font
    int totalSprites -> totalSprites
    int image -> image
    39:44:void main(java.lang.String[]) -> main
    70:119:void initShaders() -> initShaders
    124:152:void onStatsUpdated() -> onStatsUpdated
    156:156:void onTextInput(long,int) -> onTextInput
    160:170:void onKeyPress(long,int,int,int,int) -> onKeyPress
    176:264:void render(float) -> render
    269:282:void preRenderUpdate(float) -> preRenderUpdate
    286:286:void postRenderUpdate(float) -> postRenderUpdate
    293:314:void setRenderResolution(int,int) -> setRenderResolution
    318:320:void tick() -> tick
    324:329:void initGame() -> initGame
    343:353:void updateSprites(float) -> updateSprites
    355:359:void updateSpritesTick() -> updateSpritesTick
    361:443:void redraw() -> redraw
    445:449:void buildQuad(nidefawl.qubes.gl.VertexBuffer) -> buildQuad
    526:579:void lateInitGame() -> lateInitGame
    584:584:void onWheelScroll(long,double,double) -> onWheelScroll
test.game.SkyboxTest$1 -> test.game.SkyboxTest$1:
    test.game.SkyboxTest this$0 -> this$0
    77:80:java.lang.String getDefinition(java.lang.String) -> getDefinition
test.game.SkyboxTest$Cloud -> test.game.SkyboxTest$Cloud:
    java.util.List sprites -> sprites
    nidefawl.qubes.vec.Vector3f mot -> mot
    nidefawl.qubes.vec.Vector3f pos -> pos
    nidefawl.qubes.vec.Vector3f lastPos -> lastPos
    nidefawl.qubes.vec.Vector3f renderPos -> renderPos
    462:470:int store(java.nio.FloatBuffer) -> store
    473:478:void update(float) -> update
    480:485:void tick() -> tick
test.game.SkyboxTest$PointSprite -> test.game.SkyboxTest$PointSprite:
    float size -> size
    float rotspeed -> rotspeed
    float rot -> rot
    float lastRot -> lastRot
    float renderRot -> renderRot
    float xoffset -> xoffset
    float yoffset -> yoffset
    nidefawl.qubes.vec.Vector3f posOffset -> posOffset
    nidefawl.qubes.vec.Vector3f col -> col
    nidefawl.qubes.vec.Vector3f renderPos -> renderPos
    int tick -> tick
    503:516:void update(float) -> update
    518:521:void tick() -> tick
    487:487:nidefawl.qubes.vec.Vector3f access$000(test.game.SkyboxTest$PointSprite) -> access$000
test.game.TestBlending -> test.game.TestBlending:
    25:28:void main(java.lang.String[]) -> main
    33:34:void onStatsUpdated() -> onStatsUpdated
    40:40:void onTextInput(long,int) -> onTextInput
    46:46:void onKeyPress(long,int,int,int,int) -> onKeyPress
    52:52:void render(float) -> render
    58:58:void input(float) -> input
    62:63:void preRenderUpdate(float) -> preRenderUpdate
    69:69:void postRenderUpdate(float) -> postRenderUpdate
    73:76:void setRenderResolution(int,int) -> setRenderResolution
    82:82:void tick() -> tick
    86:90:void initGame() -> initGame
    94:114:void lateInitGame() -> lateInitGame
    124:124:void onWheelScroll(long,double,double) -> onWheelScroll
test.game.TestEarlyZDiscard -> test.game.TestEarlyZDiscard:
    test.game.CameraController cameraController -> cameraController
    int image -> image
    nidefawl.qubes.render.post.SMAA smaa -> smaa
    nidefawl.qubes.gl.FrameBuffer fb -> fb
    nidefawl.qubes.gl.FrameBuffer fb2 -> fb2
    int a -> a
    nidefawl.qubes.vec.Vec3D tmpPos -> tmpPos
    nidefawl.qubes.shader.Shader shaderHeavy -> shaderHeavy
    nidefawl.qubes.shader.Shader shaderTexture -> shaderTexture
    31:34:void main(java.lang.String[]) -> main
    44:52:void onStatsUpdated() -> onStatsUpdated
    56:56:void onTextInput(long,int) -> onTextInput
    60:60:void onKeyPress(long,int,int,int,int) -> onKeyPress
    64:89:void render(float) -> render
    96:105:void preRenderUpdate(float) -> preRenderUpdate
    109:109:void postRenderUpdate(float) -> postRenderUpdate
    113:140:void setRenderResolution(int,int) -> setRenderResolution
    147:175:void loadShader() -> loadShader
    179:180:void tick() -> tick
    184:192:void initGame() -> initGame
    196:199:void lateInitGame() -> lateInitGame
    204:204:void onWheelScroll(long,double,double) -> onWheelScroll
test.game.TestEarlyZDiscard$1 -> test.game.TestEarlyZDiscard$1:
    test.game.TestEarlyZDiscard this$0 -> this$0
    163:165:java.lang.String getDefinition(java.lang.String) -> getDefinition
test.game.TestFontRenderer -> test.game.TestFontRenderer:
    test.game.CameraController cameraController -> cameraController
    int image -> image
    nidefawl.qubes.render.post.SMAA smaa -> smaa
    nidefawl.qubes.gl.FrameBuffer fb -> fb
    nidefawl.qubes.gl.FrameBuffer fb2 -> fb2
    int a -> a
    nidefawl.qubes.vec.Vec3D tmpPos -> tmpPos
    nidefawl.qubes.shader.Shader shaderHeavy -> shaderHeavy
    nidefawl.qubes.shader.Shader shaderTexture -> shaderTexture
    57:60:void main(java.lang.String[]) -> main
    70:79:void onStatsUpdated() -> onStatsUpdated
    83:83:void onTextInput(long,int) -> onTextInput
    87:87:void onKeyPress(long,int,int,int,int) -> onKeyPress
    92:167:void render(float) -> render
    174:182:void preRenderUpdate(float) -> preRenderUpdate
    186:186:void postRenderUpdate(float) -> postRenderUpdate
    190:217:void setRenderResolution(int,int) -> setRenderResolution
    224:252:void loadShader() -> loadShader
    256:257:void tick() -> tick
    261:270:void initGame() -> initGame
    274:277:void lateInitGame() -> lateInitGame
    282:282:void onWheelScroll(long,double,double) -> onWheelScroll
test.game.TestFontRenderer$1 -> test.game.TestFontRenderer$1:
    test.game.TestFontRenderer this$0 -> this$0
    240:242:java.lang.String getDefinition(java.lang.String) -> getDefinition
test.game.TestNanoVG -> test.game.TestNanoVG:
    test.game.CameraController cameraController -> cameraController
    org.lwjgl.nanovg.NVGColor colorA -> colorA
    org.lwjgl.nanovg.NVGColor colorB -> colorB
    org.lwjgl.nanovg.NVGColor colorC -> colorC
    long vg -> vg
    int GRAPH_RENDER_FPS -> GRAPH_RENDER_FPS
    int GRAPH_RENDER_MS -> GRAPH_RENDER_MS
    int GRAPH_RENDER_PERCENT -> GRAPH_RENDER_PERCENT
    int GRAPH_HISTORY_COUNT -> GRAPH_HISTORY_COUNT
    test.game.TestNanoVG$PerfGraph fps -> fps
    test.game.TestNanoVG$DemoData data -> data
    int image -> image
    nidefawl.qubes.render.post.SMAA smaa -> smaa
    nidefawl.qubes.gl.FrameBuffer fb -> fb
    nidefawl.qubes.gl.FrameBuffer fb2 -> fb2
    int a -> a
    nidefawl.qubes.vec.Vec3D tmpPos -> tmpPos
    nidefawl.qubes.shader.Shader shaderHeavy -> shaderHeavy
    nidefawl.qubes.shader.Shader shaderTexture -> shaderTexture
    56:61:org.lwjgl.nanovg.NVGColor rgba(int,int,int,int,org.lwjgl.nanovg.NVGColor) -> rgba
    92:121:int loadDemoData(long,test.game.TestNanoVG$DemoData) -> loadDemoData
    124:127:java.nio.ByteBuffer resizeBuffer(java.nio.ByteBuffer,int) -> resizeBuffer
    143:180:java.nio.ByteBuffer ioResourceToByteBuffer(java.lang.String,int) -> ioResourceToByteBuffer
    185:187:java.nio.ByteBuffer loadResource(java.lang.String,int) -> loadResource
    197:201:void initGraph(test.game.TestNanoVG$PerfGraph,int,java.lang.String) -> initGraph
    204:206:void updateGraph(test.game.TestNanoVG$PerfGraph,float) -> updateGraph
    209:213:float getGraphAverage(test.game.TestNanoVG$PerfGraph) -> getGraphAverage
    217:291:void renderGraph(long,float,float,test.game.TestNanoVG$PerfGraph) -> renderGraph
    297:300:void main(java.lang.String[]) -> main
    310:319:void onStatsUpdated() -> onStatsUpdated
    323:323:void onTextInput(long,int) -> onTextInput
    327:327:void onKeyPress(long,int,int,int,int) -> onKeyPress
    331:407:void render(float) -> render
    409:411:void nvgStart() -> nvgStart
    413:428:void nvgEnd() -> nvgEnd
    435:445:void preRenderUpdate(float) -> preRenderUpdate
    449:449:void postRenderUpdate(float) -> postRenderUpdate
    453:480:void setRenderResolution(int,int) -> setRenderResolution
    487:515:void loadShader() -> loadShader
    519:520:void tick() -> tick
    524:542:void initGame() -> initGame
    546:549:void lateInitGame() -> lateInitGame
    554:554:void onWheelScroll(long,double,double) -> onWheelScroll
test.game.TestNanoVG$1 -> test.game.TestNanoVG$1:
    test.game.TestNanoVG this$0 -> this$0
    503:505:java.lang.String getDefinition(java.lang.String) -> getDefinition
test.game.TestNanoVG$DemoData -> test.game.TestNanoVG$DemoData:
    java.nio.ByteBuffer entypo -> entypo
    java.nio.ByteBuffer RobotoRegular -> RobotoRegular
    java.nio.ByteBuffer RobotoBold -> RobotoBold
    int fontNormal -> fontNormal
    int fontBold -> fontBold
    int fontIcons -> fontIcons
    int[] images -> images
test.game.TestNanoVG$PerfGraph -> test.game.TestNanoVG$PerfGraph:
    int style -> style
    java.nio.ByteBuffer name -> name
    float[] values -> values
    int head -> head
test.game.TestPointSprites -> test.game.TestPointSprites:
    int MAX_SPRITES -> MAX_SPRITES
    nidefawl.qubes.input.KeybindManager movement -> movement
    test.game.CameraController cameraController -> cameraController
    nidefawl.qubes.gl.FrameBuffer sceneFB -> sceneFB
    nidefawl.qubes.gl.FrameBuffer fbDeferred -> fbDeferred
    int tick -> tick
    nidefawl.qubes.util.SimpleResourceManager shaders -> shaders
    nidefawl.qubes.util.SimpleResourceManager newshaders -> newshaders
    boolean startup -> startup
    nidefawl.qubes.gl.GLVBO vboMat -> vboMat
    nidefawl.qubes.gl.GLVBO vboQuad -> vboQuad
    nidefawl.qubes.gl.GLVBO vboIdx -> vboIdx
    nidefawl.qubes.shader.Shader spriteShader -> spriteShader
    nidefawl.qubes.shader.Shader shaderDeferred -> shaderDeferred
    nidefawl.qubes.vec.Vector3f skyColor -> skyColor
    nidefawl.qubes.vec.Vector3f fogColor -> fogColor
    int action -> action
    java.lang.String stats -> stats
    boolean once -> once
    nidefawl.qubes.vec.Vector3f tmp -> tmp
    nidefawl.qubes.vec.Vec3D tmpPos -> tmpPos
    boolean hadContext -> hadContext
    nidefawl.qubes.gl.VertexBuffer vertexBuf -> vertexBuf
    nidefawl.qubes.meshing.BlockFaceAttr attr -> attr
    int vaoPos -> vaoPos
    java.util.List clouds -> clouds
    java.nio.ByteBuffer bufMat -> bufMat
    java.nio.FloatBuffer bufMatFloat -> bufMatFloat
    nidefawl.qubes.gl.ReallocIntBuffer vertexUploadDirectBuf -> vertexUploadDirectBuf
    int texCloud -> texCloud
    nidefawl.qubes.font.FontRenderer font -> font
    int totalSprites -> totalSprites
    38:43:void main(java.lang.String[]) -> main
    63:104:void initShaders() -> initShaders
    109:124:void onStatsUpdated() -> onStatsUpdated
    128:128:void onTextInput(long,int) -> onTextInput
    132:142:void onKeyPress(long,int,int,int,int) -> onKeyPress
    148:205:void render(float) -> render
    210:219:void preRenderUpdate(float) -> preRenderUpdate
    223:223:void postRenderUpdate(float) -> postRenderUpdate
    230:251:void setRenderResolution(int,int) -> setRenderResolution
    255:257:void tick() -> tick
    261:266:void initGame() -> initGame
    279:289:void updateSprites(float) -> updateSprites
    291:295:void updateSpritesTick() -> updateSpritesTick
    297:336:void redraw() -> redraw
    338:342:void buildQuad(nidefawl.qubes.gl.VertexBuffer) -> buildQuad
    419:463:void lateInitGame() -> lateInitGame
    468:468:void onWheelScroll(long,double,double) -> onWheelScroll
test.game.TestPointSprites$1 -> test.game.TestPointSprites$1:
    test.game.TestPointSprites this$0 -> this$0
    69:72:java.lang.String getDefinition(java.lang.String) -> getDefinition
test.game.TestPointSprites$Cloud -> test.game.TestPointSprites$Cloud:
    java.util.List sprites -> sprites
    nidefawl.qubes.vec.Vector3f mot -> mot
    nidefawl.qubes.vec.Vector3f pos -> pos
    nidefawl.qubes.vec.Vector3f lastPos -> lastPos
    nidefawl.qubes.vec.Vector3f renderPos -> renderPos
    355:363:int store(java.nio.FloatBuffer) -> store
    366:371:void update(float) -> update
    373:378:void tick() -> tick
test.game.TestPointSprites$PointSprite -> test.game.TestPointSprites$PointSprite:
    float size -> size
    float rotspeed -> rotspeed
    float rot -> rot
    float lastRot -> lastRot
    float renderRot -> renderRot
    float xoffset -> xoffset
    float yoffset -> yoffset
    nidefawl.qubes.vec.Vector3f posOffset -> posOffset
    nidefawl.qubes.vec.Vector3f col -> col
    nidefawl.qubes.vec.Vector3f renderPos -> renderPos
    int tick -> tick
    396:409:void update(float) -> update
    411:414:void tick() -> tick
    380:380:nidefawl.qubes.vec.Vector3f access$000(test.game.TestPointSprites$PointSprite) -> access$000
test.game.TestSMAA -> test.game.TestSMAA:
    test.game.CameraController cameraController -> cameraController
    int image -> image
    nidefawl.qubes.render.post.SMAA smaa -> smaa
    nidefawl.qubes.vec.Vec3D tmpPos -> tmpPos
    26:29:void main(java.lang.String[]) -> main
    36:37:void onStatsUpdated() -> onStatsUpdated
    41:41:void onTextInput(long,int) -> onTextInput
    45:45:void onKeyPress(long,int,int,int,int) -> onKeyPress
    49:61:void render(float) -> render
    66:75:void preRenderUpdate(float) -> preRenderUpdate
    79:79:void postRenderUpdate(float) -> postRenderUpdate
    83:91:void setRenderResolution(int,int) -> setRenderResolution
    95:96:void tick() -> tick
    100:105:void initGame() -> initGame
    109:113:void lateInitGame() -> lateInitGame
    118:118:void onWheelScroll(long,double,double) -> onWheelScroll
test.game.TestSSAO -> test.game.TestSSAO:
    test.game.CameraController cameraController -> cameraController
    nidefawl.qubes.gl.FrameBuffer buf -> buf
    nidefawl.qubes.gl.FrameBuffer sceneFB -> sceneFB
    nidefawl.qubes.gl.TesselatorState tessState -> tessState
    nidefawl.qubes.vec.Vec3D tmpPos -> tmpPos
    boolean hadContext -> hadContext
    33:38:void main(java.lang.String[]) -> main
    43:44:void onStatsUpdated() -> onStatsUpdated
    48:48:void onTextInput(long,int) -> onTextInput
    52:52:void onKeyPress(long,int,int,int,int) -> onKeyPress
    56:72:void render(float) -> render
    77:86:void preRenderUpdate(float) -> preRenderUpdate
    90:90:void postRenderUpdate(float) -> postRenderUpdate
    95:145:void setRenderResolution(int,int) -> setRenderResolution
    149:150:void tick() -> tick
    154:159:void initGame() -> initGame
    163:199:void lateInitGame() -> lateInitGame
    204:204:void onWheelScroll(long,double,double) -> onWheelScroll
test.game.TestShader -> test.game.TestShader:
    test.game.CameraController cameraController -> cameraController
    int image -> image
    nidefawl.qubes.render.post.SMAA smaa -> smaa
    nidefawl.qubes.gl.FrameBuffer fb2 -> fb2
    int a -> a
    boolean down -> down
    nidefawl.qubes.vec.Vec3D tmpPos -> tmpPos
    nidefawl.qubes.shader.Shader shaderHeavy -> shaderHeavy
    nidefawl.qubes.shader.Shader shaderTexture -> shaderTexture
    nidefawl.qubes.font.FontRenderer font -> font
    nidefawl.qubes.font.TextInput text -> text
    float lastMx -> lastMx
    float lastMy -> lastMy
    boolean first -> first
    int image2 -> image2
    37:40:void main(java.lang.String[]) -> main
    50:59:void onStatsUpdated() -> onStatsUpdated
    63:64:void onTextInput(long,int) -> onTextInput
    68:71:void onKeyPress(long,int,int,int,int) -> onKeyPress
    75:101:void render(float) -> render
    110:121:void updateMousePos() -> updateMousePos
    124:134:void preRenderUpdate(float) -> preRenderUpdate
    138:139:void postRenderUpdate(float) -> postRenderUpdate
    143:161:void setRenderResolution(int,int) -> setRenderResolution
    165:170:void updateInput() -> updateInput
    178:215:void loadShader() -> loadShader
    220:221:void tick() -> tick
    225:237:void initGame() -> initGame
    241:245:void lateInitGame() -> lateInitGame
    250:250:void onWheelScroll(long,double,double) -> onWheelScroll
    254:254:void submit(nidefawl.qubes.font.TextInput) -> submit
    258:258:void onEscape(nidefawl.qubes.font.TextInput) -> onEscape
test.game.TestShader$1 -> test.game.TestShader$1:
    test.game.TestShader this$0 -> this$0
    203:205:java.lang.String getDefinition(java.lang.String) -> getDefinition
test.game.meshregion.MeshList -> test.game.meshregion.MeshList:
    test.game.meshregion.VMeshBuffer[] array -> array
    27:30:test.game.meshregion.VMeshBuffer getMesh(int,int) -> getMesh
    void bindVAO() -> bindVAO
    void init() -> init
    void draw() -> draw
    void reset() -> reset
    void upload(int,int) -> upload
    void addFace(nidefawl.qubes.meshing.BlockFaceAttr) -> addFace
    45:45:java.lang.String getName() -> getName
test.game.meshregion.MeshListInterleaved -> test.game.meshregion.MeshListInterleaved:
    int vao -> vao
    int VERT_LEN1 -> VERT_LEN1
    nidefawl.qubes.gl.VertexBuffer bufferDataVertex -> bufferDataVertex
    21:27:void init() -> init
    31:38:void draw() -> draw
    42:43:void bindVAO() -> bindVAO
    48:49:void addFace(nidefawl.qubes.meshing.BlockFaceAttr) -> addFace
    53:54:void reset() -> reset
    58:64:void upload(int,int) -> upload
    68:105:void setupVAO() -> setupVAO
test.game.meshregion.MeshListInterleavedNV -> test.game.meshregion.MeshListInterleavedNV:
    int vao -> vao
    int VERT_LEN1 -> VERT_LEN1
    nidefawl.qubes.gl.VertexBuffer bufferDataVertex -> bufferDataVertex
    int[] attrOffsets -> attrOffsets
    nidefawl.qubes.gl.MultiDrawIndirectBuffer buffer -> buffer
    boolean bindless -> bindless
    boolean first -> first
    28:34:void init() -> init
    38:43:void draw() -> draw
    46:57:void draw2() -> draw2
    59:74:void draw1() -> draw1
    78:79:void bindVAO() -> bindVAO
    84:85:void addFace(nidefawl.qubes.meshing.BlockFaceAttr) -> addFace
    89:91:void reset() -> reset
    95:101:void upload(int,int) -> upload
    105:152:void setupVAO() -> setupVAO
    154:154:java.lang.String getName() -> getName
test.game.meshregion.MeshListInterleavedNV_Half -> test.game.meshregion.MeshListInterleavedNV_Half:
    int vao -> vao
    int VERT_LEN1 -> VERT_LEN1
    nidefawl.qubes.gl.VertexBuffer bufferDataVertex -> bufferDataVertex
    int[] attrOffsets -> attrOffsets
    25:31:void init() -> init
    35:50:void draw() -> draw
    54:55:void bindVAO() -> bindVAO
    60:61:void addFace(nidefawl.qubes.meshing.BlockFaceAttr) -> addFace
    65:66:void reset() -> reset
    70:76:void upload(int,int) -> upload
    80:127:void setupVAO() -> setupVAO
test.game.meshregion.MeshListSeperate -> test.game.meshregion.MeshListSeperate:
    int vao -> vao
    int VERT_LEN1 -> VERT_LEN1
    int VERT_LEN2 -> VERT_LEN2
    nidefawl.qubes.gl.VertexBuffer bufferDataVertex -> bufferDataVertex
    nidefawl.qubes.gl.VertexBuffer bufferDataFace -> bufferDataFace
    23:30:void init() -> init
    34:42:void draw() -> draw
    46:47:void bindVAO() -> bindVAO
    50:52:void addFace(nidefawl.qubes.meshing.BlockFaceAttr) -> addFace
    55:57:void reset() -> reset
    60:68:void upload(int,int) -> upload
    73:111:void setupVAO() -> setupVAO
test.game.meshregion.VMeshBuffer -> test.game.meshregion.VMeshBuffer:
    int x -> x
    int z -> z
test.game.meshregion.VMeshBufferInterleaved -> test.game.meshregion.VMeshBufferInterleaved:
    nidefawl.qubes.gl.GLTriBuffer vertexBuffer -> vertexBuffer
test.game.meshregion.VMeshBufferInterleavedNV -> test.game.meshregion.VMeshBufferInterleavedNV:
    nidefawl.qubes.gl.GLTriBuffer vertexBuffer -> vertexBuffer
test.game.meshregion.VMeshBufferInterleavedNV_Half -> test.game.meshregion.VMeshBufferInterleavedNV_Half:
    nidefawl.qubes.gl.GLTriBuffer vertexBuffer -> vertexBuffer
    long addr -> addr
    long addrIdx -> addrIdx
    long size -> size
    long sizeIdx -> sizeIdx
test.game.meshregion.VMeshBufferSeperate -> test.game.meshregion.VMeshBufferSeperate:
    nidefawl.qubes.gl.GLTriBuffer vertexBuffer -> vertexBuffer
    nidefawl.qubes.gl.GLAttrBuffer faceAttrBuffer -> faceAttrBuffer
test.game.meshregion.VertexPointerTest -> test.game.meshregion.VertexPointerTest:
    int REGION_DIST -> REGION_DIST
    test.game.CameraController cameraController -> cameraController
    nidefawl.qubes.gl.FrameBuffer sceneFB -> sceneFB
    nidefawl.qubes.gl.FrameBuffer fbDeferred -> fbDeferred
    boolean hadContext -> hadContext
    boolean once -> once
    nidefawl.qubes.vec.Vector3f tmp -> tmp
    nidefawl.qubes.vec.Vector3f skyColor -> skyColor
    nidefawl.qubes.vec.Vector3f fogColor -> fogColor
    int tick -> tick
    nidefawl.qubes.util.SimpleResourceManager shaders -> shaders
    nidefawl.qubes.util.SimpleResourceManager newshaders -> newshaders
    boolean startup -> startup
    nidefawl.qubes.shader.Shader modelShader -> modelShader
    nidefawl.qubes.shader.Shader terrainShader -> terrainShader
    nidefawl.qubes.shader.Shader shaderDeferred -> shaderDeferred
    nidefawl.qubes.shader.Shader skyShader -> skyShader
    int action -> action
    java.lang.String stats -> stats
    nidefawl.qubes.vec.Vec3D tmpPos -> tmpPos
    boolean reverse -> reverse
    test.game.meshregion.MeshList listIntNV_Half -> listIntNV_Half
    test.game.meshregion.MeshList listIntNVBuf -> listIntNVBuf
    test.game.meshregion.MeshList listIntNV -> listIntNV
    test.game.meshregion.MeshList listInt -> listInt
    test.game.meshregion.MeshList listSep -> listSep
    test.game.meshregion.MeshList[] lists -> lists
    int size -> size
    nidefawl.qubes.meshing.BlockFaceAttr attr -> attr
    nidefawl.qubes.texture.array.TextureArray arr -> arr
    nidefawl.qubes.gl.TesselatorState skybox1 -> skybox1
    nidefawl.qubes.gl.TesselatorState skybox2 -> skybox2
    nidefawl.qubes.font.FontRenderer font -> font
    51:56:void main(java.lang.String[]) -> main
    72:127:void initShaders() -> initShaders
    132:161:void onStatsUpdated() -> onStatsUpdated
    165:165:void onTextInput(long,int) -> onTextInput
    169:169:void onKeyPress(long,int,int,int,int) -> onKeyPress
    175:295:void render(float) -> render
    301:309:void preRenderUpdate(float) -> preRenderUpdate
    313:313:void postRenderUpdate(float) -> postRenderUpdate
    318:339:void setRenderResolution(int,int) -> setRenderResolution
    343:344:void tick() -> tick
    347:352:void initGame() -> initGame
    360:388:void redraw() -> redraw
    391:432:void drawFace(float,float,float,int) -> drawFace
    444:576:void lateInitGame() -> lateInitGame
    581:581:void onWheelScroll(long,double,double) -> onWheelScroll
test.game.meshregion.VertexPointerTest$1 -> test.game.meshregion.VertexPointerTest$1:
    test.game.meshregion.VertexPointerTest this$0 -> this$0
    77:80:java.lang.String getDefinition(java.lang.String) -> getDefinition
test.game.meshregion.VertexPointerTest$2 -> test.game.meshregion.VertexPointerTest$2:
    test.game.meshregion.VertexPointerTest this$0 -> this$0
    87:90:java.lang.String getDefinition(java.lang.String) -> getDefinition
test.game.meshregion.VertexPointerTest$3 -> test.game.meshregion.VertexPointerTest$3:
    test.game.meshregion.VertexPointerTest this$0 -> this$0
    456:500:void uploadTextures() -> uploadTextures
    504:506:void findMaxTileWidth() -> findMaxTileWidth
    509:509:void collectTextures(nidefawl.qubes.assets.AssetManager) -> collectTextures
    513:530:void postUpload() -> postUpload
test.game.vr.OpenVRUtil -> test.game.vr.OpenVRUtil:
    long SLEEP_PRECISION -> SLEEP_PRECISION
    long SPIN_YIELD_PRECISION -> SPIN_YIELD_PRECISION
    24:36:void sleepNanos(long) -> sleepNanos
    41:57:void Matrix4fSet(nidefawl.qubes.vec.Matrix4f,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float) -> Matrix4fSet
    61:77:void Matrix4fCopy(nidefawl.qubes.vec.Matrix4f,nidefawl.qubes.vec.Matrix4f) -> Matrix4fCopy
    81:85:void Matrix4fSetIdentity(nidefawl.qubes.vec.Matrix4f) -> Matrix4fSetIdentity
    88:94:nidefawl.qubes.vec.Matrix4f convertSteamVRMatrix3ToMatrix4f(jopenvr.HmdMatrix34_t,nidefawl.qubes.vec.Matrix4f) -> convertSteamVRMatrix3ToMatrix4f
    99:103:nidefawl.qubes.vec.Matrix4f convertSteamVRMatrix4ToMatrix4f(jopenvr.HmdMatrix44_t,nidefawl.qubes.vec.Matrix4f) -> convertSteamVRMatrix4ToMatrix4f
test.game.vr.OpenVRUtilColMajor -> test.game.vr.OpenVRUtilColMajor:
    long SLEEP_PRECISION -> SLEEP_PRECISION
    long SPIN_YIELD_PRECISION -> SPIN_YIELD_PRECISION
    24:36:void sleepNanos(long) -> sleepNanos
    41:57:void Matrix4fSet(nidefawl.qubes.vec.Matrix4f,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float) -> Matrix4fSet
    61:77:void Matrix4fCopy(nidefawl.qubes.vec.Matrix4f,nidefawl.qubes.vec.Matrix4f) -> Matrix4fCopy
    81:85:void Matrix4fSetIdentity(nidefawl.qubes.vec.Matrix4f) -> Matrix4fSetIdentity
    88:94:nidefawl.qubes.vec.Matrix4f convertSteamVRMatrix3ToMatrix4f(jopenvr.HmdMatrix34_t,nidefawl.qubes.vec.Matrix4f) -> convertSteamVRMatrix3ToMatrix4f
    99:103:nidefawl.qubes.vec.Matrix4f convertSteamVRMatrix4ToMatrix4f(jopenvr.HmdMatrix44_t,nidefawl.qubes.vec.Matrix4f) -> convertSteamVRMatrix4ToMatrix4f
test.game.vr.VR -> test.game.vr.VR:
    boolean DEBUG_PRINT -> DEBUG_PRINT
    boolean READ_MATS -> READ_MATS
    jopenvr.VR_IVRSystem_FnTable vrsystem -> vrsystem
    test.game.vr.VR$VRSettings settings -> settings
    test.game.vr.VR$VRViewProjection cam -> cam
    java.nio.FloatBuffer tlastVsync -> tlastVsync
    java.nio.LongBuffer _tframeCount -> _tframeCount
    java.nio.IntBuffer hmdDisplayFrequency -> hmdDisplayFrequency
    jopenvr.TrackedDevicePose_t$ByReference hmdTrackedDevicePoseReference -> hmdTrackedDevicePoseReference
    jopenvr.TrackedDevicePose_t[] hmdTrackedDevicePoses -> hmdTrackedDevicePoses
    double timePerFrame -> timePerFrame
    boolean initSuccess -> initSuccess
    boolean initDone -> initDone
    java.lang.String initStatus -> initStatus
    jopenvr.VR_IVRCompositor_FnTable vrCompositor -> vrCompositor
    java.nio.IntBuffer hmdErrorStore -> hmdErrorStore
    jopenvr.VR_IVROverlay_FnTable vrOverlay -> vrOverlay
    jopenvr.VR_IVRRenderModels_FnTable vrRenderModels -> vrRenderModels
    jopenvr.VR_IVRSettings_FnTable vrSettings -> vrSettings
    jopenvr.VRTextureBounds_t texBounds -> texBounds
    jopenvr.Texture_t texType0 -> texType0
    jopenvr.Texture_t texType1 -> texType1
    nidefawl.qubes.vec.Matrix4f[] poseMatrices -> poseMatrices
    nidefawl.qubes.vec.Vec3D[] deviceVelocity -> deviceVelocity
    nidefawl.qubes.vec.Matrix4f hmdPose -> hmdPose
    nidefawl.qubes.vec.Matrix4f hmdPose2 -> hmdPose2
    boolean headIsTracking -> headIsTracking
    int RIGHT_CONTROLLER -> RIGHT_CONTROLLER
    int LEFT_CONTROLLER -> LEFT_CONTROLLER
    boolean[] controllerTracking -> controllerTracking
    nidefawl.qubes.vec.Matrix4f[] controllerPose -> controllerPose
    nidefawl.qubes.vec.Matrix4f[] controllerRotation -> controllerRotation
    int[] controllerDeviceIndex -> controllerDeviceIndex
    jopenvr.VRControllerState_t$ByReference[] inputStateRefernceArray -> inputStateRefernceArray
    jopenvr.VRControllerState_t[] lastControllerState -> lastControllerState
    jopenvr.VRControllerState_t[] controllerStateReference -> controllerStateReference
    int maxControllerVelocitySamples -> maxControllerVelocitySamples
    nidefawl.qubes.vec.Vec3D[][] controllerVelocitySamples -> controllerVelocitySamples
    int[] controllerVelocitySampleCount -> controllerVelocitySampleCount
    nidefawl.qubes.vec.Matrix4f[] controllerTipTransform -> controllerTipTransform
    nidefawl.qubes.vec.Matrix4f[] handRotation -> handRotation
    int renderWidth -> renderWidth
    int renderHeight -> renderHeight
    boolean hasRead -> hasRead
    nidefawl.qubes.gl.FrameBuffer fbLeft -> fbLeft
    nidefawl.qubes.gl.FrameBuffer fbRight -> fbRight
    nidefawl.qubes.vec.Matrix4f tmpMat -> tmpMat
    160:162:com.sun.jna.Pointer ptrFomrString(java.lang.String) -> ptrFomrString
    175:203:boolean InitVR() -> InitVR
    210:225:void initOpenVRRenderModels() -> initOpenVRRenderModels
    229:237:void initOpenVROverlay() -> initOpenVROverlay
    240:255:void initOpenVROSettings() -> initOpenVROSettings
    257:299:void initializeJOpenVR() -> initializeJOpenVR
    303:377:void initOpenVRCompositor(boolean) -> initOpenVRCompositor
    382:406:java.lang.String getCompostiorError(int) -> getCompostiorError
    413:443:void readMat4s(java.lang.String,nidefawl.qubes.vec.Matrix4f) -> readMat4s
    452:455:void readMats() -> readMats
    458:516:void updatePose(float) -> updatePose
    519:532:void getTipTransforms() -> getTipTransforms
    536:546:void findControllerDevices() -> findControllerDevices
    549:589:void Submit() -> Submit
    592:606:void initApp(nidefawl.qubes.GameBase) -> initApp
    610:626:void initVRFB(int,int) -> initVRFB
    629:648:void setupCamera(int,float) -> setupCamera
    651:666:void bindAndClearFramebuffer(int) -> bindAndClearFramebuffer
    670:670:boolean isInit() -> isInit
    674:674:nidefawl.qubes.gl.FrameBuffer getFB(int) -> getFB
    678:689:void setViewPort(int) -> setViewPort
test.game.vr.VR$VRSettings -> test.game.vr.VR$VRSettings:
    boolean seated -> seated
    boolean vrReverseHands -> vrReverseHands
test.game.vr.VR$VRViewProjection -> test.game.vr.VR$VRViewProjection:
    nidefawl.qubes.vec.Matrix4f projLeft -> projLeft
    nidefawl.qubes.vec.Matrix4f projRight -> projRight
    nidefawl.qubes.vec.Matrix4f poseEyeLeft -> poseEyeLeft
    nidefawl.qubes.vec.Matrix4f poseEyeRight -> poseEyeRight
    nidefawl.qubes.vec.Matrix4f viewLeft -> viewLeft
    nidefawl.qubes.vec.Matrix4f viewRight -> viewRight
    41:51:void setEyeToHeadTransform() -> setEyeToHeadTransform
    54:66:void setEyeProj(float,float) -> setEyeProj
    69:72:void update(float) -> update
test.game.vr.VRApp -> test.game.vr.VRApp:
    test.game.vr.VRApp$InputSource selInputSource -> selInputSource
    nidefawl.qubes.util.SimpleResourceManager shaders -> shaders
    nidefawl.qubes.util.SimpleResourceManager newshaders -> newshaders
    test.game.CameraController cameraController -> cameraController
    nidefawl.qubes.gl.FrameBuffer sceneFB -> sceneFB
    nidefawl.qubes.gl.GLTriBuffer cube -> cube
    nidefawl.qubes.shader.Shader modelShader -> modelShader
    int tick -> tick
    boolean startup -> startup
    int action -> action
    boolean once -> once
    nidefawl.qubes.vec.Vector3f tmp -> tmp
    nidefawl.qubes.vec.Vec3D tmpPos -> tmpPos
    boolean hadContext -> hadContext
    32:35:void main(java.lang.String[]) -> main
    53:71:void initShaders() -> initShaders
    76:91:void onStatsUpdated() -> onStatsUpdated
    95:95:void onTextInput(long,int) -> onTextInput
    99:99:void onKeyPress(long,int,int,int,int) -> onKeyPress
    104:140:void renderScene(float) -> renderScene
    144:155:void render(float) -> render
    160:167:void preRenderUpdate(float) -> preRenderUpdate
    171:171:void postRenderUpdate(float) -> postRenderUpdate
    177:196:void setRenderResolution(int,int) -> setRenderResolution
    200:201:void tick() -> tick
    205:210:void initGame() -> initGame
    213:217:void redraw() -> redraw
    221:227:void lateInitGame() -> lateInitGame
    232:232:void onWheelScroll(long,double,double) -> onWheelScroll
test.game.vr.VRApp$InputSource -> test.game.vr.VRApp$InputSource:
    test.game.vr.VRApp$InputSource MOUSE -> MOUSE
    test.game.vr.VRApp$InputSource HEADTRACKING -> HEADTRACKING
    test.game.vr.VRApp$InputSource[] $VALUES -> $VALUES
    36:36:test.game.vr.VRApp$InputSource[] values() -> values
    36:36:test.game.vr.VRApp$InputSource valueOf(java.lang.String) -> valueOf
